
Gateway_STM32F107RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5f0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  0800a7d4  0800a7d4  0001a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9a0  0800b9a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9a0  0800b9a0  0001b9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9a8  0800b9a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9a8  0800b9a8  0001b9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9ac  0800b9ac  0001b9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b9b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e1c  20000068  0800ba18  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e84  0800ba18  00027e84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c5f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e5b  00000000  00000000  00038d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f46  00000000  00000000  0003efb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ba23  00000000  00000000  0003fefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000229dd  00000000  00000000  0006b921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc31  00000000  00000000  0008e2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005744  00000000  00000000  0015df30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00163674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	0800a7bc 	.word	0x0800a7bc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	0800a7bc 	.word	0x0800a7bc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_ldivmod>:
 8000234:	b97b      	cbnz	r3, 8000256 <__aeabi_ldivmod+0x22>
 8000236:	b972      	cbnz	r2, 8000256 <__aeabi_ldivmod+0x22>
 8000238:	2900      	cmp	r1, #0
 800023a:	bfbe      	ittt	lt
 800023c:	2000      	movlt	r0, #0
 800023e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000242:	e006      	blt.n	8000252 <__aeabi_ldivmod+0x1e>
 8000244:	bf08      	it	eq
 8000246:	2800      	cmpeq	r0, #0
 8000248:	bf1c      	itt	ne
 800024a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800024e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000252:	f000 b9bd 	b.w	80005d0 <__aeabi_idiv0>
 8000256:	f1ad 0c08 	sub.w	ip, sp, #8
 800025a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800025e:	2900      	cmp	r1, #0
 8000260:	db09      	blt.n	8000276 <__aeabi_ldivmod+0x42>
 8000262:	2b00      	cmp	r3, #0
 8000264:	db1a      	blt.n	800029c <__aeabi_ldivmod+0x68>
 8000266:	f000 f84d 	bl	8000304 <__udivmoddi4>
 800026a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000272:	b004      	add	sp, #16
 8000274:	4770      	bx	lr
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	2b00      	cmp	r3, #0
 800027e:	db1b      	blt.n	80002b8 <__aeabi_ldivmod+0x84>
 8000280:	f000 f840 	bl	8000304 <__udivmoddi4>
 8000284:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800028c:	b004      	add	sp, #16
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	4252      	negs	r2, r2
 8000296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f82f 	bl	8000304 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4240      	negs	r0, r0
 80002b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b6:	4770      	bx	lr
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	f000 f821 	bl	8000304 <__udivmoddi4>
 80002c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ca:	b004      	add	sp, #16
 80002cc:	4252      	negs	r2, r2
 80002ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e8:	f000 b972 	b.w	80005d0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9e08      	ldr	r6, [sp, #32]
 800030a:	460d      	mov	r5, r1
 800030c:	4604      	mov	r4, r0
 800030e:	468e      	mov	lr, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14c      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000314:	428a      	cmp	r2, r1
 8000316:	4694      	mov	ip, r2
 8000318:	d967      	bls.n	80003ea <__udivmoddi4+0xe6>
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	b153      	cbz	r3, 8000336 <__udivmoddi4+0x32>
 8000320:	fa02 fc03 	lsl.w	ip, r2, r3
 8000324:	f1c3 0220 	rsb	r2, r3, #32
 8000328:	fa01 fe03 	lsl.w	lr, r1, r3
 800032c:	fa20 f202 	lsr.w	r2, r0, r2
 8000330:	ea42 0e0e 	orr.w	lr, r2, lr
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fbbe f1f7 	udiv	r1, lr, r7
 800033e:	fa1f f58c 	uxth.w	r5, ip
 8000342:	fb07 ee11 	mls	lr, r7, r1, lr
 8000346:	fb01 f005 	mul.w	r0, r1, r5
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x66>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800035c:	f080 8119 	bcs.w	8000592 <__udivmoddi4+0x28e>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8116 	bls.w	8000592 <__udivmoddi4+0x28e>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	fb00 f505 	mul.w	r5, r0, r5
 8000378:	b2a4      	uxth	r4, r4
 800037a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8104 	bcs.w	8000596 <__udivmoddi4+0x292>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8101 	bls.w	8000596 <__udivmoddi4+0x292>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	2100      	movs	r1, #0
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xc0>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ea 	beq.w	800058c <__udivmoddi4+0x288>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d148      	bne.n	800045e <__udivmoddi4+0x15a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xd2>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2c2>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4696      	mov	lr, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003e4:	e9c6 4e00 	strd	r4, lr, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa6>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xea>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 808e 	bne.w	8000514 <__udivmoddi4+0x210>
 80003f8:	1a88      	subs	r0, r1, r2
 80003fa:	2101      	movs	r1, #1
 80003fc:	0c17      	lsrs	r7, r2, #16
 80003fe:	fa1f fe82 	uxth.w	lr, r2
 8000402:	fbb0 f5f7 	udiv	r5, r0, r7
 8000406:	fb07 0015 	mls	r0, r7, r5, r0
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000410:	fb0e f005 	mul.w	r0, lr, r5
 8000414:	4290      	cmp	r0, r2
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x126>
 8000418:	eb1c 0202 	adds.w	r2, ip, r2
 800041c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x124>
 8000422:	4290      	cmp	r0, r2
 8000424:	f200 80cc 	bhi.w	80005c0 <__udivmoddi4+0x2bc>
 8000428:	4645      	mov	r5, r8
 800042a:	1a12      	subs	r2, r2, r0
 800042c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000430:	fb07 2210 	mls	r2, r7, r0, r2
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	b2a4      	uxth	r4, r4
 800043a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043e:	45a6      	cmp	lr, r4
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x150>
 8000442:	eb1c 0404 	adds.w	r4, ip, r4
 8000446:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14e>
 800044c:	45a6      	cmp	lr, r4
 800044e:	f200 80b4 	bhi.w	80005ba <__udivmoddi4+0x2b6>
 8000452:	4610      	mov	r0, r2
 8000454:	eba4 040e 	sub.w	r4, r4, lr
 8000458:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045c:	e7a0      	b.n	80003a0 <__udivmoddi4+0x9c>
 800045e:	f1c1 0720 	rsb	r7, r1, #32
 8000462:	408b      	lsls	r3, r1
 8000464:	fa22 fc07 	lsr.w	ip, r2, r7
 8000468:	ea4c 0c03 	orr.w	ip, ip, r3
 800046c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	fbba f8f9 	udiv	r8, sl, r9
 8000478:	408d      	lsls	r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	432b      	orrs	r3, r5
 8000488:	fa00 f501 	lsl.w	r5, r0, r1
 800048c:	fb08 f00e 	mul.w	r0, r8, lr
 8000490:	0c1c      	lsrs	r4, r3, #16
 8000492:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000496:	42a0      	cmp	r0, r4
 8000498:	fa02 f201 	lsl.w	r2, r2, r1
 800049c:	d90b      	bls.n	80004b6 <__udivmoddi4+0x1b2>
 800049e:	eb1c 0404 	adds.w	r4, ip, r4
 80004a2:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a6:	f080 8086 	bcs.w	80005b6 <__udivmoddi4+0x2b2>
 80004aa:	42a0      	cmp	r0, r4
 80004ac:	f240 8083 	bls.w	80005b6 <__udivmoddi4+0x2b2>
 80004b0:	f1a8 0802 	sub.w	r8, r8, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1a24      	subs	r4, r4, r0
 80004b8:	b298      	uxth	r0, r3
 80004ba:	fbb4 f3f9 	udiv	r3, r4, r9
 80004be:	fb09 4413 	mls	r4, r9, r3, r4
 80004c2:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80004ca:	45a6      	cmp	lr, r4
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x1dc>
 80004ce:	eb1c 0404 	adds.w	r4, ip, r4
 80004d2:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80004d6:	d26a      	bcs.n	80005ae <__udivmoddi4+0x2aa>
 80004d8:	45a6      	cmp	lr, r4
 80004da:	d968      	bls.n	80005ae <__udivmoddi4+0x2aa>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4464      	add	r4, ip
 80004e0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80004e4:	fba0 9302 	umull	r9, r3, r0, r2
 80004e8:	eba4 040e 	sub.w	r4, r4, lr
 80004ec:	429c      	cmp	r4, r3
 80004ee:	46c8      	mov	r8, r9
 80004f0:	469e      	mov	lr, r3
 80004f2:	d354      	bcc.n	800059e <__udivmoddi4+0x29a>
 80004f4:	d051      	beq.n	800059a <__udivmoddi4+0x296>
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	d067      	beq.n	80005ca <__udivmoddi4+0x2c6>
 80004fa:	ebb5 0308 	subs.w	r3, r5, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	40cb      	lsrs	r3, r1
 8000504:	fa04 f707 	lsl.w	r7, r4, r7
 8000508:	431f      	orrs	r7, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	2100      	movs	r1, #0
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0xa6>
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	f1c3 0020 	rsb	r0, r3, #32
 800051c:	40c1      	lsrs	r1, r0
 800051e:	409d      	lsls	r5, r3
 8000520:	fa24 f000 	lsr.w	r0, r4, r0
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	4328      	orrs	r0, r5
 800052a:	fbb1 f5f7 	udiv	r5, r1, r7
 800052e:	fb07 1115 	mls	r1, r7, r5, r1
 8000532:	fa1f fe8c 	uxth.w	lr, ip
 8000536:	0c02      	lsrs	r2, r0, #16
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	fa04 f403 	lsl.w	r4, r4, r3
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x256>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000550:	d22f      	bcs.n	80005b2 <__udivmoddi4+0x2ae>
 8000552:	4291      	cmp	r1, r2
 8000554:	d92d      	bls.n	80005b2 <__udivmoddi4+0x2ae>
 8000556:	3d02      	subs	r5, #2
 8000558:	4462      	add	r2, ip
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000560:	fb07 2211 	mls	r2, r7, r1, r2
 8000564:	b280      	uxth	r0, r0
 8000566:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800056a:	fb01 f20e 	mul.w	r2, r1, lr
 800056e:	4282      	cmp	r2, r0
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x280>
 8000572:	eb1c 0000 	adds.w	r0, ip, r0
 8000576:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800057a:	d216      	bcs.n	80005aa <__udivmoddi4+0x2a6>
 800057c:	4282      	cmp	r2, r0
 800057e:	d914      	bls.n	80005aa <__udivmoddi4+0x2a6>
 8000580:	3902      	subs	r1, #2
 8000582:	4460      	add	r0, ip
 8000584:	1a80      	subs	r0, r0, r2
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	e73a      	b.n	8000402 <__udivmoddi4+0xfe>
 800058c:	4631      	mov	r1, r6
 800058e:	4630      	mov	r0, r6
 8000590:	e70b      	b.n	80003aa <__udivmoddi4+0xa6>
 8000592:	4671      	mov	r1, lr
 8000594:	e6e9      	b.n	800036a <__udivmoddi4+0x66>
 8000596:	4610      	mov	r0, r2
 8000598:	e6fe      	b.n	8000398 <__udivmoddi4+0x94>
 800059a:	454d      	cmp	r5, r9
 800059c:	d2ab      	bcs.n	80004f6 <__udivmoddi4+0x1f2>
 800059e:	ebb9 0802 	subs.w	r8, r9, r2
 80005a2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7a5      	b.n	80004f6 <__udivmoddi4+0x1f2>
 80005aa:	4641      	mov	r1, r8
 80005ac:	e7ea      	b.n	8000584 <__udivmoddi4+0x280>
 80005ae:	4603      	mov	r3, r0
 80005b0:	e796      	b.n	80004e0 <__udivmoddi4+0x1dc>
 80005b2:	4645      	mov	r5, r8
 80005b4:	e7d1      	b.n	800055a <__udivmoddi4+0x256>
 80005b6:	46d0      	mov	r8, sl
 80005b8:	e77d      	b.n	80004b6 <__udivmoddi4+0x1b2>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e749      	b.n	8000454 <__udivmoddi4+0x150>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e731      	b.n	800042a <__udivmoddi4+0x126>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xdc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6ed      	b.n	80003aa <__udivmoddi4+0xa6>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <BasicQueue_clear>:
	uint8_t* ring_buffer;
};


static inline void BasicQueue_clear(struct BasicQueue_t* obj)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	obj->next_write = 0;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
	obj->next_read = 0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
	obj->count = 0;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
	memset(obj->ring_buffer, 0x00, obj->data_size * obj->max_count);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6958      	ldr	r0, [r3, #20]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	68d2      	ldr	r2, [r2, #12]
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f009 faaa 	bl	8009b5a <memset>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <BasicQueue_init>:


static inline void BasicQueue_init(struct BasicQueue_t* obj, size_t data_size, size_t max_count, void* buffer)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	603b      	str	r3, [r7, #0]
	obj->data_size = data_size;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	611a      	str	r2, [r3, #16]

	obj->max_count = max_count;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	60da      	str	r2, [r3, #12]
	obj->ring_buffer = (uint8_t*)buffer;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	615a      	str	r2, [r3, #20]

	BasicQueue_clear(obj);
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f7ff ffd0 	bl	80005d4 <BasicQueue_clear>
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <BasicQueue_count>:


static inline size_t BasicQueue_count(struct BasicQueue_t* obj)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	return obj->count;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <BasicQueue_isFill>:


static inline size_t BasicQueue_isFill(struct BasicQueue_t* obj)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	return obj->count == obj->max_count;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	429a      	cmp	r2, r3
 8000664:	bf0c      	ite	eq
 8000666:	2301      	moveq	r3, #1
 8000668:	2300      	movne	r3, #0
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <BasicQueue_add>:
{
    return obj->data_size;
}

static inline void BasicQueue_add(struct BasicQueue_t* obj, const void* data)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
	if(BasicQueue_isFill(obj))
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ffe6 	bl	8000652 <BasicQueue_isFill>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d010      	beq.n	80006ae <BasicQueue_add+0x38>
	{
		obj->count--;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	1e5a      	subs	r2, r3, #1
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	609a      	str	r2, [r3, #8]
		obj->next_read = (obj->next_read + 1) % obj->max_count;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	68d2      	ldr	r2, [r2, #12]
 80006a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80006a4:	fb01 f202 	mul.w	r2, r1, r2
 80006a8:	1a9a      	subs	r2, r3, r2
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	605a      	str	r2, [r3, #4]
	}

	memcpy(&obj->ring_buffer[obj->next_write * obj->data_size], data, obj->data_size);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	6909      	ldr	r1, [r1, #16]
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	18d0      	adds	r0, r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	461a      	mov	r2, r3
 80006c6:	6839      	ldr	r1, [r7, #0]
 80006c8:	f009 fabd 	bl	8009c46 <memcpy>
	obj->count++;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	609a      	str	r2, [r3, #8]
    obj->next_write = (obj->next_write + 1) % obj->max_count;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68d2      	ldr	r2, [r2, #12]
 80006e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80006e4:	fb01 f202 	mul.w	r2, r1, r2
 80006e8:	1a9a      	subs	r2, r3, r2
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <BasicQueue_get>:
		return 1;
	}
}

static inline int BasicQueue_get(struct BasicQueue_t* obj, void* data)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	if(obj->count == 0)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d101      	bne.n	800070c <BasicQueue_get+0x16>
	{
		return 0;
 8000708:	2300      	movs	r3, #0
 800070a:	e020      	b.n	800074e <BasicQueue_get+0x58>
	}else{
		memcpy(data, &obj->ring_buffer[obj->next_read * obj->data_size], obj->data_size);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	6909      	ldr	r1, [r1, #16]
 8000718:	fb01 f303 	mul.w	r3, r1, r3
 800071c:	18d1      	adds	r1, r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	461a      	mov	r2, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f009 fa8e 	bl	8009c46 <memcpy>
		obj->count--;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	1e5a      	subs	r2, r3, #1
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	609a      	str	r2, [r3, #8]
        obj->next_read = (obj->next_read + 1) % obj->max_count;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	3301      	adds	r3, #1
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68d2      	ldr	r2, [r2, #12]
 800073e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000742:	fb01 f202 	mul.w	r2, r1, r2
 8000746:	1a9a      	subs	r2, r3, r2
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	605a      	str	r2, [r3, #4]
		return 1;
 800074c:	2301      	movs	r3, #1
	}
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_CAN_RxFifo0MsgPendingCallback>:
static ip4_addr_t g_send_addr;
static uint8_t g_sequence_counter;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08e      	sub	sp, #56	; 0x38
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	f107 021c 	add.w	r2, r7, #28
 8000768:	2100      	movs	r1, #0
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f001 fc34 	bl	8001fd8 <HAL_CAN_GetRxMessage>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d11c      	bne.n	80007b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
	{
		struct CSIo_dataFrame_t data_frame;
		data_frame.id = (uint16_t)RxHeader.StdId;
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	b29b      	uxth	r3, r3
 800077a:	81bb      	strh	r3, [r7, #12]
		data_frame.reg = (uint8_t)RxData[0];
 800077c:	7d3b      	ldrb	r3, [r7, #20]
 800077e:	73bb      	strb	r3, [r7, #14]
		data_frame.len = (uint8_t)RxHeader.DLC - 1;
 8000780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3b01      	subs	r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		data_frame.data[0] = (uint8_t)RxData[1];
 800078a:	7d7b      	ldrb	r3, [r7, #21]
 800078c:	743b      	strb	r3, [r7, #16]
		data_frame.data[1] = (uint8_t)RxData[2];
 800078e:	7dbb      	ldrb	r3, [r7, #22]
 8000790:	747b      	strb	r3, [r7, #17]
		data_frame.data[2] = (uint8_t)RxData[3];
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	74bb      	strb	r3, [r7, #18]
		data_frame.data[3] = (uint8_t)RxData[4];
 8000796:	7e3b      	ldrb	r3, [r7, #24]
 8000798:	74fb      	strb	r3, [r7, #19]
		//		static size_t count = 0;
		//		sprintf(buff, "can recv %d\n", count);
		//		UdpDebug_print(buff);
		//		count++;

		BasicQueue_add(&g_queue, &data_frame);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80007a2:	f7ff ff68 	bl	8000676 <BasicQueue_add>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 80007a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80007ac:	f003 fac4 	bl	8003d38 <HAL_GPIO_TogglePin>
	}
}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000088 	.word	0x20000088
 80007bc:	40011000 	.word	0x40011000

080007c0 <CanToEth_init>:



void CanToEth_init(CAN_HandleTypeDef* can_handle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	BasicQueue_init(&g_queue, sizeof(struct CSIo_dataFrame_t), CAN_PACKET_BUFFER_COUNT, g_staticBuffer);
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <CanToEth_init+0x50>)
 80007ca:	2208      	movs	r2, #8
 80007cc:	2108      	movs	r1, #8
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <CanToEth_init+0x54>)
 80007d0:	f7ff ff1d 	bl	800060e <BasicQueue_init>

	g_can_handle = can_handle;
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <CanToEth_init+0x58>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
	if(HAL_CAN_ActivateNotification(g_can_handle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CanToEth_init+0x58>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2102      	movs	r1, #2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fd1a 	bl	800221a <HAL_CAN_ActivateNotification>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <CanToEth_init+0x32>
	{
		UdpDebug_error("can_to_eth can set interrupt failed\n");
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <CanToEth_init+0x5c>)
 80007ee:	f001 f8d5 	bl	800199c <UdpDebug_error>
	}

	g_send_pcb = udp_new();
 80007f2:	f006 fe78 	bl	80074e6 <udp_new>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <CanToEth_init+0x60>)
 80007fa:	6013      	str	r3, [r2, #0]
	IP4_ADDR(&g_send_addr, HOST_IP_ADDR1, HOST_IP_ADDR2, HOST_IP_ADDR3, HOST_IP_ADDR4);
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <CanToEth_init+0x64>)
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <CanToEth_init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
	g_sequence_counter = 0;
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <CanToEth_init+0x6c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000a0 	.word	0x200000a0
 8000814:	20000088 	.word	0x20000088
 8000818:	20000084 	.word	0x20000084
 800081c:	0800a7d4 	.word	0x0800a7d4
 8000820:	200000e0 	.word	0x200000e0
 8000824:	200000e4 	.word	0x200000e4
 8000828:	810416ac 	.word	0x810416ac
 800082c:	200000e8 	.word	0x200000e8

08000830 <CanToEth_Process>:

void CanToEth_Process(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
	size_t queue_count = BasicQueue_count(&g_queue);
 8000836:	482b      	ldr	r0, [pc, #172]	; (80008e4 <CanToEth_Process+0xb4>)
 8000838:	f7ff ff00 	bl	800063c <BasicQueue_count>
 800083c:	6178      	str	r0, [r7, #20]
	if(0 < queue_count)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d04a      	beq.n	80008da <CanToEth_Process+0xaa>
	{
		if(4 < queue_count)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	2b04      	cmp	r3, #4
 8000848:	d901      	bls.n	800084e <CanToEth_Process+0x1e>
		{
			queue_count = 4;
 800084a:	2304      	movs	r3, #4
 800084c:	617b      	str	r3, [r7, #20]
		}

		struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct CSIo_ethFrame_t), PBUF_RAM);
 800084e:	2200      	movs	r2, #0
 8000850:	2122      	movs	r1, #34	; 0x22
 8000852:	2000      	movs	r0, #0
 8000854:	f005 fcc8 	bl	80061e8 <pbuf_alloc>
 8000858:	60f8      	str	r0, [r7, #12]
		struct CSIo_ethFrame_t* eth_frame = (struct CSIo_ethFrame_t*)p->payload;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	60bb      	str	r3, [r7, #8]

		eth_frame->sequence = g_sequence_counter;
 8000860:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <CanToEth_Process+0xb8>)
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	701a      	strb	r2, [r3, #0]
		g_sequence_counter++;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <CanToEth_Process+0xb8>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <CanToEth_Process+0xb8>)
 8000872:	701a      	strb	r2, [r3, #0]
		eth_frame->data_count = queue_count;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	705a      	strb	r2, [r3, #1]

		for(size_t i = 0; i < queue_count; i++)
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	e00b      	b.n	800089a <CanToEth_Process+0x6a>
		{
			BasicQueue_get(&g_queue, &eth_frame->data_frame[i]);
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	4413      	add	r3, r2
 800088a:	3302      	adds	r3, #2
 800088c:	4619      	mov	r1, r3
 800088e:	4815      	ldr	r0, [pc, #84]	; (80008e4 <CanToEth_Process+0xb4>)
 8000890:	f7ff ff31 	bl	80006f6 <BasicQueue_get>
		for(size_t i = 0; i < queue_count; i++)
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	3301      	adds	r3, #1
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d3ef      	bcc.n	8000882 <CanToEth_Process+0x52>
		}

		  err_t err = udp_sendto(g_send_pcb, p, &g_send_addr, ETH_DATA_SEND_PORT);
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <CanToEth_Process+0xbc>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f644 6385 	movw	r3, #20101	; 0x4e85
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <CanToEth_Process+0xc0>)
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	f006 fc97 	bl	80071e0 <udp_sendto>
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]

		  if(err == ERR_OK)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d108      	bne.n	80008d0 <CanToEth_Process+0xa0>
		  {
			  pbuf_free(p);
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f006 f806 	bl	80068d0 <pbuf_free>
				HAL_GPIO_TogglePin(ETH_TX_LED_GPIO_Port, ETH_TX_LED_Pin);
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	480a      	ldr	r0, [pc, #40]	; (80008f4 <CanToEth_Process+0xc4>)
 80008ca:	f003 fa35 	bl	8003d38 <HAL_GPIO_TogglePin>
		  }else{
			  HAL_GPIO_TogglePin(ETH_ERROR_LED_GPIO_Port, ETH_ERROR_LED_Pin);
		  }
	}
}
 80008ce:	e004      	b.n	80008da <CanToEth_Process+0xaa>
			  HAL_GPIO_TogglePin(ETH_ERROR_LED_GPIO_Port, ETH_ERROR_LED_Pin);
 80008d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <CanToEth_Process+0xc4>)
 80008d6:	f003 fa2f 	bl	8003d38 <HAL_GPIO_TogglePin>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000088 	.word	0x20000088
 80008e8:	200000e8 	.word	0x200000e8
 80008ec:	200000e0 	.word	0x200000e0
 80008f0:	200000e4 	.word	0x200000e4
 80008f4:	40011000 	.word	0x40011000

080008f8 <BasicQueue_clear>:
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	obj->next_write = 0;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
	obj->next_read = 0;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
	obj->count = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
	memset(obj->ring_buffer, 0x00, obj->data_size * obj->max_count);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6958      	ldr	r0, [r3, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68d2      	ldr	r2, [r2, #12]
 800091e:	fb02 f303 	mul.w	r3, r2, r3
 8000922:	461a      	mov	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f009 f918 	bl	8009b5a <memset>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <BasicQueue_init>:
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	603b      	str	r3, [r7, #0]
	obj->data_size = data_size;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	611a      	str	r2, [r3, #16]
	obj->max_count = max_count;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	60da      	str	r2, [r3, #12]
	obj->ring_buffer = (uint8_t*)buffer;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	615a      	str	r2, [r3, #20]
	BasicQueue_clear(obj);
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f7ff ffd0 	bl	80008f8 <BasicQueue_clear>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <BasicQueue_count>:
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	return obj->count;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <BasicQueue_isFill>:
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	return obj->count == obj->max_count;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	429a      	cmp	r2, r3
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <BasicQueue_add>:
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
	if(BasicQueue_isFill(obj))
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ffe6 	bl	8000976 <BasicQueue_isFill>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d010      	beq.n	80009d2 <BasicQueue_add+0x38>
		obj->count--;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	609a      	str	r2, [r3, #8]
		obj->next_read = (obj->next_read + 1) % obj->max_count;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	3301      	adds	r3, #1
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	68d2      	ldr	r2, [r2, #12]
 80009c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	1a9a      	subs	r2, r3, r2
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	605a      	str	r2, [r3, #4]
	memcpy(&obj->ring_buffer[obj->next_write * obj->data_size], data, obj->data_size);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	6909      	ldr	r1, [r1, #16]
 80009de:	fb01 f303 	mul.w	r3, r1, r3
 80009e2:	18d0      	adds	r0, r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	461a      	mov	r2, r3
 80009ea:	6839      	ldr	r1, [r7, #0]
 80009ec:	f009 f92b 	bl	8009c46 <memcpy>
	obj->count++;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	609a      	str	r2, [r3, #8]
    obj->next_write = (obj->next_write + 1) % obj->max_count;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	68d2      	ldr	r2, [r2, #12]
 8000a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a08:	fb01 f202 	mul.w	r2, r1, r2
 8000a0c:	1a9a      	subs	r2, r3, r2
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	601a      	str	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <BasicQueue_get>:
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
	if(obj->count == 0)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d101      	bne.n	8000a30 <BasicQueue_get+0x16>
		return 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e020      	b.n	8000a72 <BasicQueue_get+0x58>
		memcpy(data, &obj->ring_buffer[obj->next_read * obj->data_size], obj->data_size);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	695a      	ldr	r2, [r3, #20]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	6909      	ldr	r1, [r1, #16]
 8000a3c:	fb01 f303 	mul.w	r3, r1, r3
 8000a40:	18d1      	adds	r1, r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	461a      	mov	r2, r3
 8000a48:	6838      	ldr	r0, [r7, #0]
 8000a4a:	f009 f8fc 	bl	8009c46 <memcpy>
		obj->count--;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
        obj->next_read = (obj->next_read + 1) % obj->max_count;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68d2      	ldr	r2, [r2, #12]
 8000a62:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a66:	fb01 f202 	mul.w	r2, r1, r2
 8000a6a:	1a9a      	subs	r2, r3, r2
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	605a      	str	r2, [r3, #4]
		return 1;
 8000a70:	2301      	movs	r3, #1
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <EthToCan_recvCallback>:
static uint8_t 	g_is_safety_start;
static uint32_t g_safety_time;


void EthToCan_recvCallback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	603b      	str	r3, [r7, #0]
	if(p->len == sizeof(struct CSIo_ethFrame_t))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	895b      	ldrh	r3, [r3, #10]
 8000a8e:	2b22      	cmp	r3, #34	; 0x22
 8000a90:	d143      	bne.n	8000b1a <EthToCan_recvCallback+0x9e>
	{
		struct CSIo_ethFrame_t* eth_frame = p->payload;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	613b      	str	r3, [r7, #16]

		uint8_t is_effective = 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	77fb      	strb	r3, [r7, #31]
		for(size_t i = 0; i < SEQUENCE_MAP_SIZE; i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
 8000aa0:	e00d      	b.n	8000abe <EthToCan_recvCallback+0x42>
		{
			if(g_sequence_map[i] == eth_frame->sequence)
 8000aa2:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <EthToCan_recvCallback+0xac>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d102      	bne.n	8000ab8 <EthToCan_recvCallback+0x3c>
			{
				is_effective = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	77fb      	strb	r3, [r7, #31]
				break;
 8000ab6:	e005      	b.n	8000ac4 <EthToCan_recvCallback+0x48>
		for(size_t i = 0; i < SEQUENCE_MAP_SIZE; i++)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	3301      	adds	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9ee      	bls.n	8000aa2 <EthToCan_recvCallback+0x26>
			}
		}

		if(is_effective)
 8000ac4:	7ffb      	ldrb	r3, [r7, #31]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d027      	beq.n	8000b1a <EthToCan_recvCallback+0x9e>
		{
			for(size_t i = 0; i < eth_frame->data_count; i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	e00b      	b.n	8000ae8 <EthToCan_recvCallback+0x6c>
			{
				BasicQueue_add(&g_queue, &eth_frame->data_frame[i]);
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	3302      	adds	r3, #2
 8000ada:	4619      	mov	r1, r3
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <EthToCan_recvCallback+0xb0>)
 8000ade:	f7ff ff5c 	bl	800099a <BasicQueue_add>
			for(size_t i = 0; i < eth_frame->data_count; i++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	461a      	mov	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d3ed      	bcc.n	8000ad0 <EthToCan_recvCallback+0x54>
			}

			g_sequence_map[g_next_map_index % SEQUENCE_MAP_SIZE] = eth_frame->sequence;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <EthToCan_recvCallback+0xb4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	7811      	ldrb	r1, [r2, #0]
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <EthToCan_recvCallback+0xac>)
 8000b02:	54d1      	strb	r1, [r2, r3]
			g_next_map_index++;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <EthToCan_recvCallback+0xb4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <EthToCan_recvCallback+0xb4>)
 8000b0e:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(ETH_RX_LED_GPIO_Port, ETH_RX_LED_Pin);
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <EthToCan_recvCallback+0xb8>)
 8000b16:	f003 f90f 	bl	8003d38 <HAL_GPIO_TogglePin>
		}
	}
	pbuf_free(p);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f005 fed8 	bl	80068d0 <pbuf_free>
}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000150 	.word	0x20000150
 8000b2c:	200000f0 	.word	0x200000f0
 8000b30:	2000014c 	.word	0x2000014c
 8000b34:	40011000 	.word	0x40011000

08000b38 <EthToCan_init>:


void EthToCan_init(CAN_HandleTypeDef* can_handle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	BasicQueue_init(&g_queue, sizeof(struct CSIo_dataFrame_t), CAN_PACKET_BUFFER_COUNT, g_staticBuffer);
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <EthToCan_init+0x74>)
 8000b42:	2208      	movs	r2, #8
 8000b44:	2108      	movs	r1, #8
 8000b46:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <EthToCan_init+0x78>)
 8000b48:	f7ff fef3 	bl	8000932 <BasicQueue_init>

	g_can_handle = can_handle;
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <EthToCan_init+0x7c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]

	g_recv_pcb = udp_new();
 8000b52:	f006 fcc8 	bl	80074e6 <udp_new>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <EthToCan_init+0x80>)
 8000b5a:	6013      	str	r3, [r2, #0]
	if(udp_bind(g_recv_pcb, IP_ADDR_ANY, ETH_DATA_RECV_PORT) != ERR_OK)
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <EthToCan_init+0x80>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f644 6284 	movw	r2, #20100	; 0x4e84
 8000b64:	4915      	ldr	r1, [pc, #84]	; (8000bbc <EthToCan_init+0x84>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f006 fc3c 	bl	80073e4 <udp_bind>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <EthToCan_init+0x40>
	{
		UdpDebug_error("recv bind failed.");
 8000b72:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <EthToCan_init+0x88>)
 8000b74:	f000 ff12 	bl	800199c <UdpDebug_error>
	}
	udp_recv(g_recv_pcb, EthToCan_recvCallback, NULL);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <EthToCan_init+0x80>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4911      	ldr	r1, [pc, #68]	; (8000bc4 <EthToCan_init+0x8c>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f006 fc9f 	bl	80074c4 <udp_recv>

	g_next_map_index = 0;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <EthToCan_init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
	memset(g_sequence_map, UINT8_MAX, sizeof(uint8_t) * SEQUENCE_MAP_SIZE);
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	21ff      	movs	r1, #255	; 0xff
 8000b90:	480e      	ldr	r0, [pc, #56]	; (8000bcc <EthToCan_init+0x94>)
 8000b92:	f008 ffe2 	bl	8009b5a <memset>

	g_is_safety_start = 0;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <EthToCan_init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
	g_safety_time = 0;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <EthToCan_init+0x9c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000108 	.word	0x20000108
 8000bb0:	200000f0 	.word	0x200000f0
 8000bb4:	200000ec 	.word	0x200000ec
 8000bb8:	20000148 	.word	0x20000148
 8000bbc:	0800b958 	.word	0x0800b958
 8000bc0:	0800a7fc 	.word	0x0800a7fc
 8000bc4:	08000a7d 	.word	0x08000a7d
 8000bc8:	2000014c 	.word	0x2000014c
 8000bcc:	20000150 	.word	0x20000150
 8000bd0:	20000154 	.word	0x20000154
 8000bd4:	20000158 	.word	0x20000158

08000bd8 <EthToCan_Process>:


void EthToCan_Process(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
	if(0 < BasicQueue_count(&g_queue))
 8000bde:	4842      	ldr	r0, [pc, #264]	; (8000ce8 <EthToCan_Process+0x110>)
 8000be0:	f7ff febe 	bl	8000960 <BasicQueue_count>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d073      	beq.n	8000cd2 <EthToCan_Process+0xfa>
	{
		if(0 < HAL_CAN_GetTxMailboxesFreeLevel(g_can_handle))
 8000bea:	4b40      	ldr	r3, [pc, #256]	; (8000cec <EthToCan_Process+0x114>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 f9be 	bl	8001f70 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d068      	beq.n	8000ccc <EthToCan_Process+0xf4>
		{
			struct CSIo_dataFrame_t recv_data;
			BasicQueue_get(&g_queue, &recv_data);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4839      	ldr	r0, [pc, #228]	; (8000ce8 <EthToCan_Process+0x110>)
 8000c02:	f7ff ff0a 	bl	8000a1a <BasicQueue_get>
			CAN_TxHeaderTypeDef TxHeader;
			uint32_t TxMailbox;
			uint8_t TxData[8];

			TxHeader.StdId = recv_data.id; 		// CAN ID
 8000c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c08:	60fb      	str	r3, [r7, #12]
			TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
			TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
			TxHeader.DLC = recv_data.len + 1;
 8000c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c16:	3301      	adds	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
			TxHeader.TransmitGlobalTime = DISABLE;  // ???
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 3020 	strb.w	r3, [r7, #32]
			TxData[0] = recv_data.reg;
 8000c20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c24:	703b      	strb	r3, [r7, #0]
			TxData[1] = recv_data.data[0];
 8000c26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c2a:	707b      	strb	r3, [r7, #1]
			TxData[2] = recv_data.data[1];
 8000c2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000c30:	70bb      	strb	r3, [r7, #2]
			TxData[3] = recv_data.data[2];
 8000c32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000c36:	70fb      	strb	r3, [r7, #3]
			TxData[4] = recv_data.data[3];
 8000c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c3c:	713b      	strb	r3, [r7, #4]

			HAL_StatusTypeDef result = HAL_CAN_AddTxMessage(g_can_handle, &TxHeader, TxData, &TxMailbox);
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <EthToCan_Process+0x114>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	463a      	mov	r2, r7
 8000c48:	f107 010c 	add.w	r1, r7, #12
 8000c4c:	f001 f8c1 	bl	8001dd2 <HAL_CAN_AddTxMessage>
 8000c50:	4603      	mov	r3, r0
 8000c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			if(recv_data.id == CSTYPE_BROADCAST_ADDR)
 8000c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d129      	bne.n	8000cb0 <EthToCan_Process+0xd8>
			{
				switch(recv_data.reg)
 8000c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <EthToCan_Process+0x92>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d00b      	beq.n	8000c80 <EthToCan_Process+0xa8>
							g_safety_time = 0;
						}
					}
					break;
				default:
					break;
 8000c68:	e022      	b.n	8000cb0 <EthToCan_Process+0xd8>
					g_is_safety_start = 1;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <EthToCan_Process+0x118>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
					g_safety_time = HAL_GetTick() + CSTYPE_SAFETY_TIMEOUT;
 8000c70:	f000 ff42 	bl	8001af8 <HAL_GetTick>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <EthToCan_Process+0x11c>)
 8000c7c:	6013      	str	r3, [r2, #0]
					break;
 8000c7e:	e017      	b.n	8000cb0 <EthToCan_Process+0xd8>
					if(recv_data.len == 4)
 8000c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d112      	bne.n	8000cae <EthToCan_Process+0xd6>
						if(recv_data.data[0] == 'U' && recv_data.data[1] == 'N' && recv_data.data[2] == 'S' && recv_data.data[3] == 'A')
 8000c88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c8c:	2b55      	cmp	r3, #85	; 0x55
 8000c8e:	d10e      	bne.n	8000cae <EthToCan_Process+0xd6>
 8000c90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000c94:	2b4e      	cmp	r3, #78	; 0x4e
 8000c96:	d10a      	bne.n	8000cae <EthToCan_Process+0xd6>
 8000c98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000c9c:	2b53      	cmp	r3, #83	; 0x53
 8000c9e:	d106      	bne.n	8000cae <EthToCan_Process+0xd6>
 8000ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ca4:	2b41      	cmp	r3, #65	; 0x41
 8000ca6:	d102      	bne.n	8000cae <EthToCan_Process+0xd6>
							g_safety_time = 0;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <EthToCan_Process+0x11c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
					break;
 8000cae:	bf00      	nop
				}
			}

			if(result == HAL_OK)
 8000cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d105      	bne.n	8000cc4 <EthToCan_Process+0xec>
			{
				HAL_GPIO_TogglePin(CAN_TX_LED_GPIO_Port, CAN_TX_LED_Pin);
 8000cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbc:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <EthToCan_Process+0x120>)
 8000cbe:	f003 f83b 	bl	8003d38 <HAL_GPIO_TogglePin>
 8000cc2:	e006      	b.n	8000cd2 <EthToCan_Process+0xfa>
			}else{
//				HAL_GPIO_TogglePin(CAN_ERROR_LED_GPIO_Port, CAN_ERROR_LED_Pin);
				UdpDebug_error("can send failed");
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <EthToCan_Process+0x124>)
 8000cc6:	f000 fe69 	bl	800199c <UdpDebug_error>
 8000cca:	e002      	b.n	8000cd2 <EthToCan_Process+0xfa>
			}
		}else{
//			HAL_GPIO_TogglePin(CAN_ERROR_LED_GPIO_Port, CAN_ERROR_LED_Pin);
			UdpDebug_error("Send queue overflowed");
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <EthToCan_Process+0x128>)
 8000cce:	f000 fe65 	bl	800199c <UdpDebug_error>
		}
	}

	if(g_is_safety_start == 1 && g_safety_time < HAL_GetTick())
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <EthToCan_Process+0x118>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d101      	bne.n	8000cde <EthToCan_Process+0x106>
 8000cda:	f000 ff0d 	bl	8001af8 <HAL_GetTick>
	{
//		HAL_GPIO_WritePin(SAFETY_PIN_GPIO_Port, SAFETY_PIN_Pin, GPIO_PIN_RESET);
	}else{
//		HAL_GPIO_WritePin(SAFETY_PIN_GPIO_Port, SAFETY_PIN_Pin, GPIO_PIN_SET);
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	; 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000f0 	.word	0x200000f0
 8000cec:	200000ec 	.word	0x200000ec
 8000cf0:	20000154 	.word	0x20000154
 8000cf4:	20000158 	.word	0x20000158
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	0800a810 	.word	0x0800a810
 8000d00:	0800a820 	.word	0x0800a820

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0a:	f000 fecd 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 f86f 	bl	8000df0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 8000d12:	2064      	movs	r0, #100	; 0x64
 8000d14:	f000 fefa 	bl	8001b0c <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 f960 	bl	8000fdc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d1c:	f000 f8bc 	bl	8000e98 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d20:	f000 f8f0 	bl	8000f04 <MX_CAN2_Init>
  MX_TIM7_Init();
 8000d24:	f000 f924 	bl	8000f70 <MX_TIM7_Init>
  MX_LWIP_Init();
 8000d28:	f004 f868 	bl	8004dfc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan1);
 8000d2c:	482d      	ldr	r0, [pc, #180]	; (8000de4 <main+0xe0>)
 8000d2e:	f001 f80c 	bl	8001d4a <HAL_CAN_Start>
	HAL_CAN_Start(&hcan2);
 8000d32:	482d      	ldr	r0, [pc, #180]	; (8000de8 <main+0xe4>)
 8000d34:	f001 f809 	bl	8001d4a <HAL_CAN_Start>
	UdpDebug_initializer();
 8000d38:	f000 fdec 	bl	8001914 <UdpDebug_initializer>
	EthToCan_init(&hcan1);
 8000d3c:	4829      	ldr	r0, [pc, #164]	; (8000de4 <main+0xe0>)
 8000d3e:	f7ff fefb 	bl	8000b38 <EthToCan_init>
	CanToEth_init(&hcan1);
 8000d42:	4828      	ldr	r0, [pc, #160]	; (8000de4 <main+0xe0>)
 8000d44:	f7ff fd3c 	bl	80007c0 <CanToEth_init>
	UdpPing_init();
 8000d48:	f000 fe36 	bl	80019b8 <UdpPing_init>
//	RobomasMotor_init(&hcan2, &htim7);

  HAL_GPIO_WritePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d52:	4826      	ldr	r0, [pc, #152]	; (8000dec <main+0xe8>)
 8000d54:	f002 ffd8 	bl	8003d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_TX_LED_GPIO_Port, CAN_TX_LED_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5e:	4823      	ldr	r0, [pc, #140]	; (8000dec <main+0xe8>)
 8000d60:	f002 ffd2 	bl	8003d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_RX_LED_GPIO_Port, ETH_RX_LED_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6a:	4820      	ldr	r0, [pc, #128]	; (8000dec <main+0xe8>)
 8000d6c:	f002 ffcc 	bl	8003d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_TX_LED_GPIO_Port, ETH_TX_LED_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	481d      	ldr	r0, [pc, #116]	; (8000dec <main+0xe8>)
 8000d78:	f002 ffc6 	bl	8003d08 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t next_led_downtim = HAL_GetTick() + 500;
 8000d7c:	f000 febc 	bl	8001af8 <HAL_GetTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d86:	607b      	str	r3, [r7, #4]

  while (1)
  {
	    MX_LWIP_Process();
 8000d88:	f004 f95e 	bl	8005048 <MX_LWIP_Process>

	    EthToCan_Process();
 8000d8c:	f7ff ff24 	bl	8000bd8 <EthToCan_Process>
	    CanToEth_Process();
 8000d90:	f7ff fd4e 	bl	8000830 <CanToEth_Process>
	    UdpPing_Process();
 8000d94:	f000 fe2c 	bl	80019f0 <UdpPing_Process>
//	    RobomasMotor_Process();

	    if(next_led_downtim < HAL_GetTick())
 8000d98:	f000 feae 	bl	8001af8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d2f1      	bcs.n	8000d88 <main+0x84>
	    {
	      HAL_GPIO_WritePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000daa:	4810      	ldr	r0, [pc, #64]	; (8000dec <main+0xe8>)
 8000dac:	f002 ffac 	bl	8003d08 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(CAN_TX_LED_GPIO_Port, CAN_TX_LED_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <main+0xe8>)
 8000db8:	f002 ffa6 	bl	8003d08 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(ETH_RX_LED_GPIO_Port, ETH_RX_LED_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <main+0xe8>)
 8000dc4:	f002 ffa0 	bl	8003d08 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(ETH_TX_LED_GPIO_Port, ETH_TX_LED_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <main+0xe8>)
 8000dd0:	f002 ff9a 	bl	8003d08 <HAL_GPIO_WritePin>
	      next_led_downtim = HAL_GetTick() + 500;
 8000dd4:	f000 fe90 	bl	8001af8 <HAL_GetTick>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000dde:	607b      	str	r3, [r7, #4]
	    MX_LWIP_Process();
 8000de0:	e7d2      	b.n	8000d88 <main+0x84>
 8000de2:	bf00      	nop
 8000de4:	2000015c 	.word	0x2000015c
 8000de8:	20000184 	.word	0x20000184
 8000dec:	40011000 	.word	0x40011000

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	2238      	movs	r2, #56	; 0x38
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f008 feab 	bl	8009b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 ff93 	bl	8003d6c <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000e4c:	f000 f94e 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2302      	movs	r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fa94 	bl	8004398 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e76:	f000 f939 	bl	80010ec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000e80:	2000      	movs	r0, #0
 8000e82:	f003 fb73 	bl	800456c <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <SystemClock_Config+0xa4>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	3750      	adds	r7, #80	; 0x50
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	42420070 	.word	0x42420070

08000e98 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_CAN1_Init+0x64>)
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <MX_CAN1_Init+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eb6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000eba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ebe:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000ec2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eea:	f000 fe33 	bl	8001b54 <HAL_CAN_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ef4:	f000 f8fa 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000015c 	.word	0x2000015c
 8000f00:	40006400 	.word	0x40006400

08000f04 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_CAN2_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f10:	2202      	movs	r2, #2
 8000f12:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f22:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f26:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f2a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000f2e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f56:	f000 fdfd 	bl	8001b54 <HAL_CAN_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f60:	f000 f8c4 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000184 	.word	0x20000184
 8000f6c:	40006800 	.word	0x40006800

08000f70 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_TIM7_Init+0x64>)
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <MX_TIM7_Init+0x68>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 50000-1;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_TIM7_Init+0x64>)
 8000f86:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000f8a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_TIM7_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5-1;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_TIM7_Init+0x64>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_TIM7_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_TIM7_Init+0x64>)
 8000fa0:	f003 fc7e 	bl	80048a0 <HAL_TIM_Base_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000faa:	f000 f89f 	bl	80010ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_TIM7_Init+0x64>)
 8000fbc:	f003 fea6 	bl	8004d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000fc6:	f000 f891 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001ac 	.word	0x200001ac
 8000fd8:	40001400 	.word	0x40001400

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff0:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a30      	ldr	r2, [pc, #192]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <MX_GPIO_Init+0xdc>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a2a      	ldr	r2, [pc, #168]	; (80010b8 <MX_GPIO_Init+0xdc>)
 800100e:	f043 0320 	orr.w	r3, r3, #32
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0320 	and.w	r3, r3, #32
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <MX_GPIO_Init+0xdc>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_GPIO_Init+0xdc>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <MX_GPIO_Init+0xdc>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ETH_TX_LED_Pin|ETH_RX_LED_Pin|ETH_ERROR_LED_Pin|ETH_ID_Pin
 8001050:	2200      	movs	r2, #0
 8001052:	f24f 3180 	movw	r1, #62336	; 0xf380
 8001056:	4819      	ldr	r0, [pc, #100]	; (80010bc <MX_GPIO_Init+0xe0>)
 8001058:	f002 fe56 	bl	8003d08 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin|SAFETY_PIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ETH_TX_LED_Pin ETH_RX_LED_Pin ETH_ERROR_LED_Pin ETH_ID_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin SAFETY_PIN_Pin */
  GPIO_InitStruct.Pin = ETH_TX_LED_Pin|ETH_RX_LED_Pin|ETH_ERROR_LED_Pin|ETH_ID_Pin
 800105c:	f24f 3380 	movw	r3, #62336	; 0xf380
 8001060:	613b      	str	r3, [r7, #16]
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin|SAFETY_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2302      	movs	r3, #2
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4619      	mov	r1, r3
 8001074:	4811      	ldr	r0, [pc, #68]	; (80010bc <MX_GPIO_Init+0xe0>)
 8001076:	f002 fcc3 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : IP_SELECTOR0_Pin IP_SELECTOR1_Pin */
  GPIO_InitStruct.Pin = IP_SELECTOR0_Pin|IP_SELECTOR1_Pin;
 800107a:	f240 4302 	movw	r3, #1026	; 0x402
 800107e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <MX_GPIO_Init+0xe4>)
 8001090:	f002 fcb6 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_GPIO_Init+0xe8>)
 80010aa:	f002 fca9 	bl	8003a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40011000 	.word	0x40011000
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	40010800 	.word	0x40010800

080010c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010da:	f000 fcfb 	bl	8001ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40001000 	.word	0x40001000

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
/*
	ロボますモータからの受信（コールバック関数）
	割り込み関数なので，ここまで行数が長いのは良くない．要改良
*/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010fc:	b096      	sub	sp, #88	; 0x58
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6278      	str	r0, [r7, #36]	; 0x24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK)
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800110a:	2101      	movs	r1, #1
 800110c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800110e:	f000 ff63 	bl	8001fd8 <HAL_CAN_GetRxMessage>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	f040 8121 	bne.w	800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x264>
	{
		uint16_t ang;

		uint16_t can_id = (uint16_t)RxHeader.StdId;
 800111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint8_t mot_id = (can_id & 0x00F); // 受信したIDから，ロボますモータのIDを求める．
 8001120:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		if((can_id & 0xFF0) == 0x200 &&  1 <= mot_id && mot_id <= 8)
 800112e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001132:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113a:	f040 810f 	bne.w	800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x264>
 800113e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 810a 	beq.w	800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x264>
 8001148:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800114c:	2b08      	cmp	r3, #8
 800114e:	f200 8105 	bhi.w	800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x264>
		{
			mot_id = mot_id - 1; // ロボますモータIDの正規化
 8001152:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001156:	3b01      	subs	r3, #1
 8001158:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

			g_sens_data[mot_id].status = 1; // ロボマスモータが繋がっているかどうかの識別用のフラグ...よく覚えてない
 800115c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001160:	4981      	ldr	r1, [pc, #516]	; (8001368 <HAL_CAN_RxFifo1MsgPendingCallback+0x270>)
 8001162:	4613      	mov	r3, r2
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	440b      	add	r3, r1
 800116a:	f103 020e 	add.w	r2, r3, #14
 800116e:	2301      	movs	r3, #1
 8001170:	7013      	strb	r3, [r2, #0]

			ang = ((int16_t)RxData[0] << 8) | RxData[1];
 8001172:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			g_sens_data[mot_id].rpm = (((int16_t)RxData[2] << 8) | RxData[3]) * g_direction[mot_id];
 8001188:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800118c:	021a      	lsls	r2, r3, #8
 800118e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001192:	4313      	orrs	r3, r2
 8001194:	b299      	uxth	r1, r3
 8001196:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800119a:	4b74      	ldr	r3, [pc, #464]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x274>)
 800119c:	569b      	ldrsb	r3, [r3, r2]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80011aa:	b218      	sxth	r0, r3
 80011ac:	496e      	ldr	r1, [pc, #440]	; (8001368 <HAL_CAN_RxFifo1MsgPendingCallback+0x270>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	18ca      	adds	r2, r1, r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	8013      	strh	r3, [r2, #0]
			g_sens_data[mot_id].cur = (((int16_t)RxData[4] << 8) | RxData[5]) * g_direction[mot_id];
 80011ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011be:	021a      	lsls	r2, r3, #8
 80011c0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b299      	uxth	r1, r3
 80011c8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80011cc:	4b67      	ldr	r3, [pc, #412]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x274>)
 80011ce:	569b      	ldrsb	r3, [r3, r2]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	fb01 f303 	mul.w	r3, r1, r3
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80011dc:	b218      	sxth	r0, r3
 80011de:	4962      	ldr	r1, [pc, #392]	; (8001368 <HAL_CAN_RxFifo1MsgPendingCallback+0x270>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	1c9a      	adds	r2, r3, #2
 80011ea:	4603      	mov	r3, r0
 80011ec:	8013      	strh	r3, [r2, #0]

			// ロボますから得られる角度は，シリが一回転すると振り切れちゃうので，振り切れを検知して計測する
			if(g_ang_befo[mot_id] < ang)
 80011ee:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x278>)
 80011f4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80011f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d915      	bls.n	800122c <HAL_CAN_RxFifo1MsgPendingCallback+0x134>
			{
				if(ang - g_ang_befo[mot_id] < 5191)
 8001200:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8001204:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x278>)
 800120a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800120e:	1aca      	subs	r2, r1, r3
 8001210:	f241 4346 	movw	r3, #5190	; 0x1446
 8001214:	429a      	cmp	r2, r3
 8001216:	dd1f      	ble.n	8001258 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>
				{
				}else{
					g_rota_count[mot_id]--;
 8001218:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 800121c:	4b55      	ldr	r3, [pc, #340]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x27c>)
 800121e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x27c>)
 8001226:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800122a:	e015      	b.n	8001258 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>
				}
			}else{
				if(g_ang_befo[mot_id] - ang < 5191)
 800122c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001230:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x278>)
 8001232:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001236:	461a      	mov	r2, r3
 8001238:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800123c:	1ad2      	subs	r2, r2, r3
 800123e:	f241 4346 	movw	r3, #5190	; 0x1446
 8001242:	429a      	cmp	r2, r3
 8001244:	dd08      	ble.n	8001258 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>
				{
				}else{
					g_rota_count[mot_id]++;
 8001246:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 800124a:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x27c>)
 800124c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	4b48      	ldr	r3, [pc, #288]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x27c>)
 8001254:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				}
			}
		  g_sens_data[mot_id].rota = ((g_rota_count[mot_id] * 1000) + (((int64_t)ang * 1000) / 8191)) * g_direction[mot_id];
 8001258:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800125c:	4b45      	ldr	r3, [pc, #276]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x27c>)
 800125e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	17da      	asrs	r2, r3, #31
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	617a      	str	r2, [r7, #20]
 8001270:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001274:	2200      	movs	r2, #0
 8001276:	4698      	mov	r8, r3
 8001278:	4691      	mov	r9, r2
 800127a:	4642      	mov	r2, r8
 800127c:	464b      	mov	r3, r9
 800127e:	f04f 0000 	mov.w	r0, #0
 8001282:	f04f 0100 	mov.w	r1, #0
 8001286:	0159      	lsls	r1, r3, #5
 8001288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800128c:	0150      	lsls	r0, r2, #5
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	ebb2 0408 	subs.w	r4, r2, r8
 8001296:	eb63 0509 	sbc.w	r5, r3, r9
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	00ab      	lsls	r3, r5, #2
 80012a4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80012a8:	00a2      	lsls	r2, r4, #2
 80012aa:	4614      	mov	r4, r2
 80012ac:	461d      	mov	r5, r3
 80012ae:	eb14 0a08 	adds.w	sl, r4, r8
 80012b2:	eb45 0b09 	adc.w	fp, r5, r9
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80012c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80012c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80012ca:	4692      	mov	sl, r2
 80012cc:	469b      	mov	fp, r3
 80012ce:	4650      	mov	r0, sl
 80012d0:	4659      	mov	r1, fp
 80012d2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	f7fe ffab 	bl	8000234 <__aeabi_ldivmod>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80012e6:	4621      	mov	r1, r4
 80012e8:	1889      	adds	r1, r1, r2
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	4629      	mov	r1, r5
 80012ee:	eb43 0101 	adc.w	r1, r3, r1
 80012f2:	60f9      	str	r1, [r7, #12]
 80012f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x274>)
 80012fa:	56d3      	ldrsb	r3, [r2, r3]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	17da      	asrs	r2, r3, #31
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001308:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800130c:	4629      	mov	r1, r5
 800130e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001312:	4640      	mov	r0, r8
 8001314:	fb00 f101 	mul.w	r1, r0, r1
 8001318:	4648      	mov	r0, r9
 800131a:	4623      	mov	r3, r4
 800131c:	fb03 f300 	mul.w	r3, r3, r0
 8001320:	440b      	add	r3, r1
 8001322:	4621      	mov	r1, r4
 8001324:	4640      	mov	r0, r8
 8001326:	fba1 1000 	umull	r1, r0, r1, r0
 800132a:	61f8      	str	r0, [r7, #28]
 800132c:	61b9      	str	r1, [r7, #24]
 800132e:	69f9      	ldr	r1, [r7, #28]
 8001330:	440b      	add	r3, r1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <HAL_CAN_RxFifo1MsgPendingCallback+0x270>)
 8001336:	4613      	mov	r3, r2
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	440b      	add	r3, r1
 800133e:	3310      	adds	r3, #16
 8001340:	3b0a      	subs	r3, #10
 8001342:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001346:	4602      	mov	r2, r0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	460a      	mov	r2, r1
 800134c:	605a      	str	r2, [r3, #4]
		  g_ang_befo[mot_id] = ang;
 800134e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001352:	4907      	ldr	r1, [pc, #28]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x278>)
 8001354:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001358:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		}
	}
}
 800135c:	bf00      	nop
 800135e:	3758      	adds	r7, #88	; 0x58
 8001360:	46bd      	mov	sp, r7
 8001362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001366:	bf00      	nop
 8001368:	200001f4 	.word	0x200001f4
 800136c:	2000029c 	.word	0x2000029c
 8001370:	2000026c 	.word	0x2000026c
 8001374:	2000027c 	.word	0x2000027c

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_MspInit+0x5c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_MspInit+0x5c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_MspInit+0x60>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_MspInit+0x60>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000

080013dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a66      	ldr	r2, [pc, #408]	; (8001590 <HAL_CAN_MspInit+0x1b4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d15d      	bne.n	80014b8 <HAL_CAN_MspInit+0xdc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013fc:	4b65      	ldr	r3, [pc, #404]	; (8001594 <HAL_CAN_MspInit+0x1b8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a64      	ldr	r2, [pc, #400]	; (8001594 <HAL_CAN_MspInit+0x1b8>)
 8001404:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001406:	4b63      	ldr	r3, [pc, #396]	; (8001594 <HAL_CAN_MspInit+0x1b8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10b      	bne.n	8001426 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800140e:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a61      	ldr	r2, [pc, #388]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 8001414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a5b      	ldr	r2, [pc, #364]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b59      	ldr	r3, [pc, #356]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4619      	mov	r1, r3
 8001452:	4852      	ldr	r0, [pc, #328]	; (800159c <HAL_CAN_MspInit+0x1c0>)
 8001454:	f002 fad4 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	4619      	mov	r1, r3
 800146c:	484b      	ldr	r0, [pc, #300]	; (800159c <HAL_CAN_MspInit+0x1c0>)
 800146e:	f002 fac7 	bl	8003a00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_CAN_MspInit+0x1c4>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
 8001478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
 8001480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001482:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
 8001488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
 8001490:	4a43      	ldr	r2, [pc, #268]	; (80015a0 <HAL_CAN_MspInit+0x1c4>)
 8001492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001494:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2014      	movs	r0, #20
 800149c:	f001 f9b1 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014a0:	2014      	movs	r0, #20
 80014a2:	f001 f9ca 	bl	800283a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2015      	movs	r0, #21
 80014ac:	f001 f9a9 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014b0:	2015      	movs	r0, #21
 80014b2:	f001 f9c2 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80014b6:	e067      	b.n	8001588 <HAL_CAN_MspInit+0x1ac>
  else if(hcan->Instance==CAN2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a39      	ldr	r2, [pc, #228]	; (80015a4 <HAL_CAN_MspInit+0x1c8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d162      	bne.n	8001588 <HAL_CAN_MspInit+0x1ac>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80014c2:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a34      	ldr	r2, [pc, #208]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 80014c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <HAL_CAN_MspInit+0x1b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <HAL_CAN_MspInit+0x1b8>)
 80014e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_CAN_MspInit+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10b      	bne.n	8001504 <HAL_CAN_MspInit+0x128>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 80014f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f6:	61d3      	str	r3, [r2, #28]
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a23      	ldr	r2, [pc, #140]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_CAN_MspInit+0x1bc>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800151c:	2320      	movs	r3, #32
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4619      	mov	r1, r3
 800152e:	481b      	ldr	r0, [pc, #108]	; (800159c <HAL_CAN_MspInit+0x1c0>)
 8001530:	f002 fa66 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001534:	2340      	movs	r3, #64	; 0x40
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	4619      	mov	r1, r3
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <HAL_CAN_MspInit+0x1c0>)
 8001548:	f002 fa5a 	bl	8003a00 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_CAN_MspInit+0x1c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001554:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
 8001562:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <HAL_CAN_MspInit+0x1c4>)
 8001564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001566:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2040      	movs	r0, #64	; 0x40
 800156e:	f001 f948 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001572:	2040      	movs	r0, #64	; 0x40
 8001574:	f001 f961 	bl	800283a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2041      	movs	r0, #65	; 0x41
 800157e:	f001 f940 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001582:	2041      	movs	r0, #65	; 0x41
 8001584:	f001 f959 	bl	800283a <HAL_NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3738      	adds	r7, #56	; 0x38
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40006400 	.word	0x40006400
 8001594:	200002a4 	.word	0x200002a4
 8001598:	40021000 	.word	0x40021000
 800159c:	40010c00 	.word	0x40010c00
 80015a0:	40010000 	.word	0x40010000
 80015a4:	40006800 	.word	0x40006800

080015a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_TIM_Base_MspInit+0x44>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d113      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_TIM_Base_MspInit+0x48>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_TIM_Base_MspInit+0x48>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x48>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2037      	movs	r0, #55	; 0x37
 80015d8:	f001 f913 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015dc:	2037      	movs	r0, #55	; 0x37
 80015de:	f001 f92c 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40001400 	.word	0x40001400
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800160a:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_InitTick+0xe8>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a33      	ldr	r2, [pc, #204]	; (80016dc <HAL_InitTick+0xe8>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_InitTick+0xe8>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001622:	f107 0210 	add.w	r2, r7, #16
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f003 f8e9 	bl	8004804 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	2b00      	cmp	r3, #0
 800163a:	d103      	bne.n	8001644 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800163c:	f003 f8ce 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
 8001640:	6378      	str	r0, [r7, #52]	; 0x34
 8001642:	e004      	b.n	800164e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001644:	f003 f8ca 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
 8001648:	4603      	mov	r3, r0
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800164e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <HAL_InitTick+0xec>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	3b01      	subs	r3, #1
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_InitTick+0xf0>)
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <HAL_InitTick+0xf4>)
 8001660:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_InitTick+0xf0>)
 8001664:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001668:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_InitTick+0xf0>)
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <HAL_InitTick+0xf0>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_InitTick+0xf0>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_InitTick+0xf0>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001682:	4818      	ldr	r0, [pc, #96]	; (80016e4 <HAL_InitTick+0xf0>)
 8001684:	f003 f90c 	bl	80048a0 <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800168e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001692:	2b00      	cmp	r3, #0
 8001694:	d11b      	bne.n	80016ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001696:	4813      	ldr	r0, [pc, #76]	; (80016e4 <HAL_InitTick+0xf0>)
 8001698:	f003 f952 	bl	8004940 <HAL_TIM_Base_Start_IT>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d111      	bne.n	80016ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80016aa:	2036      	movs	r0, #54	; 0x36
 80016ac:	f001 f8c5 	bl	800283a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d808      	bhi.n	80016c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80016b6:	2200      	movs	r2, #0
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	2036      	movs	r0, #54	; 0x36
 80016bc:	f001 f8a1 	bl	8002802 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_InitTick+0xf8>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e002      	b.n	80016ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3738      	adds	r7, #56	; 0x38
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	200002a8 	.word	0x200002a8
 80016e8:	40001000 	.word	0x40001000
 80016ec:	20000004 	.word	0x20000004

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <CAN1_RX0_IRQHandler+0x10>)
 8001746:	f000 fd8d 	bl	8002264 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000015c 	.word	0x2000015c

08001754 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <CAN1_RX1_IRQHandler+0x10>)
 800175a:	f000 fd83 	bl	8002264 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000015c 	.word	0x2000015c

08001768 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM6_IRQHandler+0x10>)
 800176e:	f003 f941 	bl	80049f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200002a8 	.word	0x200002a8

0800177c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM7_IRQHandler+0x10>)
 8001782:	f003 f937 	bl	80049f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200001ac 	.word	0x200001ac

08001790 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <CAN2_RX0_IRQHandler+0x10>)
 8001796:	f000 fd65 	bl	8002264 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000184 	.word	0x20000184

080017a4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <CAN2_RX1_IRQHandler+0x10>)
 80017aa:	f000 fd5b 	bl	8002264 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000184 	.word	0x20000184

080017b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e00a      	b.n	80017e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ca:	f3af 8000 	nop.w
 80017ce:	4601      	mov	r1, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf0      	blt.n	80017ca <_read+0x12>
  }

  return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e009      	b.n	8001818 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf1      	blt.n	8001804 <_write+0x12>
  }
  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_close>:

int _close(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001850:	605a      	str	r2, [r3, #4]
  return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <_isatty>:

int _isatty(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
	...

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d205      	bcs.n	80018c8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <_sbrk+0x6c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c6:	e009      	b.n	80018dc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20010000 	.word	0x20010000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	200002f0 	.word	0x200002f0
 80018f4:	20007e88 	.word	0x20007e88
 80018f8:	20007e74 	.word	0x20007e74

080018fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <UdpDebug_errorLedOn>:

static struct UdpDebug_t g_root;


static void UdpDebug_errorLedOn(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(CAN_ERROR_LED_GPIO_Port, CAN_ERROR_LED_Pin);
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <UdpDebug_initializer>:


void UdpDebug_initializer(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	IP4_ADDR(&g_root.send_addr, HOST_IP_ADDR1, HOST_IP_ADDR2, HOST_IP_ADDR3, HOST_IP_ADDR4);
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <UdpDebug_initializer+0x24>)
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <UdpDebug_initializer+0x28>)
 800191c:	605a      	str	r2, [r3, #4]
	g_root.send_port = ETH_ERROR_SEND_PORT;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <UdpDebug_initializer+0x24>)
 8001920:	f644 628f 	movw	r2, #20111	; 0x4e8f
 8001924:	811a      	strh	r2, [r3, #8]

	g_root.pcb = udp_new();
 8001926:	f005 fdde 	bl	80074e6 <udp_new>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b02      	ldr	r3, [pc, #8]	; (8001938 <UdpDebug_initializer+0x24>)
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200002f4 	.word	0x200002f4
 800193c:	810416ac 	.word	0x810416ac

08001940 <UdpDebug_print>:


void UdpDebug_print(const char* str)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	size_t len = strlen(str);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7fe fc6b 	bl	8000224 <strlen>
 800194e:	60f8      	str	r0, [r7, #12]
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, len + 1, PBUF_RAM);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	b29b      	uxth	r3, r3
 8001954:	3301      	adds	r3, #1
 8001956:	b29b      	uxth	r3, r3
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	2000      	movs	r0, #0
 800195e:	f004 fc43 	bl	80061e8 <pbuf_alloc>
 8001962:	60b8      	str	r0, [r7, #8]
	memcpy(p->payload, str, len + 1);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	6858      	ldr	r0, [r3, #4]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	461a      	mov	r2, r3
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f008 f969 	bl	8009c46 <memcpy>
	if(udp_sendto(g_root.pcb, p, &g_root.send_addr, g_root.send_port) != ERR_OK)
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <UdpDebug_print+0x54>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <UdpDebug_print+0x54>)
 800197a:	891b      	ldrh	r3, [r3, #8]
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <UdpDebug_print+0x58>)
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	f005 fc2e 	bl	80071e0 <udp_sendto>
	{
//		HAL_GPIO_WritePin(CAN_ERROR_LED_GPIO_Port, CAN_ERROR_LED_Pin, GPIO_PIN_RESET);
	}

	pbuf_free(p);
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f004 ffa3 	bl	80068d0 <pbuf_free>
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200002f4 	.word	0x200002f4
 8001998:	200002f8 	.word	0x200002f8

0800199c <UdpDebug_error>:


void UdpDebug_error(const char* str)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	UdpDebug_errorLedOn();
 80019a4:	f7ff ffb0 	bl	8001908 <UdpDebug_errorLedOn>
	UdpDebug_print(str);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ffc9 	bl	8001940 <UdpDebug_print>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <UdpPing_init>:

extern ETH_HandleTypeDef heth;


void UdpPing_init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	g_send_pcb = udp_new();
 80019bc:	f005 fd93 	bl	80074e6 <udp_new>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <UdpPing_init+0x28>)
 80019c4:	6013      	str	r3, [r2, #0]
	IP4_ADDR(&g_send_addr, HOST_IP_ADDR1, HOST_IP_ADDR2, HOST_IP_ADDR3, HOST_IP_ADDR4);
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <UdpPing_init+0x2c>)
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <UdpPing_init+0x30>)
 80019ca:	601a      	str	r2, [r3, #0]

	g_next_sendtim = HAL_GetTick() + 400;
 80019cc:	f000 f894 	bl	8001af8 <HAL_GetTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <UdpPing_init+0x34>)
 80019d8:	6013      	str	r3, [r2, #0]
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000304 	.word	0x20000304
 80019e4:	20000308 	.word	0x20000308
 80019e8:	810416ac 	.word	0x810416ac
 80019ec:	20000300 	.word	0x20000300

080019f0 <UdpPing_Process>:

void UdpPing_Process(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	if(g_next_sendtim < HAL_GetTick())
 80019f6:	f000 f87f 	bl	8001af8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <UdpPing_Process+0x5c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d91e      	bls.n	8001a42 <UdpPing_Process+0x52>
	{
		struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(PING_STRING), PBUF_RAM);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2106      	movs	r1, #6
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f004 fbed 	bl	80061e8 <pbuf_alloc>
 8001a0e:	6078      	str	r0, [r7, #4]
		memcpy(p->payload, PING_STRING, sizeof(PING_STRING));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2206      	movs	r2, #6
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <UdpPing_Process+0x60>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f008 f914 	bl	8009c46 <memcpy>
		udp_sendto(g_send_pcb, p, &g_send_addr, ETH_PING_SEND_PORT);
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <UdpPing_Process+0x64>)
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	f644 6399 	movw	r3, #20121	; 0x4e99
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <UdpPing_Process+0x68>)
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	f005 fbd9 	bl	80071e0 <udp_sendto>
		pbuf_free(p);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f004 ff4e 	bl	80068d0 <pbuf_free>

		g_next_sendtim = HAL_GetTick() + 400;
 8001a34:	f000 f860 	bl	8001af8 <HAL_GetTick>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001a3e:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <UdpPing_Process+0x5c>)
 8001a40:	6013      	str	r3, [r2, #0]
	}
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000300 	.word	0x20000300
 8001a50:	0800a838 	.word	0x0800a838
 8001a54:	20000304 	.word	0x20000304
 8001a58:	20000308 	.word	0x20000308

08001a5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a5c:	f7ff ff4e 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a62:	490c      	ldr	r1, [pc, #48]	; (8001a94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a78:	4c09      	ldr	r4, [pc, #36]	; (8001aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001a86:	f008 f8b7 	bl	8009bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8a:	f7ff f93b 	bl	8000d04 <main>
  bx lr
 8001a8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a98:	0800b9b0 	.word	0x0800b9b0
  ldr r2, =_sbss
 8001a9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001aa0:	20007e84 	.word	0x20007e84

08001aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC1_2_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_Init+0x28>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_Init+0x28>)
 8001ab2:	f043 0310 	orr.w	r3, r3, #16
 8001ab6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 fe97 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f7ff fd98 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fc58 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40022000 	.word	0x40022000

08001ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_IncTick+0x1c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_IncTick+0x20>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_IncTick+0x20>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000008 	.word	0x20000008
 8001af4:	2000030c 	.word	0x2000030c

08001af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <HAL_GetTick+0x10>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	2000030c 	.word	0x2000030c

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_Delay+0x44>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffe0 	bl	8001af8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000008 	.word	0x20000008

08001b54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0ed      	b.n	8001d42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fc32 	bl	80013dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b88:	f7ff ffb6 	bl	8001af8 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b8e:	e012      	b.n	8001bb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b90:	f7ff ffb2 	bl	8001af8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b0a      	cmp	r3, #10
 8001b9c:	d90b      	bls.n	8001bb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2205      	movs	r2, #5
 8001bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0c5      	b.n	8001d42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0e5      	beq.n	8001b90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0202 	bic.w	r2, r2, #2
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd4:	f7ff ff90 	bl	8001af8 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bda:	e012      	b.n	8001c02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bdc:	f7ff ff8c 	bl	8001af8 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b0a      	cmp	r3, #10
 8001be8:	d90b      	bls.n	8001c02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e09f      	b.n	8001d42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e5      	bne.n	8001bdc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e007      	b.n	8001c3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7e5b      	ldrb	r3, [r3, #25]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d108      	bne.n	8001c54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e007      	b.n	8001c64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7e9b      	ldrb	r3, [r3, #26]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0220 	bic.w	r2, r2, #32
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7edb      	ldrb	r3, [r3, #27]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d108      	bne.n	8001ca8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0210 	bic.w	r2, r2, #16
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e007      	b.n	8001cb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0210 	orr.w	r2, r2, #16
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7f1b      	ldrb	r3, [r3, #28]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d108      	bne.n	8001cd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0208 	orr.w	r2, r2, #8
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e007      	b.n	8001ce2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7f5b      	ldrb	r3, [r3, #29]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0204 	orr.w	r2, r2, #4
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e007      	b.n	8001d0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0204 	bic.w	r2, r2, #4
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	ea42 0103 	orr.w	r1, r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	1e5a      	subs	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12e      	bne.n	8001dbc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d76:	f7ff febf 	bl	8001af8 <HAL_GetTick>
 8001d7a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d7c:	e012      	b.n	8001da4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7e:	f7ff febb 	bl	8001af8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b0a      	cmp	r3, #10
 8001d8a:	d90b      	bls.n	8001da4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2205      	movs	r2, #5
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e012      	b.n	8001dca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1e5      	bne.n	8001d7e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e006      	b.n	8001dca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b089      	sub	sp, #36	; 0x24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001df0:	7ffb      	ldrb	r3, [r7, #31]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d003      	beq.n	8001dfe <HAL_CAN_AddTxMessage+0x2c>
 8001df6:	7ffb      	ldrb	r3, [r7, #31]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	f040 80ad 	bne.w	8001f58 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10a      	bne.n	8001e1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8095 	beq.w	8001f48 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	0e1b      	lsrs	r3, r3, #24
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e28:	2201      	movs	r2, #1
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	6809      	ldr	r1, [r1, #0]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3318      	adds	r3, #24
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	440b      	add	r3, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e00f      	b.n	8001e76 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e66:	68f9      	ldr	r1, [r7, #12]
 8001e68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3318      	adds	r3, #24
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	440b      	add	r3, r1
 8001e74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3318      	adds	r3, #24
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	440b      	add	r3, r1
 8001e86:	3304      	adds	r3, #4
 8001e88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	7d1b      	ldrb	r3, [r3, #20]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d111      	bne.n	8001eb6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3318      	adds	r3, #24
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	6811      	ldr	r1, [r2, #0]
 8001ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3318      	adds	r3, #24
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3307      	adds	r3, #7
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	061a      	lsls	r2, r3, #24
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3306      	adds	r3, #6
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3305      	adds	r3, #5
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	3204      	adds	r2, #4
 8001ed6:	7812      	ldrb	r2, [r2, #0]
 8001ed8:	4610      	mov	r0, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	6811      	ldr	r1, [r2, #0]
 8001ede:	ea43 0200 	orr.w	r2, r3, r0
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001eec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	061a      	lsls	r2, r3, #24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	041b      	lsls	r3, r3, #16
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3301      	adds	r3, #1
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	4610      	mov	r0, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	6811      	ldr	r1, [r2, #0]
 8001f14:	ea43 0200 	orr.w	r2, r3, r0
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3318      	adds	r3, #24
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	6811      	ldr	r1, [r2, #0]
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	440b      	add	r3, r1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e00e      	b.n	8001f66 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e006      	b.n	8001f66 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
  }
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f82:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d002      	beq.n	8001f90 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001f8a:	7afb      	ldrb	r3, [r7, #11]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d11d      	bne.n	8001fcc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d003      	beq.n	8001ffc <HAL_CAN_GetRxMessage+0x24>
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	f040 8103 	bne.w	8002202 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10e      	bne.n	8002020 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d116      	bne.n	800203e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0f7      	b.n	8002210 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0e8      	b.n	8002210 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	331b      	adds	r3, #27
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4413      	add	r3, r2
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0204 	and.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10c      	bne.n	8002076 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	331b      	adds	r3, #27
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	4413      	add	r3, r2
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e00b      	b.n	800208e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	331b      	adds	r3, #27
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4413      	add	r3, r2
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	08db      	lsrs	r3, r3, #3
 8002086:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	331b      	adds	r3, #27
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0202 	and.w	r2, r3, #2
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	331b      	adds	r3, #27
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	3304      	adds	r3, #4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2208      	movs	r2, #8
 80020c0:	611a      	str	r2, [r3, #16]
 80020c2:	e00b      	b.n	80020dc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	331b      	adds	r3, #27
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	4413      	add	r3, r2
 80020d0:	3304      	adds	r3, #4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 020f 	and.w	r2, r3, #15
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	331b      	adds	r3, #27
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	331b      	adds	r3, #27
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	4413      	add	r3, r2
 8002100:	3304      	adds	r3, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4413      	add	r3, r2
 8002116:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4413      	add	r3, r2
 800212c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0a1a      	lsrs	r2, r3, #8
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4413      	add	r3, r2
 8002146:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0c1a      	lsrs	r2, r3, #16
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	3302      	adds	r3, #2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4413      	add	r3, r2
 8002160:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0e1a      	lsrs	r2, r3, #24
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3303      	adds	r3, #3
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	3304      	adds	r3, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0a1a      	lsrs	r2, r3, #8
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	3305      	adds	r3, #5
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0c1a      	lsrs	r2, r3, #16
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	3306      	adds	r3, #6
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0e1a      	lsrs	r2, r3, #24
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	3307      	adds	r3, #7
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d108      	bne.n	80021ee <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0220 	orr.w	r2, r2, #32
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	e007      	b.n	80021fe <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e006      	b.n	8002210 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
  }
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d002      	beq.n	8002238 <HAL_CAN_ActivateNotification+0x1e>
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d109      	bne.n	800224c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6959      	ldr	r1, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e006      	b.n	800225a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d07c      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d023      	beq.n	80022fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f983 	bl	80025d2 <HAL_CAN_TxMailbox0CompleteCallback>
 80022cc:	e016      	b.n	80022fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d004      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
 80022e0:	e00c      	b.n	80022fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
 80022f4:	e002      	b.n	80022fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f986 	bl	8002608 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d024      	beq.n	8002350 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800230e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f962 	bl	80025e4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002320:	e016      	b.n	8002350 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
 8002334:	e00c      	b.n	8002350 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
 8002348:	e002      	b.n	8002350 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f965 	bl	800261a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d024      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002362:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f941 	bl	80025f6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002374:	e016      	b.n	80023a4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	e00c      	b.n	80023a4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
 800239c:	e002      	b.n	80023a4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f944 	bl	800262c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2210      	movs	r2, #16
 80023c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f92a 	bl	800263e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe f9a8 	bl	8000758 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002422:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2210      	movs	r2, #16
 800242a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2208      	movs	r2, #8
 8002446:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f901 	bl	8002650 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fe46 	bl	80010f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2210      	movs	r2, #16
 8002486:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f8ea 	bl	8002662 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2208      	movs	r2, #8
 80024a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8e2 	bl	8002674 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d07b      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d072      	beq.n	80025aa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	f043 0302 	orr.w	r3, r3, #2
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251e:	2b00      	cmp	r3, #0
 8002520:	d043      	beq.n	80025aa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002528:	2b00      	cmp	r3, #0
 800252a:	d03e      	beq.n	80025aa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002532:	2b60      	cmp	r3, #96	; 0x60
 8002534:	d02b      	beq.n	800258e <HAL_CAN_IRQHandler+0x32a>
 8002536:	2b60      	cmp	r3, #96	; 0x60
 8002538:	d82e      	bhi.n	8002598 <HAL_CAN_IRQHandler+0x334>
 800253a:	2b50      	cmp	r3, #80	; 0x50
 800253c:	d022      	beq.n	8002584 <HAL_CAN_IRQHandler+0x320>
 800253e:	2b50      	cmp	r3, #80	; 0x50
 8002540:	d82a      	bhi.n	8002598 <HAL_CAN_IRQHandler+0x334>
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d019      	beq.n	800257a <HAL_CAN_IRQHandler+0x316>
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	d826      	bhi.n	8002598 <HAL_CAN_IRQHandler+0x334>
 800254a:	2b30      	cmp	r3, #48	; 0x30
 800254c:	d010      	beq.n	8002570 <HAL_CAN_IRQHandler+0x30c>
 800254e:	2b30      	cmp	r3, #48	; 0x30
 8002550:	d822      	bhi.n	8002598 <HAL_CAN_IRQHandler+0x334>
 8002552:	2b10      	cmp	r3, #16
 8002554:	d002      	beq.n	800255c <HAL_CAN_IRQHandler+0x2f8>
 8002556:	2b20      	cmp	r3, #32
 8002558:	d005      	beq.n	8002566 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800255a:	e01d      	b.n	8002598 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002564:	e019      	b.n	800259a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	f043 0310 	orr.w	r3, r3, #16
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800256e:	e014      	b.n	800259a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f043 0320 	orr.w	r3, r3, #32
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002578:	e00f      	b.n	800259a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002582:	e00a      	b.n	800259a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800258c:	e005      	b.n	800259a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002596:	e000      	b.n	800259a <HAL_CAN_IRQHandler+0x336>
            break;
 8002598:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2204      	movs	r2, #4
 80025b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f85e 	bl	8002686 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db0b      	blt.n	8002726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	4906      	ldr	r1, [pc, #24]	; (8002730 <__NVIC_EnableIRQ+0x34>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2001      	movs	r0, #1
 800271e:	fa00 f202 	lsl.w	r2, r0, r2
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	; (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff4f 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002814:	f7ff ff64 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 8002818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ffb2 	bl	8002788 <NVIC_EncodePriority>
 8002824:	4602      	mov	r2, r0
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff81 	bl	8002734 <__NVIC_SetPriority>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff57 	bl	80026fc <__NVIC_EnableIRQ>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002868:	4ba4      	ldr	r3, [pc, #656]	; (8002afc <HAL_ETH_Init+0x2a4>)
 800286a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e153      	b.n	8002b26 <HAL_ETH_Init+0x2ce>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f002 fbe4 	bl	8005060 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8002898:	4b99      	ldr	r3, [pc, #612]	; (8002b00 <HAL_ETH_Init+0x2a8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a98      	ldr	r2, [pc, #608]	; (8002b00 <HAL_ETH_Init+0x2a8>)
 800289e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028a2:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 80028a4:	4b96      	ldr	r3, [pc, #600]	; (8002b00 <HAL_ETH_Init+0x2a8>)
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4994      	ldr	r1, [pc, #592]	; (8002b00 <HAL_ETH_Init+0x2a8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ca:	f7ff f915 	bl	8001af8 <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80028d0:	e011      	b.n	80028f6 <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 80028d2:	f7ff f911 	bl	8001af8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028e0:	d909      	bls.n	80028f6 <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2203      	movs	r2, #3
 80028e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e117      	b.n	8002b26 <HAL_ETH_Init+0x2ce>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e4      	bne.n	80028d2 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f023 031c 	bic.w	r3, r3, #28
 8002916:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002918:	f001 ff56 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 800291c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4a78      	ldr	r2, [pc, #480]	; (8002b04 <HAL_ETH_Init+0x2ac>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d908      	bls.n	8002938 <HAL_ETH_Init+0xe0>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <HAL_ETH_Init+0x2b0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d804      	bhi.n	8002938 <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	e00b      	b.n	8002950 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4a73      	ldr	r2, [pc, #460]	; (8002b08 <HAL_ETH_Init+0x2b0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d907      	bls.n	8002950 <HAL_ETH_Init+0xf8>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <HAL_ETH_Init+0x2a4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d203      	bcs.n	8002950 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f043 030c 	orr.w	r3, r3, #12
 800294e:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800295c:	2100      	movs	r1, #0
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fb8b 	bl	800307a <HAL_ETH_WritePHYRegister>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800296e:	6939      	ldr	r1, [r7, #16]
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fd41 	bl	80033f8 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0d1      	b.n	8002b26 <HAL_ETH_Init+0x2ce>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002982:	20ff      	movs	r0, #255	; 0xff
 8002984:	f7ff f8c2 	bl	8001b0c <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8096 	beq.w	8002abe <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002992:	f7ff f8b1 	bl	8001af8 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	461a      	mov	r2, r3
 800299e:	2101      	movs	r1, #1
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb02 	bl	8002faa <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80029a6:	f7ff f8a7 	bl	8001af8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d90f      	bls.n	80029d8 <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80029bc:	6939      	ldr	r1, [r7, #16]
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fd1a 	bl	80033f8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0a6      	b.n	8002b26 <HAL_ETH_Init+0x2ce>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0da      	beq.n	8002998 <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80029e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029e6:	2100      	movs	r1, #0
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb46 	bl	800307a <HAL_ETH_WritePHYRegister>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fcfc 	bl	80033f8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e08c      	b.n	8002b26 <HAL_ETH_Init+0x2ce>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7ff f874 	bl	8001af8 <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	461a      	mov	r2, r3
 8002a18:	2101      	movs	r1, #1
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fac5 	bl	8002faa <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002a20:	f7ff f86a 	bl	8001af8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d90f      	bls.n	8002a52 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002a36:	6939      	ldr	r1, [r7, #16]
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fcdd 	bl	80033f8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e069      	b.n	8002b26 <HAL_ETH_Init+0x2ce>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0da      	beq.n	8002a12 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	461a      	mov	r2, r3
 8002a62:	2110      	movs	r1, #16
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 faa0 	bl	8002faa <HAL_ETH_ReadPHYRegister>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002a74:	6939      	ldr	r1, [r7, #16]
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fcbe 	bl	80033f8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e04e      	b.n	8002b26 <HAL_ETH_Init+0x2ce>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e002      	b.n	8002aa2 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	e02f      	b.n	8002b14 <HAL_ETH_Init+0x2bc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e02a      	b.n	8002b14 <HAL_ETH_Init+0x2bc>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	08db      	lsrs	r3, r3, #3
 8002ac4:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 facf 	bl	800307a <HAL_ETH_WritePHYRegister>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d014      	beq.n	8002b0c <HAL_ETH_Init+0x2b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ae6:	6939      	ldr	r1, [r7, #16]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fc85 	bl	80033f8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e015      	b.n	8002b26 <HAL_ETH_Init+0x2ce>
 8002afa:	bf00      	nop
 8002afc:	03938700 	.word	0x03938700
 8002b00:	40010000 	.word	0x40010000
 8002b04:	01312cff 	.word	0x01312cff
 8002b08:	02160ebf 	.word	0x02160ebf
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002b0c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002b10:	f7fe fffc 	bl	8001b0c <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002b14:	6939      	ldr	r1, [r7, #16]
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fc6e 	bl	80033f8 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop

08002b30 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_ETH_DMATxDescListInit+0x20>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e051      	b.n	8002bf4 <HAL_ETH_DMATxDescListInit+0xc4>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e030      	b.n	8002bce <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4413      	add	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d208      	bcs.n	8002bc2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4413      	add	r3, r2
 8002bba:	461a      	mov	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	e002      	b.n	8002bc8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d3ca      	bcc.n	8002b6c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002be0:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b087      	sub	sp, #28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_ETH_DMARxDescListInit+0x20>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e055      	b.n	8002cca <HAL_ETH_DMARxDescListInit+0xcc>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e034      	b.n	8002ca4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	4413      	add	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c52:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	461a      	mov	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d208      	bcs.n	8002c98 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	4413      	add	r3, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	e002      	b.n	8002c9e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d3c6      	bcc.n	8002c3a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cb6:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ETH_TransmitFrame+0x24>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e0cc      	b.n	8002e92 <HAL_ETH_TransmitFrame+0x1be>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0b7      	b.n	8002e92 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da09      	bge.n	8002d40 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2212      	movs	r2, #18
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0a8      	b.n	8002e92 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d915      	bls.n	8002d76 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	4a53      	ldr	r2, [pc, #332]	; (8002e9c <HAL_ETH_TransmitFrame+0x1c8>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0a9b      	lsrs	r3, r3, #10
 8002d54:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_ETH_TransmitFrame+0x1c8>)
 8002d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5e:	0a9b      	lsrs	r3, r3, #10
 8002d60:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3301      	adds	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e001      	b.n	8002d7a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8002d76:	2301      	movs	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d11c      	bne.n	8002dba <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002d8e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002d9a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002daa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002db8:	e04b      	b.n	8002e52 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	e044      	b.n	8002e4a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dce:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002de4:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002dee:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d116      	bne.n	8002e28 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e08:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	4a24      	ldr	r2, [pc, #144]	; (8002ea0 <HAL_ETH_TransmitFrame+0x1cc>)
 8002e0e:	fb03 f202 	mul.w	r2, r3, r2
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002e1a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002e26:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e36:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	3301      	adds	r3, #1
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d3b6      	bcc.n	8002dc0 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2304      	movs	r3, #4
 8002e70:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	ac02b00b 	.word	0xac02b00b
 8002ea0:	fffffa0c 	.word	0xfffffa0c

08002ea4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_ETH_GetReceivedFrame+0x1a>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e070      	b.n	8002fa0 <HAL_ETH_GetReceivedFrame+0xfc>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	db5a      	blt.n	8002f8e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d030      	beq.n	8002f48 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d103      	bne.n	8002f00 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002f14:	3b04      	subs	r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e02b      	b.n	8002fa0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
 8002f76:	e00a      	b.n	8002f8e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b82      	cmp	r3, #130	; 0x82
 8002fca:	d101      	bne.n	8002fd0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e050      	b.n	8003072 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2282      	movs	r2, #130	; 0x82
 8002fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 031c 	and.w	r3, r3, #28
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8a1b      	ldrh	r3, [r3, #16]
 8002fec:	02db      	lsls	r3, r3, #11
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	019b      	lsls	r3, r3, #6
 8002ffa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0302 	bic.w	r3, r3, #2
 800300a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800301c:	f7fe fd6c 	bl	8001af8 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003022:	e015      	b.n	8003050 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003024:	f7fe fd68 	bl	8001af8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d309      	bcc.n	8003048 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e014      	b.n	8003072 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e4      	bne.n	8003024 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	460b      	mov	r3, r1
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b42      	cmp	r3, #66	; 0x42
 800309a:	d101      	bne.n	80030a0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
 800309e:	e04e      	b.n	800313e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2242      	movs	r2, #66	; 0x42
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 031c 	and.w	r3, r3, #28
 80030b6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8a1b      	ldrh	r3, [r3, #16]
 80030bc:	02db      	lsls	r3, r3, #11
 80030be:	b29b      	uxth	r3, r3
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f6:	f7fe fcff 	bl	8001af8 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80030fc:	e015      	b.n	800312a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80030fe:	f7fe fcfb 	bl	8001af8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310c:	d309      	bcc.n	8003122 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e00d      	b.n	800313e <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e4      	bne.n	80030fe <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_ETH_Start+0x16>
 8003158:	2302      	movs	r3, #2
 800315a:	e01f      	b.n	800319c <HAL_ETH_Start+0x56>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fb3b 	bl	80037e8 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fb72 	bl	800385c <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fbfd 	bl	8003978 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fba6 	bl	80038d0 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fbcd 	bl	8003924 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_ETH_Stop+0x16>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e01f      	b.n	80031fa <HAL_ETH_Stop+0x56>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fb95 	bl	80038fa <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fbbc 	bl	800394e <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fb5d 	bl	8003896 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fbcb 	bl	8003978 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fb1d 	bl	8003822 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_ETH_ConfigMAC+0x1c>
 800321c:	2302      	movs	r3, #2
 800321e:	e0e4      	b.n	80033ea <HAL_ETH_ConfigMAC+0x1e6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80b1 	beq.w	800339a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <HAL_ETH_ConfigMAC+0x1f0>)
 8003244:	4013      	ands	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003250:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8003256:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 800325c:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8003262:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8003268:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 800326e:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8003274:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 800327a:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8003280:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8003286:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 800328c:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8003292:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7fe fc2e 	bl	8001b0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80032c0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80032c6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80032cc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 80032d2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80032d8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80032de:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80032ea:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80032ec:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032f6:	2001      	movs	r0, #1
 80032f8:	f7fe fc08 	bl	8001b0c <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800330c:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003316:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003326:	4013      	ands	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003334:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800333a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003340:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8003346:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800334c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003364:	2001      	movs	r0, #1
 8003366:	f7fe fbd1 	bl	8001b0c <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800338a:	2001      	movs	r0, #1
 800338c:	f7fe fbbe 	bl	8001b0c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	61da      	str	r2, [r3, #28]
 8003398:	e01e      	b.n	80033d8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80033a8:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ca:	2001      	movs	r0, #1
 80033cc:	f7fe fb9e 	bl	8001b0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	ff20810f 	.word	0xff20810f

080033f8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b0b0      	sub	sp, #192	; 0xc0
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003414:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800341c:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800341e:	2300      	movs	r3, #0
 8003420:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003426:	2300      	movs	r3, #0
 8003428:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003432:	2300      	movs	r3, #0
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800343e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003442:	663b      	str	r3, [r7, #96]	; 0x60
 8003444:	e001      	b.n	800344a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800344a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800344e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003450:	2300      	movs	r3, #0
 8003452:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003454:	2300      	movs	r3, #0
 8003456:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003468:	2300      	movs	r3, #0
 800346a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800346e:	2300      	movs	r3, #0
 8003470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80034cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034d0:	4ba8      	ldr	r3, [pc, #672]	; (8003774 <ETH_MACDMAConfig+0x37c>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80034d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 80034da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80034dc:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 80034de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 80034e0:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80034e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 80034e4:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80034ea:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80034ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 80034ee:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80034f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 80034f2:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80034f8:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80034fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80034fc:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80034fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8003500:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8003502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8003504:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8003506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8003508:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 800350a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 800350c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800350e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003520:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800352c:	2001      	movs	r0, #1
 800352e:	f7fe faed 	bl	8001b0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800353a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800353c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800353e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8003540:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003544:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8003546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800354a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800354c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8003550:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003556:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800355c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003560:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003568:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800356a:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003576:	2001      	movs	r0, #1
 8003578:	f7fe fac8 	bl	8001b0c <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003584:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800358e:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003598:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035a8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80035ac:	4013      	ands	r3, r2
 80035ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80035b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035b6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80035b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80035bc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80035be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80035c2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 80035c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80035c8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80035ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 80035ce:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80035d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80035d4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80035d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035e8:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035f4:	2001      	movs	r0, #1
 80035f6:	f7fe fa89 	bl	8001b0c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003602:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8003604:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8003608:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800361e:	2001      	movs	r0, #1
 8003620:	f7fe fa74 	bl	8001b0c <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800362c:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003636:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 800363c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003640:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800364a:	2300      	movs	r3, #0
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800364e:	2300      	movs	r3, #0
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003652:	2304      	movs	r3, #4
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800365c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800366e:	2300      	movs	r3, #0
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003672:	2300      	movs	r3, #0
 8003674:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003684:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003688:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <ETH_MACDMAConfig+0x380>)
 800368a:	4013      	ands	r3, r2
 800368c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8003690:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 8003692:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8003694:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8003696:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8003698:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 800369a:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 800369c:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 800369e:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 80036a0:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 80036a2:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 80036a4:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardErrorFrames |
 80036a8:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 80036ac:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                        dmainit.ReceiveThresholdControl |
 80036b0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80036b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c4:	461a      	mov	r2, r3
 80036c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036ca:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036da:	2001      	movs	r0, #1
 80036dc:	f7fe fa16 	bl	8001b0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e8:	461a      	mov	r2, r3
 80036ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036ee:	6193      	str	r3, [r2, #24]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80036f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                                        dmainit.FixedBurst |
 80036f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80036f4:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.FixedBurst |
 80036f8:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80036fc:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80036fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003700:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 8003702:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8003704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8003706:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003710:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003714:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003724:	2001      	movs	r0, #1
 8003726:	f7fe f9f1 	bl	8001b0c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003732:	461a      	mov	r2, r3
 8003734:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003738:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10d      	bne.n	800375e <ETH_MACDMAConfig+0x366>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003758:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800375c:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	461a      	mov	r2, r3
 8003764:	2100      	movs	r1, #0
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f808 	bl	800377c <ETH_MACAddressConfig>
}
 800376c:	bf00      	nop
 800376e:	37c0      	adds	r7, #192	; 0xc0
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	ff20810f 	.word	0xff20810f
 8003778:	f8de3f23 	.word	0xf8de3f23

0800377c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3305      	adds	r3, #5
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	3204      	adds	r2, #4
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <ETH_MACAddressConfig+0x64>)
 800379e:	4413      	add	r3, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3303      	adds	r3, #3
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	061a      	lsls	r2, r3, #24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3302      	adds	r3, #2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3301      	adds	r3, #1
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	4313      	orrs	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <ETH_MACAddressConfig+0x68>)
 80037ce:	4413      	add	r3, r2
 80037d0:	461a      	mov	r2, r3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	6013      	str	r3, [r2, #0]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	40028040 	.word	0x40028040
 80037e4:	40028044 	.word	0x40028044

080037e8 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0208 	orr.w	r2, r2, #8
 8003802:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800380c:	2001      	movs	r0, #1
 800380e:	f000 f8d9 	bl	80039c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0208 	bic.w	r2, r2, #8
 800383c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003846:	2001      	movs	r0, #1
 8003848:	f000 f8bc 	bl	80039c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	601a      	str	r2, [r3, #0]
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0204 	orr.w	r2, r2, #4
 8003876:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003880:	2001      	movs	r0, #1
 8003882:	f000 f89f 	bl	80039c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0204 	bic.w	r2, r2, #4
 80038b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80038ba:	2001      	movs	r0, #1
 80038bc:	f000 f882 	bl	80039c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038ee:	6193      	str	r3, [r2, #24]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003914:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003918:	6193      	str	r3, [r2, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	f043 0302 	orr.w	r3, r3, #2
 800393e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003942:	6193      	str	r3, [r2, #24]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	f023 0302 	bic.w	r3, r3, #2
 8003968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800396c:	6193      	str	r3, [r2, #24]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800399a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80039a8:	2001      	movs	r0, #1
 80039aa:	f000 f80b 	bl	80039c4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039b8:	6193      	str	r3, [r2, #24]
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <ETH_Delay+0x34>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <ETH_Delay+0x38>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0a5b      	lsrs	r3, r3, #9
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039e0:	bf00      	nop
  }
  while (Delay --);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	60fa      	str	r2, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f9      	bne.n	80039e0 <ETH_Delay+0x1c>
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	20000000 	.word	0x20000000
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b08b      	sub	sp, #44	; 0x2c
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a12:	e169      	b.n	8003ce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a14:	2201      	movs	r2, #1
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f040 8158 	bne.w	8003ce2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4a9a      	ldr	r2, [pc, #616]	; (8003ca0 <HAL_GPIO_Init+0x2a0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d05e      	beq.n	8003afa <HAL_GPIO_Init+0xfa>
 8003a3c:	4a98      	ldr	r2, [pc, #608]	; (8003ca0 <HAL_GPIO_Init+0x2a0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d875      	bhi.n	8003b2e <HAL_GPIO_Init+0x12e>
 8003a42:	4a98      	ldr	r2, [pc, #608]	; (8003ca4 <HAL_GPIO_Init+0x2a4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d058      	beq.n	8003afa <HAL_GPIO_Init+0xfa>
 8003a48:	4a96      	ldr	r2, [pc, #600]	; (8003ca4 <HAL_GPIO_Init+0x2a4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d86f      	bhi.n	8003b2e <HAL_GPIO_Init+0x12e>
 8003a4e:	4a96      	ldr	r2, [pc, #600]	; (8003ca8 <HAL_GPIO_Init+0x2a8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d052      	beq.n	8003afa <HAL_GPIO_Init+0xfa>
 8003a54:	4a94      	ldr	r2, [pc, #592]	; (8003ca8 <HAL_GPIO_Init+0x2a8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d869      	bhi.n	8003b2e <HAL_GPIO_Init+0x12e>
 8003a5a:	4a94      	ldr	r2, [pc, #592]	; (8003cac <HAL_GPIO_Init+0x2ac>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d04c      	beq.n	8003afa <HAL_GPIO_Init+0xfa>
 8003a60:	4a92      	ldr	r2, [pc, #584]	; (8003cac <HAL_GPIO_Init+0x2ac>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d863      	bhi.n	8003b2e <HAL_GPIO_Init+0x12e>
 8003a66:	4a92      	ldr	r2, [pc, #584]	; (8003cb0 <HAL_GPIO_Init+0x2b0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d046      	beq.n	8003afa <HAL_GPIO_Init+0xfa>
 8003a6c:	4a90      	ldr	r2, [pc, #576]	; (8003cb0 <HAL_GPIO_Init+0x2b0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d85d      	bhi.n	8003b2e <HAL_GPIO_Init+0x12e>
 8003a72:	2b12      	cmp	r3, #18
 8003a74:	d82a      	bhi.n	8003acc <HAL_GPIO_Init+0xcc>
 8003a76:	2b12      	cmp	r3, #18
 8003a78:	d859      	bhi.n	8003b2e <HAL_GPIO_Init+0x12e>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_GPIO_Init+0x80>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003afb 	.word	0x08003afb
 8003a84:	08003ad5 	.word	0x08003ad5
 8003a88:	08003ae7 	.word	0x08003ae7
 8003a8c:	08003b29 	.word	0x08003b29
 8003a90:	08003b2f 	.word	0x08003b2f
 8003a94:	08003b2f 	.word	0x08003b2f
 8003a98:	08003b2f 	.word	0x08003b2f
 8003a9c:	08003b2f 	.word	0x08003b2f
 8003aa0:	08003b2f 	.word	0x08003b2f
 8003aa4:	08003b2f 	.word	0x08003b2f
 8003aa8:	08003b2f 	.word	0x08003b2f
 8003aac:	08003b2f 	.word	0x08003b2f
 8003ab0:	08003b2f 	.word	0x08003b2f
 8003ab4:	08003b2f 	.word	0x08003b2f
 8003ab8:	08003b2f 	.word	0x08003b2f
 8003abc:	08003b2f 	.word	0x08003b2f
 8003ac0:	08003b2f 	.word	0x08003b2f
 8003ac4:	08003add 	.word	0x08003add
 8003ac8:	08003af1 	.word	0x08003af1
 8003acc:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_GPIO_Init+0x2b4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ad2:	e02c      	b.n	8003b2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	623b      	str	r3, [r7, #32]
          break;
 8003ada:	e029      	b.n	8003b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	623b      	str	r3, [r7, #32]
          break;
 8003ae4:	e024      	b.n	8003b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	3308      	adds	r3, #8
 8003aec:	623b      	str	r3, [r7, #32]
          break;
 8003aee:	e01f      	b.n	8003b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	330c      	adds	r3, #12
 8003af6:	623b      	str	r3, [r7, #32]
          break;
 8003af8:	e01a      	b.n	8003b30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b02:	2304      	movs	r3, #4
 8003b04:	623b      	str	r3, [r7, #32]
          break;
 8003b06:	e013      	b.n	8003b30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b10:	2308      	movs	r3, #8
 8003b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	611a      	str	r2, [r3, #16]
          break;
 8003b1a:	e009      	b.n	8003b30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	615a      	str	r2, [r3, #20]
          break;
 8003b26:	e003      	b.n	8003b30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	623b      	str	r3, [r7, #32]
          break;
 8003b2c:	e000      	b.n	8003b30 <HAL_GPIO_Init+0x130>
          break;
 8003b2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2bff      	cmp	r3, #255	; 0xff
 8003b34:	d801      	bhi.n	8003b3a <HAL_GPIO_Init+0x13a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	e001      	b.n	8003b3e <HAL_GPIO_Init+0x13e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2bff      	cmp	r3, #255	; 0xff
 8003b44:	d802      	bhi.n	8003b4c <HAL_GPIO_Init+0x14c>
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	e002      	b.n	8003b52 <HAL_GPIO_Init+0x152>
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	3b08      	subs	r3, #8
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	210f      	movs	r1, #15
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	401a      	ands	r2, r3
 8003b64:	6a39      	ldr	r1, [r7, #32]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80b1 	beq.w	8003ce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b80:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <HAL_GPIO_Init+0x2b8>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	4a4c      	ldr	r2, [pc, #304]	; (8003cb8 <HAL_GPIO_Init+0x2b8>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6193      	str	r3, [r2, #24]
 8003b8c:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_GPIO_Init+0x2b8>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b98:	4a48      	ldr	r2, [pc, #288]	; (8003cbc <HAL_GPIO_Init+0x2bc>)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	220f      	movs	r2, #15
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a40      	ldr	r2, [pc, #256]	; (8003cc0 <HAL_GPIO_Init+0x2c0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <HAL_GPIO_Init+0x1ec>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3f      	ldr	r2, [pc, #252]	; (8003cc4 <HAL_GPIO_Init+0x2c4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00d      	beq.n	8003be8 <HAL_GPIO_Init+0x1e8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a3e      	ldr	r2, [pc, #248]	; (8003cc8 <HAL_GPIO_Init+0x2c8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <HAL_GPIO_Init+0x1e4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a3d      	ldr	r2, [pc, #244]	; (8003ccc <HAL_GPIO_Init+0x2cc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d101      	bne.n	8003be0 <HAL_GPIO_Init+0x1e0>
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e006      	b.n	8003bee <HAL_GPIO_Init+0x1ee>
 8003be0:	2304      	movs	r3, #4
 8003be2:	e004      	b.n	8003bee <HAL_GPIO_Init+0x1ee>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e002      	b.n	8003bee <HAL_GPIO_Init+0x1ee>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_GPIO_Init+0x1ee>
 8003bec:	2300      	movs	r3, #0
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	f002 0203 	and.w	r2, r2, #3
 8003bf4:	0092      	lsls	r2, r2, #2
 8003bf6:	4093      	lsls	r3, r2
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bfe:	492f      	ldr	r1, [pc, #188]	; (8003cbc <HAL_GPIO_Init+0x2bc>)
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d006      	beq.n	8003c26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c18:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	492c      	ldr	r1, [pc, #176]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]
 8003c24:	e006      	b.n	8003c34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c26:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	4928      	ldr	r1, [pc, #160]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d006      	beq.n	8003c4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c40:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	4922      	ldr	r1, [pc, #136]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60cb      	str	r3, [r1, #12]
 8003c4c:	e006      	b.n	8003c5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c4e:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	491e      	ldr	r1, [pc, #120]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	4918      	ldr	r1, [pc, #96]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
 8003c74:	e006      	b.n	8003c84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	4914      	ldr	r1, [pc, #80]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d021      	beq.n	8003cd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c90:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	490e      	ldr	r1, [pc, #56]	; (8003cd0 <HAL_GPIO_Init+0x2d0>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]
 8003c9c:	e021      	b.n	8003ce2 <HAL_GPIO_Init+0x2e2>
 8003c9e:	bf00      	nop
 8003ca0:	10320000 	.word	0x10320000
 8003ca4:	10310000 	.word	0x10310000
 8003ca8:	10220000 	.word	0x10220000
 8003cac:	10210000 	.word	0x10210000
 8003cb0:	10120000 	.word	0x10120000
 8003cb4:	10110000 	.word	0x10110000
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010800 	.word	0x40010800
 8003cc4:	40010c00 	.word	0x40010c00
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40011400 	.word	0x40011400
 8003cd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_GPIO_Init+0x304>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	4909      	ldr	r1, [pc, #36]	; (8003d04 <HAL_GPIO_Init+0x304>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f47f ae8e 	bne.w	8003a14 <HAL_GPIO_Init+0x14>
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	372c      	adds	r7, #44	; 0x2c
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	40010400 	.word	0x40010400

08003d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d24:	e003      	b.n	8003d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	041a      	lsls	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	611a      	str	r2, [r3, #16]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	43d9      	mvns	r1, r3
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	400b      	ands	r3, r1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	611a      	str	r2, [r3, #16]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e304      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8087 	beq.w	8003e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d8c:	4b92      	ldr	r3, [pc, #584]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d00c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d98:	4b8f      	ldr	r3, [pc, #572]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d112      	bne.n	8003dca <HAL_RCC_OscConfig+0x5e>
 8003da4:	4b8c      	ldr	r3, [pc, #560]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d10b      	bne.n	8003dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db2:	4b89      	ldr	r3, [pc, #548]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d06c      	beq.n	8003e98 <HAL_RCC_OscConfig+0x12c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d168      	bne.n	8003e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e2de      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x76>
 8003dd4:	4b80      	ldr	r3, [pc, #512]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a7f      	ldr	r2, [pc, #508]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e02e      	b.n	8003e40 <HAL_RCC_OscConfig+0xd4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x98>
 8003dea:	4b7b      	ldr	r3, [pc, #492]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7a      	ldr	r2, [pc, #488]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4b78      	ldr	r3, [pc, #480]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a77      	ldr	r2, [pc, #476]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e01d      	b.n	8003e40 <HAL_RCC_OscConfig+0xd4>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0xbc>
 8003e0e:	4b72      	ldr	r3, [pc, #456]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a71      	ldr	r2, [pc, #452]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b6f      	ldr	r3, [pc, #444]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6e      	ldr	r2, [pc, #440]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e00b      	b.n	8003e40 <HAL_RCC_OscConfig+0xd4>
 8003e28:	4b6b      	ldr	r3, [pc, #428]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a6a      	ldr	r2, [pc, #424]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b68      	ldr	r3, [pc, #416]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a67      	ldr	r2, [pc, #412]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd fe56 	bl	8001af8 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7fd fe52 	bl	8001af8 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	; 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e292      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	4b5d      	ldr	r3, [pc, #372]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0xe4>
 8003e6e:	e014      	b.n	8003e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fd fe42 	bl	8001af8 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fd fe3e 	bl	8001af8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e27e      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8a:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x10c>
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d063      	beq.n	8003f6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ea6:	4b4c      	ldr	r3, [pc, #304]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eb2:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d11c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x18c>
 8003ebe:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d116      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eca:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x176>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d001      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e252      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee2:	4b3d      	ldr	r3, [pc, #244]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4939      	ldr	r1, [pc, #228]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef6:	e03a      	b.n	8003f6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d020      	beq.n	8003f42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fd fdf7 	bl	8001af8 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0e:	f7fd fdf3 	bl	8001af8 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e233      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f20:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2c:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4927      	ldr	r1, [pc, #156]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]
 8003f40:	e015      	b.n	8003f6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f42:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_RCC_OscConfig+0x270>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd fdd6 	bl	8001af8 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f50:	f7fd fdd2 	bl	8001af8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e212      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d03a      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d019      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f82:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <HAL_RCC_OscConfig+0x274>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7fd fdb6 	bl	8001af8 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f90:	f7fd fdb2 	bl	8001af8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e1f2      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f000 fc58 	bl	8004864 <RCC_Delay>
 8003fb4:	e01c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fbc:	f7fd fd9c 	bl	8001af8 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc2:	e00f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc4:	f7fd fd98 	bl	8001af8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d908      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1d8      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	42420000 	.word	0x42420000
 8003fe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	4b9b      	ldr	r3, [pc, #620]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e9      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80a6 	beq.w	800414a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004002:	4b94      	ldr	r3, [pc, #592]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	4b91      	ldr	r3, [pc, #580]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4a90      	ldr	r2, [pc, #576]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004018:	61d3      	str	r3, [r2, #28]
 800401a:	4b8e      	ldr	r3, [pc, #568]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b8b      	ldr	r3, [pc, #556]	; (8004258 <HAL_RCC_OscConfig+0x4ec>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d118      	bne.n	8004068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004036:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0x4ec>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a87      	ldr	r2, [pc, #540]	; (8004258 <HAL_RCC_OscConfig+0x4ec>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004042:	f7fd fd59 	bl	8001af8 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fd fd55 	bl	8001af8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e195      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405c:	4b7e      	ldr	r3, [pc, #504]	; (8004258 <HAL_RCC_OscConfig+0x4ec>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x312>
 8004070:	4b78      	ldr	r3, [pc, #480]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	4a77      	ldr	r2, [pc, #476]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6213      	str	r3, [r2, #32]
 800407c:	e02d      	b.n	80040da <HAL_RCC_OscConfig+0x36e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x334>
 8004086:	4b73      	ldr	r3, [pc, #460]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4a72      	ldr	r2, [pc, #456]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6213      	str	r3, [r2, #32]
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4a6f      	ldr	r2, [pc, #444]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	6213      	str	r3, [r2, #32]
 800409e:	e01c      	b.n	80040da <HAL_RCC_OscConfig+0x36e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCC_OscConfig+0x356>
 80040a8:	4b6a      	ldr	r3, [pc, #424]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	4a69      	ldr	r2, [pc, #420]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6213      	str	r3, [r2, #32]
 80040b4:	4b67      	ldr	r3, [pc, #412]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	4a66      	ldr	r2, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6213      	str	r3, [r2, #32]
 80040c0:	e00b      	b.n	80040da <HAL_RCC_OscConfig+0x36e>
 80040c2:	4b64      	ldr	r3, [pc, #400]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	4a63      	ldr	r2, [pc, #396]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6213      	str	r3, [r2, #32]
 80040ce:	4b61      	ldr	r3, [pc, #388]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4a60      	ldr	r2, [pc, #384]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d015      	beq.n	800410e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fd fd09 	bl	8001af8 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fd fd05 	bl	8001af8 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e143      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	4b54      	ldr	r3, [pc, #336]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ee      	beq.n	80040ea <HAL_RCC_OscConfig+0x37e>
 800410c:	e014      	b.n	8004138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410e:	f7fd fcf3 	bl	8001af8 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd fcef 	bl	8001af8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e12d      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	4b49      	ldr	r3, [pc, #292]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b45      	ldr	r3, [pc, #276]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	4a44      	ldr	r2, [pc, #272]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 808c 	beq.w	800426c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004154:	4b3f      	ldr	r3, [pc, #252]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004160:	d10e      	bne.n	8004180 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004162:	4b3c      	ldr	r3, [pc, #240]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800416a:	2b08      	cmp	r3, #8
 800416c:	d108      	bne.n	8004180 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417a:	d101      	bne.n	8004180 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e103      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	2b02      	cmp	r3, #2
 8004186:	d14e      	bne.n	8004226 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004188:	4b32      	ldr	r3, [pc, #200]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004194:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0ef      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80041a8:	4b2c      	ldr	r3, [pc, #176]	; (800425c <HAL_RCC_OscConfig+0x4f0>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fd fca3 	bl	8001af8 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041b6:	f7fd fc9f 	bl	8001af8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b64      	cmp	r3, #100	; 0x64
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e0df      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80041c8:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80041d4:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e0:	491c      	ldr	r1, [pc, #112]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80041e6:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	4918      	ldr	r1, [pc, #96]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80041f8:	4b18      	ldr	r3, [pc, #96]	; (800425c <HAL_RCC_OscConfig+0x4f0>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fd fc7b 	bl	8001af8 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004206:	f7fd fc77 	bl	8001af8 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b64      	cmp	r3, #100	; 0x64
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e0b7      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x49a>
 8004224:	e022      	b.n	800426c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCC_OscConfig+0x4f0>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fd fc5e 	bl	8001af8 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800423e:	e00f      	b.n	8004260 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004240:	f7fd fc5a 	bl	8001af8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d908      	bls.n	8004260 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e09a      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	40007000 	.word	0x40007000
 800425c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004260:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e9      	bne.n	8004240 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8088 	beq.w	8004386 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004276:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b08      	cmp	r3, #8
 8004280:	d068      	beq.n	8004354 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d14d      	bne.n	8004326 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b42      	ldr	r3, [pc, #264]	; (8004394 <HAL_RCC_OscConfig+0x628>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fd fc32 	bl	8001af8 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fd fc2e 	bl	8001af8 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e06e      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042aa:	4b39      	ldr	r3, [pc, #228]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d10f      	bne.n	80042e0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80042c0:	4b33      	ldr	r3, [pc, #204]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4931      	ldr	r1, [pc, #196]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f023 020f 	bic.w	r2, r3, #15
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	492d      	ldr	r1, [pc, #180]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e0:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	430b      	orrs	r3, r1
 80042f2:	4927      	ldr	r1, [pc, #156]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <HAL_RCC_OscConfig+0x628>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fe:	f7fd fbfb 	bl	8001af8 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004306:	f7fd fbf7 	bl	8001af8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e037      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x59a>
 8004324:	e02f      	b.n	8004386 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <HAL_RCC_OscConfig+0x628>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fd fbe4 	bl	8001af8 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004334:	f7fd fbe0 	bl	8001af8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e020      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c8>
 8004352:	e018      	b.n	8004386 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e013      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_OscConfig+0x624>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	429a      	cmp	r2, r3
 8004372:	d106      	bne.n	8004382 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d001      	beq.n	8004386 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	42420060 	.word	0x42420060

08004398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0d0      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043ac:	4b6a      	ldr	r3, [pc, #424]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d910      	bls.n	80043dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b67      	ldr	r3, [pc, #412]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 0207 	bic.w	r2, r3, #7
 80043c2:	4965      	ldr	r1, [pc, #404]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0b8      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d020      	beq.n	800442a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a58      	ldr	r2, [pc, #352]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800440c:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004416:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004418:	4b50      	ldr	r3, [pc, #320]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	494d      	ldr	r1, [pc, #308]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d040      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d115      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e07f      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004456:	4b41      	ldr	r3, [pc, #260]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e073      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004466:	4b3d      	ldr	r3, [pc, #244]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e06b      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004476:	4b39      	ldr	r3, [pc, #228]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f023 0203 	bic.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4936      	ldr	r1, [pc, #216]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004488:	f7fd fb36 	bl	8001af8 <HAL_GetTick>
 800448c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448e:	e00a      	b.n	80044a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004490:	f7fd fb32 	bl	8001af8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e053      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	4b2d      	ldr	r3, [pc, #180]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 020c 	and.w	r2, r3, #12
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d1eb      	bne.n	8004490 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b8:	4b27      	ldr	r3, [pc, #156]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d210      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 0207 	bic.w	r2, r3, #7
 80044ce:	4922      	ldr	r1, [pc, #136]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e032      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4916      	ldr	r1, [pc, #88]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	490e      	ldr	r1, [pc, #56]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004526:	f000 f859 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 800452a:	4602      	mov	r2, r0
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	490a      	ldr	r1, [pc, #40]	; (8004560 <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	5ccb      	ldrb	r3, [r1, r3]
 800453a:	fa22 f303 	lsr.w	r3, r2, r3
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <HAL_RCC_ClockConfig+0x1cc>)
 8004540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_ClockConfig+0x1d0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd f854 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40022000 	.word	0x40022000
 800455c:	40021000 	.word	0x40021000
 8004560:	0800b8b0 	.word	0x0800b8b0
 8004564:	20000000 	.word	0x20000000
 8004568:	20000004 	.word	0x20000004

0800456c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8004578:	f107 0318 	add.w	r3, r7, #24
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8004586:	2302      	movs	r3, #2
 8004588:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800458a:	2303      	movs	r3, #3
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800458e:	2300      	movs	r3, #0
 8004590:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8004592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004596:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8004598:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <HAL_RCC_MCOConfig+0x68>)
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4a0d      	ldr	r2, [pc, #52]	; (80045d4 <HAL_RCC_MCOConfig+0x68>)
 800459e:	f043 0304 	orr.w	r3, r3, #4
 80045a2:	6193      	str	r3, [r2, #24]
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_MCOConfig+0x68>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80045b0:	f107 0318 	add.w	r3, r7, #24
 80045b4:	4619      	mov	r1, r3
 80045b6:	4808      	ldr	r0, [pc, #32]	; (80045d8 <HAL_RCC_MCOConfig+0x6c>)
 80045b8:	f7ff fa22 	bl	8003a00 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCC_MCOConfig+0x68>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80045c4:	4903      	ldr	r1, [pc, #12]	; (80045d4 <HAL_RCC_MCOConfig+0x68>)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
}
 80045cc:	bf00      	nop
 80045ce:	3728      	adds	r7, #40	; 0x28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40010800 	.word	0x40010800

080045dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b092      	sub	sp, #72	; 0x48
 80045e2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e8:	2300      	movs	r3, #0
 80045ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ec:	2300      	movs	r3, #0
 80045ee:	647b      	str	r3, [r7, #68]	; 0x44
 80045f0:	2300      	movs	r3, #0
 80045f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30
 80045fc:	2300      	movs	r3, #0
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004600:	4b6b      	ldr	r3, [pc, #428]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b04      	cmp	r3, #4
 800460e:	d002      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x3a>
 8004610:	2b08      	cmp	r3, #8
 8004612:	d003      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x40>
 8004614:	e0c3      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004616:	4b67      	ldr	r3, [pc, #412]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004618:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800461a:	e0c3      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461e:	0c9b      	lsrs	r3, r3, #18
 8004620:	f003 020f 	and.w	r2, r3, #15
 8004624:	4b64      	ldr	r3, [pc, #400]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800462a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80ac 	beq.w	800478e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004636:	4b5e      	ldr	r3, [pc, #376]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	4b5f      	ldr	r3, [pc, #380]	; (80047bc <HAL_RCC_GetSysClockFreq+0x1e0>)
 8004640:	5c9b      	ldrb	r3, [r3, r2]
 8004642:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004644:	4b5a      	ldr	r3, [pc, #360]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 808c 	beq.w	800476a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004652:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	3301      	adds	r3, #1
 800465e:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004660:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	3302      	adds	r3, #2
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	2200      	movs	r2, #0
 8004672:	623b      	str	r3, [r7, #32]
 8004674:	627a      	str	r2, [r7, #36]	; 0x24
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	2200      	movs	r2, #0
 800467a:	4618      	mov	r0, r3
 800467c:	4611      	mov	r1, r2
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	fb00 f203 	mul.w	r2, r0, r3
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	fb03 f301 	mul.w	r3, r3, r1
 800468a:	4413      	add	r3, r2
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	fba2 4500 	umull	r4, r5, r2, r0
 8004692:	442b      	add	r3, r5
 8004694:	461d      	mov	r5, r3
 8004696:	4622      	mov	r2, r4
 8004698:	462b      	mov	r3, r5
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	0159      	lsls	r1, r3, #5
 80046a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a8:	0150      	lsls	r0, r2, #5
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	ebb2 0a04 	subs.w	sl, r2, r4
 80046b2:	eb63 0b05 	sbc.w	fp, r3, r5
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046c2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046c6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046ca:	ebb2 080a 	subs.w	r8, r2, sl
 80046ce:	eb63 090b 	sbc.w	r9, r3, fp
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046e6:	4690      	mov	r8, r2
 80046e8:	4699      	mov	r9, r3
 80046ea:	eb18 0304 	adds.w	r3, r8, r4
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	eb49 0305 	adc.w	r3, r9, r5
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004702:	4629      	mov	r1, r5
 8004704:	028b      	lsls	r3, r1, #10
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	4604      	mov	r4, r0
 800470c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004710:	4601      	mov	r1, r0
 8004712:	028a      	lsls	r2, r1, #10
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	2200      	movs	r2, #0
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	617a      	str	r2, [r7, #20]
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	2200      	movs	r2, #0
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	60fa      	str	r2, [r7, #12]
 8004728:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800472c:	4622      	mov	r2, r4
 800472e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004732:	4645      	mov	r5, r8
 8004734:	fb05 f202 	mul.w	r2, r5, r2
 8004738:	46cc      	mov	ip, r9
 800473a:	4625      	mov	r5, r4
 800473c:	461c      	mov	r4, r3
 800473e:	4623      	mov	r3, r4
 8004740:	fb03 f30c 	mul.w	r3, r3, ip
 8004744:	4413      	add	r3, r2
 8004746:	4622      	mov	r2, r4
 8004748:	4644      	mov	r4, r8
 800474a:	fba2 2404 	umull	r2, r4, r2, r4
 800474e:	61fc      	str	r4, [r7, #28]
 8004750:	61ba      	str	r2, [r7, #24]
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800475c:	f7fb fdba 	bl	80002d4 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4613      	mov	r3, r2
 8004766:	647b      	str	r3, [r7, #68]	; 0x44
 8004768:	e007      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476c:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800476e:	fb03 f202 	mul.w	r2, r3, r2
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800477a:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800477c:	7b5b      	ldrb	r3, [r3, #13]
 800477e:	461a      	mov	r2, r3
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8004786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	647b      	str	r3, [r7, #68]	; 0x44
 800478c:	e004      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004790:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8004798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800479c:	e002      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80047a0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80047a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3748      	adds	r7, #72	; 0x48
 80047aa:	46bd      	mov	sp, r7
 80047ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	0800b8c8 	.word	0x0800b8c8
 80047bc:	0800b8d8 	.word	0x0800b8d8
 80047c0:	003d0900 	.word	0x003d0900
 80047c4:	007a1200 	.word	0x007a1200

080047c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	20000000 	.word	0x20000000

080047dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047e0:	f7ff fff2 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	4903      	ldr	r1, [pc, #12]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000
 8004800:	0800b8c0 	.word	0x0800b8c0

08004804 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	220f      	movs	r2, #15
 8004812:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <HAL_RCC_GetClockConfig+0x58>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0203 	and.w	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <HAL_RCC_GetClockConfig+0x58>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_GetClockConfig+0x58>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004838:	4b08      	ldr	r3, [pc, #32]	; (800485c <HAL_RCC_GetClockConfig+0x58>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	08db      	lsrs	r3, r3, #3
 800483e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_GetClockConfig+0x5c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0207 	and.w	r2, r3, #7
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000
 8004860:	40022000 	.word	0x40022000

08004864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <RCC_Delay+0x34>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <RCC_Delay+0x38>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	0a5b      	lsrs	r3, r3, #9
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004880:	bf00      	nop
  }
  while (Delay --);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	60fa      	str	r2, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f9      	bne.n	8004880 <RCC_Delay+0x1c>
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	20000000 	.word	0x20000000
 800489c:	10624dd3 	.word	0x10624dd3

080048a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e041      	b.n	8004936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fe6e 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 f99c 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d001      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e03f      	b.n	80049d8 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_TIM_Base_Start_IT+0x62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d00e      	beq.n	80049a2 <HAL_TIM_Base_Start_IT+0x62>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_TIM_Base_Start_IT+0xa8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIM_Base_Start_IT+0x62>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_TIM_Base_Start_IT+0xac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIM_Base_Start_IT+0x62>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <HAL_TIM_Base_Start_IT+0xb0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d111      	bne.n	80049c6 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d010      	beq.n	80049d6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	e007      	b.n	80049d6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00

080049f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01b      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0202 	mvn.w	r2, #2
 8004a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f8d1 	bl	8004be6 <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f8c4 	bl	8004bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8d3 	bl	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d020      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0204 	mvn.w	r2, #4
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8ab 	bl	8004be6 <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f89e 	bl	8004bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8ad 	bl	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0208 	mvn.w	r2, #8
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f885 	bl	8004be6 <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f878 	bl	8004bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f887 	bl	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d020      	beq.n	8004b3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0210 	mvn.w	r2, #16
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2208      	movs	r2, #8
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f85f 	bl	8004be6 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f852 	bl	8004bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f861 	bl	8004bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00c      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0201 	mvn.w	r2, #1
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc fab4 	bl	80010c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f933 	bl	8004dea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f831 	bl	8004c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0220 	mvn.w	r2, #32
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f906 	bl	8004dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a33      	ldr	r2, [pc, #204]	; (8004cfc <TIM_Base_SetConfig+0xe0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00f      	beq.n	8004c54 <TIM_Base_SetConfig+0x38>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d00b      	beq.n	8004c54 <TIM_Base_SetConfig+0x38>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a30      	ldr	r2, [pc, #192]	; (8004d00 <TIM_Base_SetConfig+0xe4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d007      	beq.n	8004c54 <TIM_Base_SetConfig+0x38>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a2f      	ldr	r2, [pc, #188]	; (8004d04 <TIM_Base_SetConfig+0xe8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_Base_SetConfig+0x38>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a2e      	ldr	r2, [pc, #184]	; (8004d08 <TIM_Base_SetConfig+0xec>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d108      	bne.n	8004c66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a24      	ldr	r2, [pc, #144]	; (8004cfc <TIM_Base_SetConfig+0xe0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00f      	beq.n	8004c8e <TIM_Base_SetConfig+0x72>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c74:	d00b      	beq.n	8004c8e <TIM_Base_SetConfig+0x72>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <TIM_Base_SetConfig+0xe4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <TIM_Base_SetConfig+0x72>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <TIM_Base_SetConfig+0xe8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_Base_SetConfig+0x72>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <TIM_Base_SetConfig+0xec>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d108      	bne.n	8004ca0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <TIM_Base_SetConfig+0xe0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d103      	bne.n	8004cd4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00

08004d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e04b      	b.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d70:	d00e      	beq.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10c      	bne.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00

08004dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr

08004dea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 172;
 8004e02:	4b87      	ldr	r3, [pc, #540]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e04:	22ac      	movs	r2, #172	; 0xac
 8004e06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 22;
 8004e08:	4b85      	ldr	r3, [pc, #532]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e0a:	2216      	movs	r2, #22
 8004e0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 4;
 8004e0e:	4b84      	ldr	r3, [pc, #528]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e10:	2204      	movs	r2, #4
 8004e12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 11;
 8004e14:	4b82      	ldr	r3, [pc, #520]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e16:	220b      	movs	r2, #11
 8004e18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004e1a:	4b82      	ldr	r3, [pc, #520]	; (8005024 <MX_LWIP_Init+0x228>)
 8004e1c:	22ff      	movs	r2, #255	; 0xff
 8004e1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004e20:	4b80      	ldr	r3, [pc, #512]	; (8005024 <MX_LWIP_Init+0x228>)
 8004e22:	22ff      	movs	r2, #255	; 0xff
 8004e24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 240;
 8004e26:	4b7f      	ldr	r3, [pc, #508]	; (8005024 <MX_LWIP_Init+0x228>)
 8004e28:	22f0      	movs	r2, #240	; 0xf0
 8004e2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004e2c:	4b7d      	ldr	r3, [pc, #500]	; (8005024 <MX_LWIP_Init+0x228>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8004e32:	4b7d      	ldr	r3, [pc, #500]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004e38:	4b7b      	ldr	r3, [pc, #492]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004e3e:	4b7a      	ldr	r3, [pc, #488]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004e44:	4b78      	ldr	r3, [pc, #480]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004e4a:	f000 fc93 	bl	8005774 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004e4e:	4b74      	ldr	r3, [pc, #464]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	061a      	lsls	r2, r3, #24
 8004e54:	4b72      	ldr	r3, [pc, #456]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	4b70      	ldr	r3, [pc, #448]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e5e:	789b      	ldrb	r3, [r3, #2]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	4313      	orrs	r3, r2
 8004e64:	4a6e      	ldr	r2, [pc, #440]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e66:	78d2      	ldrb	r2, [r2, #3]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	061a      	lsls	r2, r3, #24
 8004e6c:	4b6c      	ldr	r3, [pc, #432]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	0619      	lsls	r1, r3, #24
 8004e72:	4b6b      	ldr	r3, [pc, #428]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	4319      	orrs	r1, r3
 8004e7a:	4b69      	ldr	r3, [pc, #420]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e7c:	789b      	ldrb	r3, [r3, #2]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	430b      	orrs	r3, r1
 8004e82:	4967      	ldr	r1, [pc, #412]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e84:	78c9      	ldrb	r1, [r1, #3]
 8004e86:	430b      	orrs	r3, r1
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	4b63      	ldr	r3, [pc, #396]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	0619      	lsls	r1, r3, #24
 8004e96:	4b62      	ldr	r3, [pc, #392]	; (8005020 <MX_LWIP_Init+0x224>)
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4319      	orrs	r1, r3
 8004e9e:	4b60      	ldr	r3, [pc, #384]	; (8005020 <MX_LWIP_Init+0x224>)
 8004ea0:	789b      	ldrb	r3, [r3, #2]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	495e      	ldr	r1, [pc, #376]	; (8005020 <MX_LWIP_Init+0x224>)
 8004ea8:	78c9      	ldrb	r1, [r1, #3]
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	4b5a      	ldr	r3, [pc, #360]	; (8005020 <MX_LWIP_Init+0x224>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	0619      	lsls	r1, r3, #24
 8004eba:	4b59      	ldr	r3, [pc, #356]	; (8005020 <MX_LWIP_Init+0x224>)
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	4319      	orrs	r1, r3
 8004ec2:	4b57      	ldr	r3, [pc, #348]	; (8005020 <MX_LWIP_Init+0x224>)
 8004ec4:	789b      	ldrb	r3, [r3, #2]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	4955      	ldr	r1, [pc, #340]	; (8005020 <MX_LWIP_Init+0x224>)
 8004ecc:	78c9      	ldrb	r1, [r1, #3]
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	0e1b      	lsrs	r3, r3, #24
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	4a55      	ldr	r2, [pc, #340]	; (800502c <MX_LWIP_Init+0x230>)
 8004ed6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ed8:	4b52      	ldr	r3, [pc, #328]	; (8005024 <MX_LWIP_Init+0x228>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	061a      	lsls	r2, r3, #24
 8004ede:	4b51      	ldr	r3, [pc, #324]	; (8005024 <MX_LWIP_Init+0x228>)
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	4b4f      	ldr	r3, [pc, #316]	; (8005024 <MX_LWIP_Init+0x228>)
 8004ee8:	789b      	ldrb	r3, [r3, #2]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	4313      	orrs	r3, r2
 8004eee:	4a4d      	ldr	r2, [pc, #308]	; (8005024 <MX_LWIP_Init+0x228>)
 8004ef0:	78d2      	ldrb	r2, [r2, #3]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	061a      	lsls	r2, r3, #24
 8004ef6:	4b4b      	ldr	r3, [pc, #300]	; (8005024 <MX_LWIP_Init+0x228>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	0619      	lsls	r1, r3, #24
 8004efc:	4b49      	ldr	r3, [pc, #292]	; (8005024 <MX_LWIP_Init+0x228>)
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	041b      	lsls	r3, r3, #16
 8004f02:	4319      	orrs	r1, r3
 8004f04:	4b47      	ldr	r3, [pc, #284]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f06:	789b      	ldrb	r3, [r3, #2]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	4945      	ldr	r1, [pc, #276]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f0e:	78c9      	ldrb	r1, [r1, #3]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	4b42      	ldr	r3, [pc, #264]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	0619      	lsls	r1, r3, #24
 8004f20:	4b40      	ldr	r3, [pc, #256]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	4319      	orrs	r1, r3
 8004f28:	4b3e      	ldr	r3, [pc, #248]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f2a:	789b      	ldrb	r3, [r3, #2]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	493c      	ldr	r1, [pc, #240]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f32:	78c9      	ldrb	r1, [r1, #3]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	4b39      	ldr	r3, [pc, #228]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	0619      	lsls	r1, r3, #24
 8004f44:	4b37      	ldr	r3, [pc, #220]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	4319      	orrs	r1, r3
 8004f4c:	4b35      	ldr	r3, [pc, #212]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f4e:	789b      	ldrb	r3, [r3, #2]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	430b      	orrs	r3, r1
 8004f54:	4933      	ldr	r1, [pc, #204]	; (8005024 <MX_LWIP_Init+0x228>)
 8004f56:	78c9      	ldrb	r1, [r1, #3]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	0e1b      	lsrs	r3, r3, #24
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	4a34      	ldr	r2, [pc, #208]	; (8005030 <MX_LWIP_Init+0x234>)
 8004f60:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004f62:	4b31      	ldr	r3, [pc, #196]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	061a      	lsls	r2, r3, #24
 8004f68:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004f72:	789b      	ldrb	r3, [r3, #2]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	4313      	orrs	r3, r2
 8004f78:	4a2b      	ldr	r2, [pc, #172]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004f7a:	78d2      	ldrb	r2, [r2, #3]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	061a      	lsls	r2, r3, #24
 8004f80:	4b29      	ldr	r3, [pc, #164]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	0619      	lsls	r1, r3, #24
 8004f86:	4b28      	ldr	r3, [pc, #160]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	4319      	orrs	r1, r3
 8004f8e:	4b26      	ldr	r3, [pc, #152]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004f90:	789b      	ldrb	r3, [r3, #2]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	430b      	orrs	r3, r1
 8004f96:	4924      	ldr	r1, [pc, #144]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004f98:	78c9      	ldrb	r1, [r1, #3]
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	4b20      	ldr	r3, [pc, #128]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	0619      	lsls	r1, r3, #24
 8004faa:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	041b      	lsls	r3, r3, #16
 8004fb0:	4319      	orrs	r1, r3
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004fb4:	789b      	ldrb	r3, [r3, #2]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	491b      	ldr	r1, [pc, #108]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004fbc:	78c9      	ldrb	r1, [r1, #3]
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	0619      	lsls	r1, r3, #24
 8004fce:	4b16      	ldr	r3, [pc, #88]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	4319      	orrs	r1, r3
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	4912      	ldr	r1, [pc, #72]	; (8005028 <MX_LWIP_Init+0x22c>)
 8004fe0:	78c9      	ldrb	r1, [r1, #3]
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	0e1b      	lsrs	r3, r3, #24
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	4a12      	ldr	r2, [pc, #72]	; (8005034 <MX_LWIP_Init+0x238>)
 8004fea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004fee:	9302      	str	r3, [sp, #8]
 8004ff0:	4b12      	ldr	r3, [pc, #72]	; (800503c <MX_LWIP_Init+0x240>)
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <MX_LWIP_Init+0x238>)
 8004ffa:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <MX_LWIP_Init+0x234>)
 8004ffc:	490b      	ldr	r1, [pc, #44]	; (800502c <MX_LWIP_Init+0x230>)
 8004ffe:	4810      	ldr	r0, [pc, #64]	; (8005040 <MX_LWIP_Init+0x244>)
 8005000:	f000 ffb6 	bl	8005f70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005004:	480e      	ldr	r0, [pc, #56]	; (8005040 <MX_LWIP_Init+0x244>)
 8005006:	f001 f88d 	bl	8006124 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800500a:	480d      	ldr	r0, [pc, #52]	; (8005040 <MX_LWIP_Init+0x244>)
 800500c:	f001 f898 	bl	8006140 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005010:	490c      	ldr	r1, [pc, #48]	; (8005044 <MX_LWIP_Init+0x248>)
 8005012:	480b      	ldr	r0, [pc, #44]	; (8005040 <MX_LWIP_Init+0x244>)
 8005014:	f001 f8d8 	bl	80061c8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000350 	.word	0x20000350
 8005024:	20000354 	.word	0x20000354
 8005028:	20000358 	.word	0x20000358
 800502c:	20000344 	.word	0x20000344
 8005030:	20000348 	.word	0x20000348
 8005034:	2000034c 	.word	0x2000034c
 8005038:	08009751 	.word	0x08009751
 800503c:	080055e5 	.word	0x080055e5
 8005040:	20000310 	.word	0x20000310
 8005044:	08005651 	.word	0x08005651

08005048 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800504c:	4803      	ldr	r0, [pc, #12]	; (800505c <MX_LWIP_Process+0x14>)
 800504e:	f000 faa9 	bl	80055a4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005052:	f001 ff1d 	bl	8006e90 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000310 	.word	0x20000310

08005060 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005068:	f107 0320 	add.w	r3, r7, #32
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a46      	ldr	r2, [pc, #280]	; (8005194 <HAL_ETH_MspInit+0x134>)
 800507c:	4293      	cmp	r3, r2
 800507e:	f040 8085 	bne.w	800518c <HAL_ETH_MspInit+0x12c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005082:	4b45      	ldr	r3, [pc, #276]	; (8005198 <HAL_ETH_MspInit+0x138>)
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	4a44      	ldr	r2, [pc, #272]	; (8005198 <HAL_ETH_MspInit+0x138>)
 8005088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800508c:	6153      	str	r3, [r2, #20]
 800508e:	4b42      	ldr	r3, [pc, #264]	; (8005198 <HAL_ETH_MspInit+0x138>)
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <HAL_ETH_MspInit+0x138>)
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4a3e      	ldr	r2, [pc, #248]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a4:	6153      	str	r3, [r2, #20]
 80050a6:	4b3c      	ldr	r3, [pc, #240]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	4b39      	ldr	r3, [pc, #228]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	4a38      	ldr	r2, [pc, #224]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050bc:	6153      	str	r3, [r2, #20]
 80050be:	4b36      	ldr	r3, [pc, #216]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ca:	4b33      	ldr	r3, [pc, #204]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	4a32      	ldr	r2, [pc, #200]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050d0:	f043 0310 	orr.w	r3, r3, #16
 80050d4:	6193      	str	r3, [r2, #24]
 80050d6:	4b30      	ldr	r3, [pc, #192]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e2:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	4a2c      	ldr	r2, [pc, #176]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	6193      	str	r3, [r2, #24]
 80050ee:	4b2a      	ldr	r3, [pc, #168]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050fa:	4b27      	ldr	r3, [pc, #156]	; (8005198 <HAL_ETH_MspInit+0x138>)
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	4a26      	ldr	r2, [pc, #152]	; (8005198 <HAL_ETH_MspInit+0x138>)
 8005100:	f043 0308 	orr.w	r3, r3, #8
 8005104:	6193      	str	r3, [r2, #24]
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_ETH_MspInit+0x138>)
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005112:	2302      	movs	r3, #2
 8005114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005116:	2302      	movs	r3, #2
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800511a:	2303      	movs	r3, #3
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800511e:	f107 0320 	add.w	r3, r7, #32
 8005122:	4619      	mov	r1, r3
 8005124:	481d      	ldr	r0, [pc, #116]	; (800519c <HAL_ETH_MspInit+0x13c>)
 8005126:	f7fe fc6b 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800512a:	2382      	movs	r3, #130	; 0x82
 800512c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005132:	2300      	movs	r3, #0
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005136:	f107 0320 	add.w	r3, r7, #32
 800513a:	4619      	mov	r1, r3
 800513c:	4818      	ldr	r0, [pc, #96]	; (80051a0 <HAL_ETH_MspInit+0x140>)
 800513e:	f7fe fc5f 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005142:	2304      	movs	r3, #4
 8005144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005146:	2302      	movs	r3, #2
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800514a:	2303      	movs	r3, #3
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514e:	f107 0320 	add.w	r3, r7, #32
 8005152:	4619      	mov	r1, r3
 8005154:	4812      	ldr	r0, [pc, #72]	; (80051a0 <HAL_ETH_MspInit+0x140>)
 8005156:	f7fe fc53 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800515a:	2330      	movs	r3, #48	; 0x30
 800515c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005166:	f107 0320 	add.w	r3, r7, #32
 800516a:	4619      	mov	r1, r3
 800516c:	480b      	ldr	r0, [pc, #44]	; (800519c <HAL_ETH_MspInit+0x13c>)
 800516e:	f7fe fc47 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005172:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005178:	2302      	movs	r3, #2
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800517c:	2303      	movs	r3, #3
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005180:	f107 0320 	add.w	r3, r7, #32
 8005184:	4619      	mov	r1, r3
 8005186:	4807      	ldr	r0, [pc, #28]	; (80051a4 <HAL_ETH_MspInit+0x144>)
 8005188:	f7fe fc3a 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800518c:	bf00      	nop
 800518e:	3730      	adds	r7, #48	; 0x30
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40028000 	.word	0x40028000
 8005198:	40021000 	.word	0x40021000
 800519c:	40011000 	.word	0x40011000
 80051a0:	40010800 	.word	0x40010800
 80051a4:	40010c00 	.word	0x40010c00

080051a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80051b4:	4b4d      	ldr	r3, [pc, #308]	; (80052ec <low_level_init+0x144>)
 80051b6:	4a4e      	ldr	r2, [pc, #312]	; (80052f0 <low_level_init+0x148>)
 80051b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 80051ba:	4b4c      	ldr	r3, [pc, #304]	; (80052ec <low_level_init+0x144>)
 80051bc:	2200      	movs	r2, #0
 80051be:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80051c0:	4b4a      	ldr	r3, [pc, #296]	; (80052ec <low_level_init+0x144>)
 80051c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051c6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80051c8:	4b48      	ldr	r3, [pc, #288]	; (80052ec <low_level_init+0x144>)
 80051ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ce:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80051d0:	4b46      	ldr	r3, [pc, #280]	; (80052ec <low_level_init+0x144>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80051d6:	2300      	movs	r3, #0
 80051d8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80051de:	23e1      	movs	r3, #225	; 0xe1
 80051e0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80051e2:	2300      	movs	r3, #0
 80051e4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80051e6:	2300      	movs	r3, #0
 80051e8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80051ea:	2300      	movs	r3, #0
 80051ec:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <low_level_init+0x144>)
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80051f6:	4b3d      	ldr	r3, [pc, #244]	; (80052ec <low_level_init+0x144>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80051fc:	4b3b      	ldr	r3, [pc, #236]	; (80052ec <low_level_init+0x144>)
 80051fe:	2200      	movs	r2, #0
 8005200:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005202:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <low_level_init+0x144>)
 8005204:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005208:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800520a:	4838      	ldr	r0, [pc, #224]	; (80052ec <low_level_init+0x144>)
 800520c:	f7fd fb24 	bl	8002858 <HAL_ETH_Init>
 8005210:	4603      	mov	r3, r0
 8005212:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	b2da      	uxtb	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800522c:	2304      	movs	r3, #4
 800522e:	4a31      	ldr	r2, [pc, #196]	; (80052f4 <low_level_init+0x14c>)
 8005230:	4931      	ldr	r1, [pc, #196]	; (80052f8 <low_level_init+0x150>)
 8005232:	482e      	ldr	r0, [pc, #184]	; (80052ec <low_level_init+0x144>)
 8005234:	f7fd fc7c 	bl	8002b30 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005238:	2308      	movs	r3, #8
 800523a:	4a30      	ldr	r2, [pc, #192]	; (80052fc <low_level_init+0x154>)
 800523c:	4930      	ldr	r1, [pc, #192]	; (8005300 <low_level_init+0x158>)
 800523e:	482b      	ldr	r0, [pc, #172]	; (80052ec <low_level_init+0x144>)
 8005240:	f7fd fcdd 	bl	8002bfe <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2206      	movs	r2, #6
 8005248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <low_level_init+0x144>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <low_level_init+0x144>)
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	785a      	ldrb	r2, [r3, #1]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005264:	4b21      	ldr	r3, [pc, #132]	; (80052ec <low_level_init+0x144>)
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	789a      	ldrb	r2, [r3, #2]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005270:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <low_level_init+0x144>)
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	78da      	ldrb	r2, [r3, #3]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800527c:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <low_level_init+0x144>)
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	791a      	ldrb	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005288:	4b18      	ldr	r3, [pc, #96]	; (80052ec <low_level_init+0x144>)
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	795a      	ldrb	r2, [r3, #5]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800529a:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80052a2:	f043 030a 	orr.w	r3, r3, #10
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80052ae:	480f      	ldr	r0, [pc, #60]	; (80052ec <low_level_init+0x144>)
 80052b0:	f7fd ff49 	bl	8003146 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80052b4:	f107 0310 	add.w	r3, r7, #16
 80052b8:	461a      	mov	r2, r3
 80052ba:	210b      	movs	r1, #11
 80052bc:	480b      	ldr	r0, [pc, #44]	; (80052ec <low_level_init+0x144>)
 80052be:	f7fd fe74 	bl	8002faa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f043 030b 	orr.w	r3, r3, #11
 80052c8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	461a      	mov	r2, r3
 80052ce:	210b      	movs	r1, #11
 80052d0:	4806      	ldr	r0, [pc, #24]	; (80052ec <low_level_init+0x144>)
 80052d2:	f7fd fed2 	bl	800307a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	461a      	mov	r2, r3
 80052dc:	210b      	movs	r1, #11
 80052de:	4803      	ldr	r0, [pc, #12]	; (80052ec <low_level_init+0x144>)
 80052e0:	f7fd fe63 	bl	8002faa <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20004b8c 	.word	0x20004b8c
 80052f0:	40028000 	.word	0x40028000
 80052f4:	200033bc 	.word	0x200033bc
 80052f8:	200003dc 	.word	0x200003dc
 80052fc:	2000041c 	.word	0x2000041c
 8005300:	2000035c 	.word	0x2000035c

08005304 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08a      	sub	sp, #40	; 0x28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800530e:	4b4b      	ldr	r3, [pc, #300]	; (800543c <low_level_output+0x138>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005326:	4b45      	ldr	r3, [pc, #276]	; (800543c <low_level_output+0x138>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	623b      	str	r3, [r7, #32]
 8005334:	e05a      	b.n	80053ec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	da03      	bge.n	8005346 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800533e:	23f8      	movs	r3, #248	; 0xf8
 8005340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005344:	e05c      	b.n	8005400 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	895b      	ldrh	r3, [r3, #10]
 800534a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005350:	e02f      	b.n	80053b2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	18d0      	adds	r0, r2, r3
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	18d1      	adds	r1, r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005366:	3304      	adds	r3, #4
 8005368:	461a      	mov	r2, r3
 800536a:	f004 fc6c 	bl	8009c46 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	da03      	bge.n	8005384 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800537c:	23f8      	movs	r3, #248	; 0xf8
 800537e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005382:	e03d      	b.n	8005400 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005394:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053a0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053ac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4413      	add	r3, r2
 80053b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80053bc:	4293      	cmp	r3, r2
 80053be:	d8c8      	bhi.n	8005352 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	18d0      	adds	r0, r2, r3
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4413      	add	r3, r2
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4619      	mov	r1, r3
 80053d2:	f004 fc38 	bl	8009c46 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	623b      	str	r3, [r7, #32]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1a1      	bne.n	8005336 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80053f2:	6979      	ldr	r1, [r7, #20]
 80053f4:	4811      	ldr	r0, [pc, #68]	; (800543c <low_level_output+0x138>)
 80053f6:	f7fd fc6d 	bl	8002cd4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <low_level_output+0x138>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005412:	4b0a      	ldr	r3, [pc, #40]	; (800543c <low_level_output+0x138>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541a:	461a      	mov	r2, r3
 800541c:	2320      	movs	r3, #32
 800541e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <low_level_output+0x138>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800542e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005432:	4618      	mov	r0, r3
 8005434:	3728      	adds	r7, #40	; 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20004b8c 	.word	0x20004b8c

08005440 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	; 0x30
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005464:	484e      	ldr	r0, [pc, #312]	; (80055a0 <low_level_input+0x160>)
 8005466:	f7fd fd1d 	bl	8002ea4 <HAL_ETH_GetReceivedFrame>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <low_level_input+0x34>

    return NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	e090      	b.n	8005596 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005474:	4b4a      	ldr	r3, [pc, #296]	; (80055a0 <low_level_input+0x160>)
 8005476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005478:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800547a:	4b49      	ldr	r3, [pc, #292]	; (80055a0 <low_level_input+0x160>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d006      	beq.n	8005494 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	2203      	movs	r2, #3
 800548a:	4619      	mov	r1, r3
 800548c:	2004      	movs	r0, #4
 800548e:	f000 feab 	bl	80061e8 <pbuf_alloc>
 8005492:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04b      	beq.n	8005532 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800549a:	4b41      	ldr	r3, [pc, #260]	; (80055a0 <low_level_input+0x160>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a8:	e040      	b.n	800552c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	895b      	ldrh	r3, [r3, #10]
 80054ae:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80054b4:	e021      	b.n	80054fa <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	18d0      	adds	r0, r2, r3
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	18d1      	adds	r1, r2, r3
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80054ca:	3304      	adds	r3, #4
 80054cc:	461a      	mov	r2, r3
 80054ce:	f004 fbba 	bl	8009c46 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80054e8:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80054f4:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005504:	4293      	cmp	r3, r2
 8005506:	d8d6      	bhi.n	80054b6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	18d0      	adds	r0, r2, r3
 8005510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4619      	mov	r1, r3
 800551a:	f004 fb94 	bl	8009c46 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1bb      	bne.n	80054aa <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005532:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <low_level_input+0x160>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	e00b      	b.n	8005556 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3301      	adds	r3, #1
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <low_level_input+0x160>)
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	429a      	cmp	r2, r3
 800555e:	d3ee      	bcc.n	800553e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <low_level_input+0x160>)
 8005562:	2200      	movs	r2, #0
 8005564:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005566:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <low_level_input+0x160>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005578:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <low_level_input+0x160>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005580:	461a      	mov	r2, r3
 8005582:	2380      	movs	r3, #128	; 0x80
 8005584:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <low_level_input+0x160>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	6093      	str	r3, [r2, #8]
  }
  return p;
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005596:	4618      	mov	r0, r3
 8005598:	3730      	adds	r7, #48	; 0x30
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20004b8c 	.word	0x20004b8c

080055a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ff47 	bl	8005440 <low_level_input>
 80055b2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d010      	beq.n	80055dc <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	4798      	blx	r3
 80055c4:	4603      	mov	r3, r0
 80055c6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80055c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f001 f97d 	bl	80068d0 <pbuf_free>
    p = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e000      	b.n	80055de <ethernetif_input+0x3a>
  if (p == NULL) return;
 80055dc:	bf00      	nop
  }
}
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <ethernetif_init+0x1c>
 80055f2:	4b0e      	ldr	r3, [pc, #56]	; (800562c <ethernetif_init+0x48>)
 80055f4:	f240 220e 	movw	r2, #526	; 0x20e
 80055f8:	490d      	ldr	r1, [pc, #52]	; (8005630 <ethernetif_init+0x4c>)
 80055fa:	480e      	ldr	r0, [pc, #56]	; (8005634 <ethernetif_init+0x50>)
 80055fc:	f004 fa48 	bl	8009a90 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2273      	movs	r2, #115	; 0x73
 8005604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2274      	movs	r2, #116	; 0x74
 800560c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a09      	ldr	r2, [pc, #36]	; (8005638 <ethernetif_init+0x54>)
 8005614:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a08      	ldr	r2, [pc, #32]	; (800563c <ethernetif_init+0x58>)
 800561a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff fdc3 	bl	80051a8 <low_level_init>

  return ERR_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	0800a840 	.word	0x0800a840
 8005630:	0800a85c 	.word	0x0800a85c
 8005634:	0800a86c 	.word	0x0800a86c
 8005638:	08007d4d 	.word	0x08007d4d
 800563c:	08005305 	.word	0x08005305

08005640 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005644:	f7fc fa58 	bl	8001af8 <HAL_GetTick>
 8005648:	4603      	mov	r3, r0
}
 800564a:	4618      	mov	r0, r3
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d05d      	beq.n	800572e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005672:	4b34      	ldr	r3, [pc, #208]	; (8005744 <ethernetif_update_config+0xf4>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d03f      	beq.n	80056fa <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800567a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800567e:	2100      	movs	r1, #0
 8005680:	4830      	ldr	r0, [pc, #192]	; (8005744 <ethernetif_update_config+0xf4>)
 8005682:	f7fd fcfa 	bl	800307a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005686:	f7fc fa37 	bl	8001af8 <HAL_GetTick>
 800568a:	4603      	mov	r3, r0
 800568c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800568e:	f107 0308 	add.w	r3, r7, #8
 8005692:	461a      	mov	r2, r3
 8005694:	2101      	movs	r1, #1
 8005696:	482b      	ldr	r0, [pc, #172]	; (8005744 <ethernetif_update_config+0xf4>)
 8005698:	f7fd fc87 	bl	8002faa <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800569c:	f7fc fa2c 	bl	8001af8 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056aa:	d828      	bhi.n	80056fe <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0eb      	beq.n	800568e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80056b6:	f107 0308 	add.w	r3, r7, #8
 80056ba:	461a      	mov	r2, r3
 80056bc:	2110      	movs	r1, #16
 80056be:	4821      	ldr	r0, [pc, #132]	; (8005744 <ethernetif_update_config+0xf4>)
 80056c0:	f7fd fc73 	bl	8002faa <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d004      	beq.n	80056d8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <ethernetif_update_config+0xf4>)
 80056d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	e002      	b.n	80056de <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <ethernetif_update_config+0xf4>)
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80056e8:	4b16      	ldr	r3, [pc, #88]	; (8005744 <ethernetif_update_config+0xf4>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	609a      	str	r2, [r3, #8]
 80056ee:	e016      	b.n	800571e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80056f0:	4b14      	ldr	r3, [pc, #80]	; (8005744 <ethernetif_update_config+0xf4>)
 80056f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056f6:	609a      	str	r2, [r3, #8]
 80056f8:	e011      	b.n	800571e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <ethernetif_update_config+0xb0>
          goto error;
 80056fe:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <ethernetif_update_config+0xf4>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	08db      	lsrs	r3, r3, #3
 8005706:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <ethernetif_update_config+0xf4>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005710:	4313      	orrs	r3, r2
 8005712:	b29b      	uxth	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	2100      	movs	r1, #0
 8005718:	480a      	ldr	r0, [pc, #40]	; (8005744 <ethernetif_update_config+0xf4>)
 800571a:	f7fd fcae 	bl	800307a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800571e:	2100      	movs	r1, #0
 8005720:	4808      	ldr	r0, [pc, #32]	; (8005744 <ethernetif_update_config+0xf4>)
 8005722:	f7fd fd6f 	bl	8003204 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005726:	4807      	ldr	r0, [pc, #28]	; (8005744 <ethernetif_update_config+0xf4>)
 8005728:	f7fd fd0d 	bl	8003146 <HAL_ETH_Start>
 800572c:	e002      	b.n	8005734 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800572e:	4805      	ldr	r0, [pc, #20]	; (8005744 <ethernetif_update_config+0xf4>)
 8005730:	f7fd fd38 	bl	80031a4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f807 	bl	8005748 <ethernetif_notify_conn_changed>
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20004b8c 	.word	0x20004b8c

08005748 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	bc80      	pop	{r7}
 8005758:	4770      	bx	lr

0800575a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	4603      	mov	r3, r0
 8005762:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	ba5b      	rev16	r3, r3
 8005768:	b29b      	uxth	r3, r3
}
 800576a:	4618      	mov	r0, r3
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800577e:	f000 f8a5 	bl	80058cc <mem_init>
  memp_init();
 8005782:	f000 fb35 	bl	8005df0 <memp_init>
  pbuf_init();
  netif_init();
 8005786:	f000 fbed 	bl	8005f64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800578a:	f001 fbcb 	bl	8006f24 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800578e:	f001 fab3 	bl	8006cf8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80057a4:	4b40      	ldr	r3, [pc, #256]	; (80058a8 <plug_holes+0x10c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d206      	bcs.n	80057bc <plug_holes+0x20>
 80057ae:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <plug_holes+0x110>)
 80057b0:	f240 125d 	movw	r2, #349	; 0x15d
 80057b4:	493e      	ldr	r1, [pc, #248]	; (80058b0 <plug_holes+0x114>)
 80057b6:	483f      	ldr	r0, [pc, #252]	; (80058b4 <plug_holes+0x118>)
 80057b8:	f004 f96a 	bl	8009a90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80057bc:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <plug_holes+0x11c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d306      	bcc.n	80057d4 <plug_holes+0x38>
 80057c6:	4b39      	ldr	r3, [pc, #228]	; (80058ac <plug_holes+0x110>)
 80057c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80057cc:	493b      	ldr	r1, [pc, #236]	; (80058bc <plug_holes+0x120>)
 80057ce:	4839      	ldr	r0, [pc, #228]	; (80058b4 <plug_holes+0x118>)
 80057d0:	f004 f95e 	bl	8009a90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	791b      	ldrb	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <plug_holes+0x4e>
 80057dc:	4b33      	ldr	r3, [pc, #204]	; (80058ac <plug_holes+0x110>)
 80057de:	f240 125f 	movw	r2, #351	; 0x15f
 80057e2:	4937      	ldr	r1, [pc, #220]	; (80058c0 <plug_holes+0x124>)
 80057e4:	4833      	ldr	r0, [pc, #204]	; (80058b4 <plug_holes+0x118>)
 80057e6:	f004 f953 	bl	8009a90 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057f2:	d906      	bls.n	8005802 <plug_holes+0x66>
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <plug_holes+0x110>)
 80057f6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80057fa:	4932      	ldr	r1, [pc, #200]	; (80058c4 <plug_holes+0x128>)
 80057fc:	482d      	ldr	r0, [pc, #180]	; (80058b4 <plug_holes+0x118>)
 80057fe:	f004 f947 	bl	8009a90 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8005802:	4b29      	ldr	r3, [pc, #164]	; (80058a8 <plug_holes+0x10c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	8812      	ldrh	r2, [r2, #0]
 800580a:	4413      	add	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	429a      	cmp	r2, r3
 8005814:	d01f      	beq.n	8005856 <plug_holes+0xba>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	791b      	ldrb	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11b      	bne.n	8005856 <plug_holes+0xba>
 800581e:	4b26      	ldr	r3, [pc, #152]	; (80058b8 <plug_holes+0x11c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	429a      	cmp	r2, r3
 8005826:	d016      	beq.n	8005856 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005828:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <plug_holes+0x12c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	429a      	cmp	r2, r3
 8005830:	d102      	bne.n	8005838 <plug_holes+0x9c>
      lfree = mem;
 8005832:	4a25      	ldr	r2, [pc, #148]	; (80058c8 <plug_holes+0x12c>)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005840:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <plug_holes+0x10c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	1ad1      	subs	r1, r2, r3
 8005848:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <plug_holes+0x10c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	8812      	ldrh	r2, [r2, #0]
 8005850:	4413      	add	r3, r2
 8005852:	b28a      	uxth	r2, r1
 8005854:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <plug_holes+0x10c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	8852      	ldrh	r2, [r2, #2]
 800585e:	4413      	add	r3, r2
 8005860:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d01a      	beq.n	80058a0 <plug_holes+0x104>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	791b      	ldrb	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d116      	bne.n	80058a0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <plug_holes+0x12c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d102      	bne.n	8005882 <plug_holes+0xe6>
      lfree = pmem;
 800587c:	4a12      	ldr	r2, [pc, #72]	; (80058c8 <plug_holes+0x12c>)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800588a:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <plug_holes+0x10c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	1ad1      	subs	r1, r2, r3
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <plug_holes+0x10c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	8812      	ldrh	r2, [r2, #0]
 800589a:	4413      	add	r3, r2
 800589c:	b28a      	uxth	r2, r1
 800589e:	805a      	strh	r2, [r3, #2]
  }
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20005240 	.word	0x20005240
 80058ac:	0800a894 	.word	0x0800a894
 80058b0:	0800a8c4 	.word	0x0800a8c4
 80058b4:	0800a8dc 	.word	0x0800a8dc
 80058b8:	20005244 	.word	0x20005244
 80058bc:	0800a904 	.word	0x0800a904
 80058c0:	0800a920 	.word	0x0800a920
 80058c4:	0800a93c 	.word	0x0800a93c
 80058c8:	20005248 	.word	0x20005248

080058cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80058d2:	4b18      	ldr	r3, [pc, #96]	; (8005934 <mem_init+0x68>)
 80058d4:	3303      	adds	r3, #3
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	461a      	mov	r2, r3
 80058dc:	4b16      	ldr	r3, [pc, #88]	; (8005938 <mem_init+0x6c>)
 80058de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80058e0:	4b15      	ldr	r3, [pc, #84]	; (8005938 <mem_init+0x6c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80058ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80058fa:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <mem_init+0x6c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8005902:	4a0e      	ldr	r2, [pc, #56]	; (800593c <mem_init+0x70>)
 8005904:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005906:	4b0d      	ldr	r3, [pc, #52]	; (800593c <mem_init+0x70>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2201      	movs	r2, #1
 800590c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <mem_init+0x70>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005916:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005918:	4b08      	ldr	r3, [pc, #32]	; (800593c <mem_init+0x70>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005920:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <mem_init+0x6c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a06      	ldr	r2, [pc, #24]	; (8005940 <mem_init+0x74>)
 8005928:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr
 8005934:	20004bec 	.word	0x20004bec
 8005938:	20005240 	.word	0x20005240
 800593c:	20005244 	.word	0x20005244
 8005940:	20005248 	.word	0x20005248

08005944 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d043      	beq.n	80059da <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d006      	beq.n	800596a <mem_free+0x26>
 800595c:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <mem_free+0xa4>)
 800595e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8005962:	4922      	ldr	r1, [pc, #136]	; (80059ec <mem_free+0xa8>)
 8005964:	4822      	ldr	r0, [pc, #136]	; (80059f0 <mem_free+0xac>)
 8005966:	f004 f893 	bl	8009a90 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800596a:	4b22      	ldr	r3, [pc, #136]	; (80059f4 <mem_free+0xb0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d304      	bcc.n	800597e <mem_free+0x3a>
 8005974:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <mem_free+0xb4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d306      	bcc.n	800598c <mem_free+0x48>
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <mem_free+0xa4>)
 8005980:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8005984:	491d      	ldr	r1, [pc, #116]	; (80059fc <mem_free+0xb8>)
 8005986:	481a      	ldr	r0, [pc, #104]	; (80059f0 <mem_free+0xac>)
 8005988:	f004 f882 	bl	8009a90 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800598c:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <mem_free+0xb0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d323      	bcc.n	80059de <mem_free+0x9a>
 8005996:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <mem_free+0xb4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d21e      	bcs.n	80059de <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3b08      	subs	r3, #8
 80059a4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	791b      	ldrb	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <mem_free+0x78>
 80059ae:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <mem_free+0xa4>)
 80059b0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80059b4:	4912      	ldr	r1, [pc, #72]	; (8005a00 <mem_free+0xbc>)
 80059b6:	480e      	ldr	r0, [pc, #56]	; (80059f0 <mem_free+0xac>)
 80059b8:	f004 f86a 	bl	8009a90 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <mem_free+0xc0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d202      	bcs.n	80059d2 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80059cc:	4a0d      	ldr	r2, [pc, #52]	; (8005a04 <mem_free+0xc0>)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fee2 	bl	800579c <plug_holes>
 80059d8:	e002      	b.n	80059e0 <mem_free+0x9c>
    return;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <mem_free+0x9c>
    return;
 80059de:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	0800a894 	.word	0x0800a894
 80059ec:	0800a968 	.word	0x0800a968
 80059f0:	0800a8dc 	.word	0x0800a8dc
 80059f4:	20005240 	.word	0x20005240
 80059f8:	20005244 	.word	0x20005244
 80059fc:	0800a98c 	.word	0x0800a98c
 8005a00:	0800a9a4 	.word	0x0800a9a4
 8005a04:	20005248 	.word	0x20005248

08005a08 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005a14:	887b      	ldrh	r3, [r7, #2]
 8005a16:	3303      	adds	r3, #3
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	2b0b      	cmp	r3, #11
 8005a24:	d801      	bhi.n	8005a2a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005a26:	230c      	movs	r3, #12
 8005a28:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a30:	d901      	bls.n	8005a36 <mem_trim+0x2e>
    return NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e0b1      	b.n	8005b9a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005a36:	4b5b      	ldr	r3, [pc, #364]	; (8005ba4 <mem_trim+0x19c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d304      	bcc.n	8005a4a <mem_trim+0x42>
 8005a40:	4b59      	ldr	r3, [pc, #356]	; (8005ba8 <mem_trim+0x1a0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d306      	bcc.n	8005a58 <mem_trim+0x50>
 8005a4a:	4b58      	ldr	r3, [pc, #352]	; (8005bac <mem_trim+0x1a4>)
 8005a4c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005a50:	4957      	ldr	r1, [pc, #348]	; (8005bb0 <mem_trim+0x1a8>)
 8005a52:	4858      	ldr	r0, [pc, #352]	; (8005bb4 <mem_trim+0x1ac>)
 8005a54:	f004 f81c 	bl	8009a90 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005a58:	4b52      	ldr	r3, [pc, #328]	; (8005ba4 <mem_trim+0x19c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d304      	bcc.n	8005a6c <mem_trim+0x64>
 8005a62:	4b51      	ldr	r3, [pc, #324]	; (8005ba8 <mem_trim+0x1a0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d301      	bcc.n	8005a70 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	e094      	b.n	8005b9a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3b08      	subs	r3, #8
 8005a74:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005a76:	4b4b      	ldr	r3, [pc, #300]	; (8005ba4 <mem_trim+0x19c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	881a      	ldrh	r2, [r3, #0]
 8005a84:	8a7b      	ldrh	r3, [r7, #18]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b08      	subs	r3, #8
 8005a8c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005a8e:	887a      	ldrh	r2, [r7, #2]
 8005a90:	8a3b      	ldrh	r3, [r7, #16]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d906      	bls.n	8005aa4 <mem_trim+0x9c>
 8005a96:	4b45      	ldr	r3, [pc, #276]	; (8005bac <mem_trim+0x1a4>)
 8005a98:	f240 2206 	movw	r2, #518	; 0x206
 8005a9c:	4946      	ldr	r1, [pc, #280]	; (8005bb8 <mem_trim+0x1b0>)
 8005a9e:	4845      	ldr	r0, [pc, #276]	; (8005bb4 <mem_trim+0x1ac>)
 8005aa0:	f003 fff6 	bl	8009a90 <iprintf>
  if (newsize > size) {
 8005aa4:	887a      	ldrh	r2, [r7, #2]
 8005aa6:	8a3b      	ldrh	r3, [r7, #16]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d901      	bls.n	8005ab0 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e074      	b.n	8005b9a <mem_trim+0x192>
  }
  if (newsize == size) {
 8005ab0:	887a      	ldrh	r2, [r7, #2]
 8005ab2:	8a3b      	ldrh	r3, [r7, #16]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d101      	bne.n	8005abc <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	e06e      	b.n	8005b9a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8005abc:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <mem_trim+0x19c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	8812      	ldrh	r2, [r2, #0]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	791b      	ldrb	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d131      	bne.n	8005b34 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005ad6:	8a7a      	ldrh	r2, [r7, #18]
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	4413      	add	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3308      	adds	r3, #8
 8005ae0:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <mem_trim+0x1b4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d105      	bne.n	8005af8 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8005aec:	4b2d      	ldr	r3, [pc, #180]	; (8005ba4 <mem_trim+0x19c>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	897b      	ldrh	r3, [r7, #10]
 8005af2:	4413      	add	r3, r2
 8005af4:	4a31      	ldr	r2, [pc, #196]	; (8005bbc <mem_trim+0x1b4>)
 8005af6:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005af8:	4b2a      	ldr	r3, [pc, #168]	; (8005ba4 <mem_trim+0x19c>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	897b      	ldrh	r3, [r7, #10]
 8005afe:	4413      	add	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	893a      	ldrh	r2, [r7, #8]
 8005b0c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8a7a      	ldrh	r2, [r7, #18]
 8005b12:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	897a      	ldrh	r2, [r7, #10]
 8005b18:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b22:	d039      	beq.n	8005b98 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <mem_trim+0x19c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	8812      	ldrh	r2, [r2, #0]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	897a      	ldrh	r2, [r7, #10]
 8005b30:	805a      	strh	r2, [r3, #2]
 8005b32:	e031      	b.n	8005b98 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005b34:	887b      	ldrh	r3, [r7, #2]
 8005b36:	f103 0214 	add.w	r2, r3, #20
 8005b3a:	8a3b      	ldrh	r3, [r7, #16]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d82b      	bhi.n	8005b98 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005b40:	8a7a      	ldrh	r2, [r7, #18]
 8005b42:	887b      	ldrh	r3, [r7, #2]
 8005b44:	4413      	add	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3308      	adds	r3, #8
 8005b4a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005b4c:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <mem_trim+0x19c>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	897b      	ldrh	r3, [r7, #10]
 8005b52:	4413      	add	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8005b56:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <mem_trim+0x1b4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d202      	bcs.n	8005b66 <mem_trim+0x15e>
      lfree = mem2;
 8005b60:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <mem_trim+0x1b4>)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8a7a      	ldrh	r2, [r7, #18]
 8005b78:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	897a      	ldrh	r2, [r7, #10]
 8005b7e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b88:	d006      	beq.n	8005b98 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <mem_trim+0x19c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	8812      	ldrh	r2, [r2, #0]
 8005b92:	4413      	add	r3, r2
 8005b94:	897a      	ldrh	r2, [r7, #10]
 8005b96:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005b98:	687b      	ldr	r3, [r7, #4]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20005240 	.word	0x20005240
 8005ba8:	20005244 	.word	0x20005244
 8005bac:	0800a894 	.word	0x0800a894
 8005bb0:	0800a9b8 	.word	0x0800a9b8
 8005bb4:	0800a8dc 	.word	0x0800a8dc
 8005bb8:	0800a9d0 	.word	0x0800a9d0
 8005bbc:	20005248 	.word	0x20005248

08005bc0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <mem_malloc+0x14>
    return NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e0c7      	b.n	8005d64 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	3303      	adds	r3, #3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	2b0b      	cmp	r3, #11
 8005be4:	d801      	bhi.n	8005bea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005be6:	230c      	movs	r3, #12
 8005be8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005bf0:	d901      	bls.n	8005bf6 <mem_malloc+0x36>
    return NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e0b6      	b.n	8005d64 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005bf6:	4b5d      	ldr	r3, [pc, #372]	; (8005d6c <mem_malloc+0x1ac>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b5d      	ldr	r3, [pc, #372]	; (8005d70 <mem_malloc+0x1b0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	83fb      	strh	r3, [r7, #30]
 8005c02:	e0a7      	b.n	8005d54 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8005c04:	4b5a      	ldr	r3, [pc, #360]	; (8005d70 <mem_malloc+0x1b0>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	8bfb      	ldrh	r3, [r7, #30]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	791b      	ldrb	r3, [r3, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f040 8098 	bne.w	8005d48 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	8bfb      	ldrh	r3, [r7, #30]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f1a3 0208 	sub.w	r2, r3, #8
 8005c26:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	f0c0 808d 	bcc.w	8005d48 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	8bfb      	ldrh	r3, [r7, #30]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f1a3 0208 	sub.w	r2, r3, #8
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	3314      	adds	r3, #20
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d327      	bcc.n	8005c94 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8005c44:	8bfa      	ldrh	r2, [r7, #30]
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	4413      	add	r3, r2
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8005c50:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <mem_malloc+0x1b0>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	8a7b      	ldrh	r3, [r7, #18]
 8005c56:	4413      	add	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	881a      	ldrh	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8bfa      	ldrh	r2, [r7, #30]
 8005c6c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	8a7a      	ldrh	r2, [r7, #18]
 8005c72:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2201      	movs	r2, #1
 8005c78:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c82:	d00a      	beq.n	8005c9a <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005c84:	4b3a      	ldr	r3, [pc, #232]	; (8005d70 <mem_malloc+0x1b0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	8812      	ldrh	r2, [r2, #0]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	8a7a      	ldrh	r2, [r7, #18]
 8005c90:	805a      	strh	r2, [r3, #2]
 8005c92:	e002      	b.n	8005c9a <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2201      	movs	r2, #1
 8005c98:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005c9a:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <mem_malloc+0x1ac>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d127      	bne.n	8005cf4 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8005ca4:	4b31      	ldr	r3, [pc, #196]	; (8005d6c <mem_malloc+0x1ac>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005caa:	e005      	b.n	8005cb8 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8005cac:	4b30      	ldr	r3, [pc, #192]	; (8005d70 <mem_malloc+0x1b0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	8812      	ldrh	r2, [r2, #0]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	791b      	ldrb	r3, [r3, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <mem_malloc+0x10a>
 8005cc0:	4b2c      	ldr	r3, [pc, #176]	; (8005d74 <mem_malloc+0x1b4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d1f0      	bne.n	8005cac <mem_malloc+0xec>
          }
          lfree = cur;
 8005cca:	4a28      	ldr	r2, [pc, #160]	; (8005d6c <mem_malloc+0x1ac>)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005cd0:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <mem_malloc+0x1ac>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <mem_malloc+0x1b4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d00b      	beq.n	8005cf4 <mem_malloc+0x134>
 8005cdc:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <mem_malloc+0x1ac>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	791b      	ldrb	r3, [r3, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d006      	beq.n	8005cf4 <mem_malloc+0x134>
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <mem_malloc+0x1b8>)
 8005ce8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005cec:	4923      	ldr	r1, [pc, #140]	; (8005d7c <mem_malloc+0x1bc>)
 8005cee:	4824      	ldr	r0, [pc, #144]	; (8005d80 <mem_malloc+0x1c0>)
 8005cf0:	f003 fece 	bl	8009a90 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005cf4:	88fa      	ldrh	r2, [r7, #6]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <mem_malloc+0x1b4>)
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d906      	bls.n	8005d12 <mem_malloc+0x152>
 8005d04:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <mem_malloc+0x1b8>)
 8005d06:	f240 22d3 	movw	r2, #723	; 0x2d3
 8005d0a:	491e      	ldr	r1, [pc, #120]	; (8005d84 <mem_malloc+0x1c4>)
 8005d0c:	481c      	ldr	r0, [pc, #112]	; (8005d80 <mem_malloc+0x1c0>)
 8005d0e:	f003 febf 	bl	8009a90 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <mem_malloc+0x16a>
 8005d1c:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <mem_malloc+0x1b8>)
 8005d1e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8005d22:	4919      	ldr	r1, [pc, #100]	; (8005d88 <mem_malloc+0x1c8>)
 8005d24:	4816      	ldr	r0, [pc, #88]	; (8005d80 <mem_malloc+0x1c0>)
 8005d26:	f003 feb3 	bl	8009a90 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d006      	beq.n	8005d42 <mem_malloc+0x182>
 8005d34:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <mem_malloc+0x1b8>)
 8005d36:	f240 22d7 	movw	r2, #727	; 0x2d7
 8005d3a:	4914      	ldr	r1, [pc, #80]	; (8005d8c <mem_malloc+0x1cc>)
 8005d3c:	4810      	ldr	r0, [pc, #64]	; (8005d80 <mem_malloc+0x1c0>)
 8005d3e:	f003 fea7 	bl	8009a90 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	3308      	adds	r3, #8
 8005d46:	e00d      	b.n	8005d64 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8005d48:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <mem_malloc+0x1b0>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	8bfb      	ldrh	r3, [r7, #30]
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005d54:	8bfa      	ldrh	r2, [r7, #30]
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f4ff af51 	bcc.w	8005c04 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20005248 	.word	0x20005248
 8005d70:	20005240 	.word	0x20005240
 8005d74:	20005244 	.word	0x20005244
 8005d78:	0800a894 	.word	0x0800a894
 8005d7c:	0800a9f0 	.word	0x0800a9f0
 8005d80:	0800a8dc 	.word	0x0800a8dc
 8005d84:	0800aa0c 	.word	0x0800aa0c
 8005d88:	0800aa3c 	.word	0x0800aa3c
 8005d8c:	0800aa6c 	.word	0x0800aa6c

08005d90 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	3303      	adds	r3, #3
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e011      	b.n	8005dd6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	885b      	ldrh	r3, [r3, #2]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4293      	cmp	r3, r2
 8005de0:	dbe7      	blt.n	8005db2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
	...

08005df0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005df6:	2300      	movs	r3, #0
 8005df8:	80fb      	strh	r3, [r7, #6]
 8005dfa:	e009      	b.n	8005e10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <memp_init+0x30>)
 8005e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff ffc3 	bl	8005d90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	80fb      	strh	r3, [r7, #6]
 8005e10:	88fb      	ldrh	r3, [r7, #6]
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	d9f2      	bls.n	8005dfc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	0800b930 	.word	0x0800b930

08005e24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d012      	beq.n	8005e60 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d006      	beq.n	8005e5c <do_memp_malloc_pool+0x38>
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <do_memp_malloc_pool+0x48>)
 8005e50:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8005e54:	4906      	ldr	r1, [pc, #24]	; (8005e70 <do_memp_malloc_pool+0x4c>)
 8005e56:	4807      	ldr	r0, [pc, #28]	; (8005e74 <do_memp_malloc_pool+0x50>)
 8005e58:	f003 fe1a 	bl	8009a90 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	e000      	b.n	8005e62 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	0800aa90 	.word	0x0800aa90
 8005e70:	0800aac0 	.word	0x0800aac0
 8005e74:	0800aae4 	.word	0x0800aae4

08005e78 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	2b05      	cmp	r3, #5
 8005e86:	d908      	bls.n	8005e9a <memp_malloc+0x22>
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <memp_malloc+0x3c>)
 8005e8a:	f240 1287 	movw	r2, #391	; 0x187
 8005e8e:	490a      	ldr	r1, [pc, #40]	; (8005eb8 <memp_malloc+0x40>)
 8005e90:	480a      	ldr	r0, [pc, #40]	; (8005ebc <memp_malloc+0x44>)
 8005e92:	f003 fdfd 	bl	8009a90 <iprintf>
 8005e96:	2300      	movs	r3, #0
 8005e98:	e008      	b.n	8005eac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <memp_malloc+0x48>)
 8005e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff ffbe 	bl	8005e24 <do_memp_malloc_pool>
 8005ea8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	0800aa90 	.word	0x0800aa90
 8005eb8:	0800ab20 	.word	0x0800ab20
 8005ebc:	0800aae4 	.word	0x0800aae4
 8005ec0:	0800b930 	.word	0x0800b930

08005ec4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d006      	beq.n	8005ee6 <do_memp_free_pool+0x22>
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <do_memp_free_pool+0x40>)
 8005eda:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005ede:	490a      	ldr	r1, [pc, #40]	; (8005f08 <do_memp_free_pool+0x44>)
 8005ee0:	480a      	ldr	r0, [pc, #40]	; (8005f0c <do_memp_free_pool+0x48>)
 8005ee2:	f003 fdd5 	bl	8009a90 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	0800aa90 	.word	0x0800aa90
 8005f08:	0800ab40 	.word	0x0800ab40
 8005f0c:	0800aae4 	.word	0x0800aae4

08005f10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d907      	bls.n	8005f32 <memp_free+0x22>
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <memp_free+0x44>)
 8005f24:	f240 12db 	movw	r2, #475	; 0x1db
 8005f28:	490b      	ldr	r1, [pc, #44]	; (8005f58 <memp_free+0x48>)
 8005f2a:	480c      	ldr	r0, [pc, #48]	; (8005f5c <memp_free+0x4c>)
 8005f2c:	f003 fdb0 	bl	8009a90 <iprintf>
 8005f30:	e00c      	b.n	8005f4c <memp_free+0x3c>

  if (mem == NULL) {
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <memp_free+0x50>)
 8005f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff ffbe 	bl	8005ec4 <do_memp_free_pool>
 8005f48:	e000      	b.n	8005f4c <memp_free+0x3c>
    return;
 8005f4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	0800aa90 	.word	0x0800aa90
 8005f58:	0800ab60 	.word	0x0800ab60
 8005f5c:	0800aae4 	.word	0x0800aae4
 8005f60:	0800b930 	.word	0x0800b930

08005f64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr

08005f70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <netif_add+0x20>
 8005f84:	4b21      	ldr	r3, [pc, #132]	; (800600c <netif_add+0x9c>)
 8005f86:	22fb      	movs	r2, #251	; 0xfb
 8005f88:	4921      	ldr	r1, [pc, #132]	; (8006010 <netif_add+0xa0>)
 8005f8a:	4822      	ldr	r0, [pc, #136]	; (8006014 <netif_add+0xa4>)
 8005f8c:	f003 fd80 	bl	8009a90 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2203      	movs	r2, #3
 8005fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8005fbe:	4b16      	ldr	r3, [pc, #88]	; (8006018 <netif_add+0xa8>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	b2d1      	uxtb	r1, r2
 8005fc6:	4a14      	ldr	r2, [pc, #80]	; (8006018 <netif_add+0xa8>)
 8005fc8:	7011      	strb	r1, [r2, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f81f 	bl	8006020 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	4798      	blx	r3
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <netif_add+0x82>
    return NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e007      	b.n	8006002 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	; (800601c <netif_add+0xac>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005ffa:	4a08      	ldr	r2, [pc, #32]	; (800601c <netif_add+0xac>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8006000:	68fb      	ldr	r3, [r7, #12]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	0800ab7c 	.word	0x0800ab7c
 8006010:	0800abb0 	.word	0x0800abb0
 8006014:	0800abc8 	.word	0x0800abc8
 8006018:	20007c2c 	.word	0x20007c2c
 800601c:	20007c24 	.word	0x20007c24

08006020 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <netif_set_addr+0x1c>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10c      	bne.n	8006056 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f81a 	bl	8006078 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f859 	bl	80060fe <netif_set_netmask>
    netif_set_gw(netif, gw);
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f842 	bl	80060d8 <netif_set_gw>
 8006054:	e00c      	b.n	8006070 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f850 	bl	80060fe <netif_set_netmask>
    netif_set_gw(netif, gw);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f839 	bl	80060d8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f805 	bl	8006078 <netif_set_ipaddr>
  }
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <netif_set_ipaddr+0x18>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e002      	b.n	8006096 <netif_set_ipaddr+0x1e>
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <netif_set_ipaddr+0x5c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d014      	beq.n	80060cc <netif_set_ipaddr+0x54>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3304      	adds	r3, #4
 80060a6:	f107 020c 	add.w	r2, r7, #12
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 fa31 	bl	8007514 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <netif_set_ipaddr+0x46>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	e000      	b.n	80060c0 <netif_set_ipaddr+0x48>
 80060be:	2300      	movs	r3, #0
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80060c4:	2101      	movs	r1, #1
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f85d 	bl	8006186 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	0800b958 	.word	0x0800b958

080060d8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <netif_set_gw+0x16>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	e000      	b.n	80060f0 <netif_set_gw+0x18>
 80060ee:	2300      	movs	r3, #0
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <netif_set_netmask+0x16>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	e000      	b.n	8006116 <netif_set_netmask+0x18>
 8006114:	2300      	movs	r3, #0
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr

08006124 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800612c:	4a03      	ldr	r2, [pc, #12]	; (800613c <netif_set_default+0x18>)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	20007c28 	.word	0x20007c28

08006140 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d113      	bne.n	800617e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	b2da      	uxtb	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8006176:	2103      	movs	r1, #3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f804 	bl	8006186 <netif_issue_reports>
    }
  }
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d011      	beq.n	80061c0 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3304      	adds	r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00c      	beq.n	80061c0 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f002 f8aa 	bl	8008314 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  if (netif) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	61da      	str	r2, [r3, #28]
  }
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
 80061f2:	460b      	mov	r3, r1
 80061f4:	80bb      	strh	r3, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d81c      	bhi.n	800623a <pbuf_alloc+0x52>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <pbuf_alloc+0x20>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	0800621d 	.word	0x0800621d
 800620c:	08006223 	.word	0x08006223
 8006210:	08006229 	.word	0x08006229
 8006214:	0800622f 	.word	0x0800622f
 8006218:	08006235 	.word	0x08006235
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800621c:	2336      	movs	r3, #54	; 0x36
 800621e:	82fb      	strh	r3, [r7, #22]
    break;
 8006220:	e014      	b.n	800624c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006222:	2322      	movs	r3, #34	; 0x22
 8006224:	82fb      	strh	r3, [r7, #22]
    break;
 8006226:	e011      	b.n	800624c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006228:	230e      	movs	r3, #14
 800622a:	82fb      	strh	r3, [r7, #22]
    break;
 800622c:	e00e      	b.n	800624c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800622e:	2300      	movs	r3, #0
 8006230:	82fb      	strh	r3, [r7, #22]
    break;
 8006232:	e00b      	b.n	800624c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	82fb      	strh	r3, [r7, #22]
    break;
 8006238:	e008      	b.n	800624c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800623a:	4b9f      	ldr	r3, [pc, #636]	; (80064b8 <pbuf_alloc+0x2d0>)
 800623c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8006240:	499e      	ldr	r1, [pc, #632]	; (80064bc <pbuf_alloc+0x2d4>)
 8006242:	489f      	ldr	r0, [pc, #636]	; (80064c0 <pbuf_alloc+0x2d8>)
 8006244:	f003 fc24 	bl	8009a90 <iprintf>
    return NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	e158      	b.n	80064fe <pbuf_alloc+0x316>
  }

  switch (type) {
 800624c:	79bb      	ldrb	r3, [r7, #6]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d00d      	beq.n	800626e <pbuf_alloc+0x86>
 8006252:	2b03      	cmp	r3, #3
 8006254:	f300 8142 	bgt.w	80064dc <pbuf_alloc+0x2f4>
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80cc 	beq.w	80063f6 <pbuf_alloc+0x20e>
 800625e:	2b00      	cmp	r3, #0
 8006260:	f2c0 813c 	blt.w	80064dc <pbuf_alloc+0x2f4>
 8006264:	3b01      	subs	r3, #1
 8006266:	2b01      	cmp	r3, #1
 8006268:	f200 8138 	bhi.w	80064dc <pbuf_alloc+0x2f4>
 800626c:	e109      	b.n	8006482 <pbuf_alloc+0x29a>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800626e:	2005      	movs	r0, #5
 8006270:	f7ff fe02 	bl	8005e78 <memp_malloc>
 8006274:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <pbuf_alloc+0x98>
      PBUF_POOL_IS_EMPTY();
      return NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	e13e      	b.n	80064fe <pbuf_alloc+0x316>
    }
    p->type = type;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	79ba      	ldrb	r2, [r7, #6]
 8006284:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800628c:	8afb      	ldrh	r3, [r7, #22]
 800628e:	3310      	adds	r3, #16
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	3303      	adds	r3, #3
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	461a      	mov	r2, r3
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d006      	beq.n	80062ba <pbuf_alloc+0xd2>
 80062ac:	4b82      	ldr	r3, [pc, #520]	; (80064b8 <pbuf_alloc+0x2d0>)
 80062ae:	f44f 7294 	mov.w	r2, #296	; 0x128
 80062b2:	4984      	ldr	r1, [pc, #528]	; (80064c4 <pbuf_alloc+0x2dc>)
 80062b4:	4882      	ldr	r0, [pc, #520]	; (80064c0 <pbuf_alloc+0x2d8>)
 80062b6:	f003 fbeb 	bl	8009a90 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	88ba      	ldrh	r2, [r7, #4]
 80062be:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80062c0:	8afb      	ldrh	r3, [r7, #22]
 80062c2:	3303      	adds	r3, #3
 80062c4:	f023 0303 	bic.w	r3, r3, #3
 80062c8:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80062cc:	88bb      	ldrh	r3, [r7, #4]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	bf28      	it	cs
 80062d2:	4613      	movcs	r3, r2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	8952      	ldrh	r2, [r2, #10]
 80062e2:	441a      	add	r2, r3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d906      	bls.n	80062fc <pbuf_alloc+0x114>
 80062ee:	4b72      	ldr	r3, [pc, #456]	; (80064b8 <pbuf_alloc+0x2d0>)
 80062f0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80062f4:	4974      	ldr	r1, [pc, #464]	; (80064c8 <pbuf_alloc+0x2e0>)
 80062f6:	4872      	ldr	r0, [pc, #456]	; (80064c0 <pbuf_alloc+0x2d8>)
 80062f8:	f003 fbca 	bl	8009a90 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80062fc:	8afb      	ldrh	r3, [r7, #22]
 80062fe:	3303      	adds	r3, #3
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006308:	d106      	bne.n	8006318 <pbuf_alloc+0x130>
 800630a:	4b6b      	ldr	r3, [pc, #428]	; (80064b8 <pbuf_alloc+0x2d0>)
 800630c:	f240 1231 	movw	r2, #305	; 0x131
 8006310:	496e      	ldr	r1, [pc, #440]	; (80064cc <pbuf_alloc+0x2e4>)
 8006312:	486b      	ldr	r0, [pc, #428]	; (80064c0 <pbuf_alloc+0x2d8>)
 8006314:	f003 fbbc 	bl	8009a90 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2201      	movs	r2, #1
 800631c:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8006322:	88bb      	ldrh	r3, [r7, #4]
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	8952      	ldrh	r2, [r2, #10]
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800632c:	e05f      	b.n	80063ee <pbuf_alloc+0x206>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800632e:	2005      	movs	r0, #5
 8006330:	f7ff fda2 	bl	8005e78 <memp_malloc>
 8006334:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <pbuf_alloc+0x15e>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 800633c:	69f8      	ldr	r0, [r7, #28]
 800633e:	f000 fac7 	bl	80068d0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	e0db      	b.n	80064fe <pbuf_alloc+0x316>
      }
      q->type = type;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	79ba      	ldrb	r2, [r7, #6]
 800634a:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006364:	4293      	cmp	r3, r2
 8006366:	dd06      	ble.n	8006376 <pbuf_alloc+0x18e>
 8006368:	4b53      	ldr	r3, [pc, #332]	; (80064b8 <pbuf_alloc+0x2d0>)
 800636a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800636e:	4958      	ldr	r1, [pc, #352]	; (80064d0 <pbuf_alloc+0x2e8>)
 8006370:	4853      	ldr	r0, [pc, #332]	; (80064c0 <pbuf_alloc+0x2d8>)
 8006372:	f003 fb8d 	bl	8009a90 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006386:	bf28      	it	cs
 8006388:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f103 0210 	add.w	r2, r3, #16
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <pbuf_alloc+0x1ce>
 80063a8:	4b43      	ldr	r3, [pc, #268]	; (80064b8 <pbuf_alloc+0x2d0>)
 80063aa:	f240 1251 	movw	r2, #337	; 0x151
 80063ae:	4949      	ldr	r1, [pc, #292]	; (80064d4 <pbuf_alloc+0x2ec>)
 80063b0:	4843      	ldr	r0, [pc, #268]	; (80064c0 <pbuf_alloc+0x2d8>)
 80063b2:	f003 fb6d 	bl	8009a90 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	8952      	ldrh	r2, [r2, #10]
 80063be:	441a      	add	r2, r3
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d906      	bls.n	80063d8 <pbuf_alloc+0x1f0>
 80063ca:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <pbuf_alloc+0x2d0>)
 80063cc:	f240 1253 	movw	r2, #339	; 0x153
 80063d0:	493d      	ldr	r1, [pc, #244]	; (80064c8 <pbuf_alloc+0x2e0>)
 80063d2:	483b      	ldr	r0, [pc, #236]	; (80064c0 <pbuf_alloc+0x2d8>)
 80063d4:	f003 fb5c 	bl	8009a90 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	895b      	ldrh	r3, [r3, #10]
 80063e2:	461a      	mov	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dc9c      	bgt.n	800632e <pbuf_alloc+0x146>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80063f4:	e07c      	b.n	80064f0 <pbuf_alloc+0x308>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80063f6:	8afb      	ldrh	r3, [r7, #22]
 80063f8:	3313      	adds	r3, #19
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f023 0303 	bic.w	r3, r3, #3
 8006400:	b29a      	uxth	r2, r3
 8006402:	88bb      	ldrh	r3, [r7, #4]
 8006404:	3303      	adds	r3, #3
 8006406:	b29b      	uxth	r3, r3
 8006408:	f023 0303 	bic.w	r3, r3, #3
 800640c:	b29b      	uxth	r3, r3
 800640e:	4413      	add	r3, r2
 8006410:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006412:	897a      	ldrh	r2, [r7, #10]
 8006414:	88bb      	ldrh	r3, [r7, #4]
 8006416:	3303      	adds	r3, #3
 8006418:	f023 0303 	bic.w	r3, r3, #3
 800641c:	429a      	cmp	r2, r3
 800641e:	d201      	bcs.n	8006424 <pbuf_alloc+0x23c>
        return NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	e06c      	b.n	80064fe <pbuf_alloc+0x316>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006424:	897b      	ldrh	r3, [r7, #10]
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fbca 	bl	8005bc0 <mem_malloc>
 800642c:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <pbuf_alloc+0x250>
      return NULL;
 8006434:	2300      	movs	r3, #0
 8006436:	e062      	b.n	80064fe <pbuf_alloc+0x316>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006438:	8afb      	ldrh	r3, [r7, #22]
 800643a:	3310      	adds	r3, #16
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	3303      	adds	r3, #3
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	461a      	mov	r2, r3
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	88ba      	ldrh	r2, [r7, #4]
 8006450:	811a      	strh	r2, [r3, #8]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	891a      	ldrh	r2, [r3, #8]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	79ba      	ldrb	r2, [r7, #6]
 8006464:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d03d      	beq.n	80064ee <pbuf_alloc+0x306>
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <pbuf_alloc+0x2d0>)
 8006474:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8006478:	4917      	ldr	r1, [pc, #92]	; (80064d8 <pbuf_alloc+0x2f0>)
 800647a:	4811      	ldr	r0, [pc, #68]	; (80064c0 <pbuf_alloc+0x2d8>)
 800647c:	f003 fb08 	bl	8009a90 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8006480:	e035      	b.n	80064ee <pbuf_alloc+0x306>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006482:	2004      	movs	r0, #4
 8006484:	f7ff fcf8 	bl	8005e78 <memp_malloc>
 8006488:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <pbuf_alloc+0x2ac>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	e034      	b.n	80064fe <pbuf_alloc+0x316>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2200      	movs	r2, #0
 8006498:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	88ba      	ldrh	r2, [r7, #4]
 800649e:	811a      	strh	r2, [r3, #8]
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	891a      	ldrh	r2, [r3, #8]
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
    p->type = type;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	79ba      	ldrb	r2, [r7, #6]
 80064b2:	731a      	strb	r2, [r3, #12]
    break;
 80064b4:	e01c      	b.n	80064f0 <pbuf_alloc+0x308>
 80064b6:	bf00      	nop
 80064b8:	0800abf0 	.word	0x0800abf0
 80064bc:	0800ac20 	.word	0x0800ac20
 80064c0:	0800ac3c 	.word	0x0800ac3c
 80064c4:	0800ac64 	.word	0x0800ac64
 80064c8:	0800ac94 	.word	0x0800ac94
 80064cc:	0800acc8 	.word	0x0800acc8
 80064d0:	0800acfc 	.word	0x0800acfc
 80064d4:	0800ad10 	.word	0x0800ad10
 80064d8:	0800ad40 	.word	0x0800ad40
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <pbuf_alloc+0x320>)
 80064de:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80064e2:	490a      	ldr	r1, [pc, #40]	; (800650c <pbuf_alloc+0x324>)
 80064e4:	480a      	ldr	r0, [pc, #40]	; (8006510 <pbuf_alloc+0x328>)
 80064e6:	f003 fad3 	bl	8009a90 <iprintf>
    return NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	e007      	b.n	80064fe <pbuf_alloc+0x316>
    break;
 80064ee:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2201      	movs	r2, #1
 80064f4:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2200      	movs	r2, #0
 80064fa:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80064fc:	69fb      	ldr	r3, [r7, #28]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3720      	adds	r7, #32
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	0800abf0 	.word	0x0800abf0
 800650c:	0800ad6c 	.word	0x0800ad6c
 8006510:	0800ac3c 	.word	0x0800ac3c

08006514 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4603      	mov	r3, r0
 800651e:	71fb      	strb	r3, [r7, #7]
 8006520:	460b      	mov	r3, r1
 8006522:	80bb      	strh	r3, [r7, #4]
 8006524:	4613      	mov	r3, r2
 8006526:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	2b04      	cmp	r3, #4
 800652c:	d81b      	bhi.n	8006566 <pbuf_alloced_custom+0x52>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <pbuf_alloced_custom+0x20>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	08006549 	.word	0x08006549
 8006538:	0800654f 	.word	0x0800654f
 800653c:	08006555 	.word	0x08006555
 8006540:	0800655b 	.word	0x0800655b
 8006544:	08006561 	.word	0x08006561
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006548:	2336      	movs	r3, #54	; 0x36
 800654a:	81fb      	strh	r3, [r7, #14]
    break;
 800654c:	e014      	b.n	8006578 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800654e:	2322      	movs	r3, #34	; 0x22
 8006550:	81fb      	strh	r3, [r7, #14]
    break;
 8006552:	e011      	b.n	8006578 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006554:	230e      	movs	r3, #14
 8006556:	81fb      	strh	r3, [r7, #14]
    break;
 8006558:	e00e      	b.n	8006578 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800655a:	2300      	movs	r3, #0
 800655c:	81fb      	strh	r3, [r7, #14]
    break;
 800655e:	e00b      	b.n	8006578 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	81fb      	strh	r3, [r7, #14]
    break;
 8006564:	e008      	b.n	8006578 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006566:	4b1d      	ldr	r3, [pc, #116]	; (80065dc <pbuf_alloced_custom+0xc8>)
 8006568:	f240 12c5 	movw	r2, #453	; 0x1c5
 800656c:	491c      	ldr	r1, [pc, #112]	; (80065e0 <pbuf_alloced_custom+0xcc>)
 800656e:	481d      	ldr	r0, [pc, #116]	; (80065e4 <pbuf_alloced_custom+0xd0>)
 8006570:	f003 fa8e 	bl	8009a90 <iprintf>
    return NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	e02d      	b.n	80065d4 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006578:	89fb      	ldrh	r3, [r7, #14]
 800657a:	3303      	adds	r3, #3
 800657c:	f023 0203 	bic.w	r2, r3, #3
 8006580:	88bb      	ldrh	r3, [r7, #4]
 8006582:	441a      	add	r2, r3
 8006584:	8bbb      	ldrh	r3, [r7, #28]
 8006586:	429a      	cmp	r2, r3
 8006588:	d901      	bls.n	800658e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	e022      	b.n	80065d4 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d008      	beq.n	80065ac <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800659a:	89fb      	ldrh	r3, [r7, #14]
 800659c:	3303      	adds	r3, #3
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	441a      	add	r2, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	605a      	str	r2, [r3, #4]
 80065aa:	e002      	b.n	80065b2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2202      	movs	r2, #2
 80065b6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	88ba      	ldrh	r2, [r7, #4]
 80065bc:	811a      	strh	r2, [r3, #8]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	891a      	ldrh	r2, [r3, #8]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	79ba      	ldrb	r2, [r7, #6]
 80065ca:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2201      	movs	r2, #1
 80065d0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80065d2:	683b      	ldr	r3, [r7, #0]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	0800abf0 	.word	0x0800abf0
 80065e0:	0800ad88 	.word	0x0800ad88
 80065e4:	0800ac3c 	.word	0x0800ac3c

080065e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d106      	bne.n	8006608 <pbuf_realloc+0x20>
 80065fa:	4b4b      	ldr	r3, [pc, #300]	; (8006728 <pbuf_realloc+0x140>)
 80065fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006600:	494a      	ldr	r1, [pc, #296]	; (800672c <pbuf_realloc+0x144>)
 8006602:	484b      	ldr	r0, [pc, #300]	; (8006730 <pbuf_realloc+0x148>)
 8006604:	f003 fa44 	bl	8009a90 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	7b1b      	ldrb	r3, [r3, #12]
 800660c:	2b03      	cmp	r3, #3
 800660e:	d012      	beq.n	8006636 <pbuf_realloc+0x4e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7b1b      	ldrb	r3, [r3, #12]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d00e      	beq.n	8006636 <pbuf_realloc+0x4e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7b1b      	ldrb	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <pbuf_realloc+0x4e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7b1b      	ldrb	r3, [r3, #12]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d006      	beq.n	8006636 <pbuf_realloc+0x4e>
 8006628:	4b3f      	ldr	r3, [pc, #252]	; (8006728 <pbuf_realloc+0x140>)
 800662a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800662e:	4941      	ldr	r1, [pc, #260]	; (8006734 <pbuf_realloc+0x14c>)
 8006630:	483f      	ldr	r0, [pc, #252]	; (8006730 <pbuf_realloc+0x148>)
 8006632:	f003 fa2d 	bl	8009a90 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	891b      	ldrh	r3, [r3, #8]
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	429a      	cmp	r2, r3
 800663e:	d26e      	bcs.n	800671e <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8006640:	887b      	ldrh	r3, [r7, #2]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	8912      	ldrh	r2, [r2, #8]
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800664a:	887b      	ldrh	r3, [r7, #2]
 800664c:	827b      	strh	r3, [r7, #18]
  q = p;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006652:	e025      	b.n	80066a0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	895b      	ldrh	r3, [r3, #10]
 8006658:	8a7a      	ldrh	r2, [r7, #18]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006664:	4293      	cmp	r3, r2
 8006666:	dd06      	ble.n	8006676 <pbuf_realloc+0x8e>
 8006668:	4b2f      	ldr	r3, [pc, #188]	; (8006728 <pbuf_realloc+0x140>)
 800666a:	f240 220b 	movw	r2, #523	; 0x20b
 800666e:	4932      	ldr	r1, [pc, #200]	; (8006738 <pbuf_realloc+0x150>)
 8006670:	482f      	ldr	r0, [pc, #188]	; (8006730 <pbuf_realloc+0x148>)
 8006672:	f003 fa0d 	bl	8009a90 <iprintf>
    q->tot_len += (u16_t)grow;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	891a      	ldrh	r2, [r3, #8]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	b29b      	uxth	r3, r3
 800667e:	4413      	add	r3, r2
 8006680:	b29a      	uxth	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <pbuf_realloc+0xb8>
 8006692:	4b25      	ldr	r3, [pc, #148]	; (8006728 <pbuf_realloc+0x140>)
 8006694:	f240 220f 	movw	r2, #527	; 0x20f
 8006698:	4928      	ldr	r1, [pc, #160]	; (800673c <pbuf_realloc+0x154>)
 800669a:	4825      	ldr	r0, [pc, #148]	; (8006730 <pbuf_realloc+0x148>)
 800669c:	f003 f9f8 	bl	8009a90 <iprintf>
  while (rem_len > q->len) {
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	895b      	ldrh	r3, [r3, #10]
 80066a4:	8a7a      	ldrh	r2, [r7, #18]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d8d4      	bhi.n	8006654 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	7b1b      	ldrb	r3, [r3, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d121      	bne.n	80066f6 <pbuf_realloc+0x10e>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	895b      	ldrh	r3, [r3, #10]
 80066b6:	8a7a      	ldrh	r2, [r7, #18]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d01c      	beq.n	80066f6 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	7b5b      	ldrb	r3, [r3, #13]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d116      	bne.n	80066f6 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	8a7b      	ldrh	r3, [r7, #18]
 80066d4:	4413      	add	r3, r2
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4619      	mov	r1, r3
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f7ff f994 	bl	8005a08 <mem_trim>
 80066e0:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <pbuf_realloc+0x10e>
 80066e8:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <pbuf_realloc+0x140>)
 80066ea:	f240 221d 	movw	r2, #541	; 0x21d
 80066ee:	4914      	ldr	r1, [pc, #80]	; (8006740 <pbuf_realloc+0x158>)
 80066f0:	480f      	ldr	r0, [pc, #60]	; (8006730 <pbuf_realloc+0x148>)
 80066f2:	f003 f9cd 	bl	8009a90 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	8a7a      	ldrh	r2, [r7, #18]
 80066fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	895a      	ldrh	r2, [r3, #10]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 f8dd 	bl	80068d0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e000      	b.n	8006720 <pbuf_realloc+0x138>
    return;
 800671e:	bf00      	nop

}
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	0800abf0 	.word	0x0800abf0
 800672c:	0800adac 	.word	0x0800adac
 8006730:	0800ac3c 	.word	0x0800ac3c
 8006734:	0800adc4 	.word	0x0800adc4
 8006738:	0800ade0 	.word	0x0800ade0
 800673c:	0800adf4 	.word	0x0800adf4
 8006740:	0800ae0c 	.word	0x0800ae0c

08006744 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	807b      	strh	r3, [r7, #2]
 8006750:	4613      	mov	r3, r2
 8006752:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <pbuf_header_impl+0x24>
 800675a:	4b46      	ldr	r3, [pc, #280]	; (8006874 <pbuf_header_impl+0x130>)
 800675c:	f240 223f 	movw	r2, #575	; 0x23f
 8006760:	4945      	ldr	r1, [pc, #276]	; (8006878 <pbuf_header_impl+0x134>)
 8006762:	4846      	ldr	r0, [pc, #280]	; (800687c <pbuf_header_impl+0x138>)
 8006764:	f003 f994 	bl	8009a90 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006768:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <pbuf_header_impl+0x32>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <pbuf_header_impl+0x36>
    return 0;
 8006776:	2300      	movs	r3, #0
 8006778:	e078      	b.n	800686c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800677a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800677e:	2b00      	cmp	r3, #0
 8006780:	da10      	bge.n	80067a4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8006782:	887b      	ldrh	r3, [r7, #2]
 8006784:	425b      	negs	r3, r3
 8006786:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	895b      	ldrh	r3, [r3, #10]
 800678c:	89fa      	ldrh	r2, [r7, #14]
 800678e:	429a      	cmp	r2, r3
 8006790:	d90a      	bls.n	80067a8 <pbuf_header_impl+0x64>
 8006792:	4b38      	ldr	r3, [pc, #224]	; (8006874 <pbuf_header_impl+0x130>)
 8006794:	f240 2247 	movw	r2, #583	; 0x247
 8006798:	4939      	ldr	r1, [pc, #228]	; (8006880 <pbuf_header_impl+0x13c>)
 800679a:	4838      	ldr	r0, [pc, #224]	; (800687c <pbuf_header_impl+0x138>)
 800679c:	f003 f978 	bl	8009a90 <iprintf>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e063      	b.n	800686c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7b1b      	ldrb	r3, [r3, #12]
 80067ac:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80067b4:	89bb      	ldrh	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <pbuf_header_impl+0x7c>
 80067ba:	89bb      	ldrh	r3, [r7, #12]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d112      	bne.n	80067e6 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067c8:	425b      	negs	r3, r3
 80067ca:	441a      	add	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3310      	adds	r3, #16
 80067d8:	429a      	cmp	r2, r3
 80067da:	d238      	bcs.n	800684e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e042      	b.n	800686c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80067e6:	89bb      	ldrh	r3, [r7, #12]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d002      	beq.n	80067f2 <pbuf_header_impl+0xae>
 80067ec:	89bb      	ldrh	r3, [r7, #12]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d124      	bne.n	800683c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80067f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da0d      	bge.n	8006816 <pbuf_header_impl+0xd2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	895b      	ldrh	r3, [r3, #10]
 80067fe:	89fa      	ldrh	r2, [r7, #14]
 8006800:	429a      	cmp	r2, r3
 8006802:	d808      	bhi.n	8006816 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800680c:	425b      	negs	r3, r3
 800680e:	441a      	add	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	605a      	str	r2, [r3, #4]
 8006814:	e011      	b.n	800683a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8006816:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800681a:	2b00      	cmp	r3, #0
 800681c:	dd0b      	ble.n	8006836 <pbuf_header_impl+0xf2>
 800681e:	787b      	ldrb	r3, [r7, #1]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d008      	beq.n	8006836 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800682c:	425b      	negs	r3, r3
 800682e:	441a      	add	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	e001      	b.n	800683a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006836:	2301      	movs	r3, #1
 8006838:	e018      	b.n	800686c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800683a:	e008      	b.n	800684e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <pbuf_header_impl+0x130>)
 800683e:	f240 2277 	movw	r2, #631	; 0x277
 8006842:	4910      	ldr	r1, [pc, #64]	; (8006884 <pbuf_header_impl+0x140>)
 8006844:	480d      	ldr	r0, [pc, #52]	; (800687c <pbuf_header_impl+0x138>)
 8006846:	f003 f923 	bl	8009a90 <iprintf>
    return 1;
 800684a:	2301      	movs	r3, #1
 800684c:	e00e      	b.n	800686c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	895a      	ldrh	r2, [r3, #10]
 8006852:	887b      	ldrh	r3, [r7, #2]
 8006854:	4413      	add	r3, r2
 8006856:	b29a      	uxth	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	891a      	ldrh	r2, [r3, #8]
 8006860:	887b      	ldrh	r3, [r7, #2]
 8006862:	4413      	add	r3, r2
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	0800abf0 	.word	0x0800abf0
 8006878:	0800ae28 	.word	0x0800ae28
 800687c:	0800ac3c 	.word	0x0800ac3c
 8006880:	0800ae34 	.word	0x0800ae34
 8006884:	0800ae54 	.word	0x0800ae54

08006888 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8006894:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006898:	2200      	movs	r2, #0
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ff51 	bl	8006744 <pbuf_header_impl>
 80068a2:	4603      	mov	r3, r0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80068b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80068bc:	2201      	movs	r2, #1
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ff3f 	bl	8006744 <pbuf_header_impl>
 80068c6:	4603      	mov	r3, r0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <pbuf_free+0x22>
 80068e4:	4b3e      	ldr	r3, [pc, #248]	; (80069e0 <pbuf_free+0x110>)
 80068e6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80068ea:	493e      	ldr	r1, [pc, #248]	; (80069e4 <pbuf_free+0x114>)
 80068ec:	483e      	ldr	r0, [pc, #248]	; (80069e8 <pbuf_free+0x118>)
 80068ee:	f003 f8cf 	bl	8009a90 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e070      	b.n	80069d8 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7b1b      	ldrb	r3, [r3, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d012      	beq.n	8006924 <pbuf_free+0x54>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7b1b      	ldrb	r3, [r3, #12]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d00e      	beq.n	8006924 <pbuf_free+0x54>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7b1b      	ldrb	r3, [r3, #12]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d00a      	beq.n	8006924 <pbuf_free+0x54>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	7b1b      	ldrb	r3, [r3, #12]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d006      	beq.n	8006924 <pbuf_free+0x54>
 8006916:	4b32      	ldr	r3, [pc, #200]	; (80069e0 <pbuf_free+0x110>)
 8006918:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800691c:	4933      	ldr	r1, [pc, #204]	; (80069ec <pbuf_free+0x11c>)
 800691e:	4832      	ldr	r0, [pc, #200]	; (80069e8 <pbuf_free+0x118>)
 8006920:	f003 f8b6 	bl	8009a90 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006928:	e052      	b.n	80069d0 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	89db      	ldrh	r3, [r3, #14]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <pbuf_free+0x70>
 8006932:	4b2b      	ldr	r3, [pc, #172]	; (80069e0 <pbuf_free+0x110>)
 8006934:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006938:	492d      	ldr	r1, [pc, #180]	; (80069f0 <pbuf_free+0x120>)
 800693a:	482b      	ldr	r0, [pc, #172]	; (80069e8 <pbuf_free+0x118>)
 800693c:	f003 f8a8 	bl	8009a90 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	89db      	ldrh	r3, [r3, #14]
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	81da      	strh	r2, [r3, #14]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	89db      	ldrh	r3, [r3, #14]
 8006950:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006952:	8abb      	ldrh	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d139      	bne.n	80069cc <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	7b1b      	ldrb	r3, [r3, #12]
 8006962:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7b5b      	ldrb	r3, [r3, #13]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d011      	beq.n	8006994 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <pbuf_free+0xba>
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <pbuf_free+0x110>)
 800697e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006982:	491c      	ldr	r1, [pc, #112]	; (80069f4 <pbuf_free+0x124>)
 8006984:	4818      	ldr	r0, [pc, #96]	; (80069e8 <pbuf_free+0x118>)
 8006986:	f003 f883 	bl	8009a90 <iprintf>
        pc->custom_free_function(p);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
 8006992:	e015      	b.n	80069c0 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8006994:	89fb      	ldrh	r3, [r7, #14]
 8006996:	2b03      	cmp	r3, #3
 8006998:	d104      	bne.n	80069a4 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	2005      	movs	r0, #5
 800699e:	f7ff fab7 	bl	8005f10 <memp_free>
 80069a2:	e00d      	b.n	80069c0 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d002      	beq.n	80069b0 <pbuf_free+0xe0>
 80069aa:	89fb      	ldrh	r3, [r7, #14]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d104      	bne.n	80069ba <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	2004      	movs	r0, #4
 80069b4:	f7ff faac 	bl	8005f10 <memp_free>
 80069b8:	e002      	b.n	80069c0 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fe ffc2 	bl	8005944 <mem_free>
        }
      }
      count++;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	3301      	adds	r3, #1
 80069c4:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	607b      	str	r3, [r7, #4]
 80069ca:	e001      	b.n	80069d0 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1a9      	bne.n	800692a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	0800abf0 	.word	0x0800abf0
 80069e4:	0800ae28 	.word	0x0800ae28
 80069e8:	0800ac3c 	.word	0x0800ac3c
 80069ec:	0800ae64 	.word	0x0800ae64
 80069f0:	0800ae7c 	.word	0x0800ae7c
 80069f4:	0800ae94 	.word	0x0800ae94

080069f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006a04:	e005      	b.n	8006a12 <pbuf_clen+0x1a>
    ++len;
 8006a06:	89fb      	ldrh	r3, [r7, #14]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1f6      	bne.n	8006a06 <pbuf_clen+0xe>
  }
  return len;
 8006a18:	89fb      	ldrh	r3, [r7, #14]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d010      	beq.n	8006a54 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	89db      	ldrh	r3, [r3, #14]
 8006a36:	3301      	adds	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	89db      	ldrh	r3, [r3, #14]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <pbuf_ref+0x30>
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <pbuf_ref+0x38>)
 8006a48:	f240 3239 	movw	r2, #825	; 0x339
 8006a4c:	4904      	ldr	r1, [pc, #16]	; (8006a60 <pbuf_ref+0x3c>)
 8006a4e:	4805      	ldr	r0, [pc, #20]	; (8006a64 <pbuf_ref+0x40>)
 8006a50:	f003 f81e 	bl	8009a90 <iprintf>
  }
}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	0800abf0 	.word	0x0800abf0
 8006a60:	0800aeb8 	.word	0x0800aeb8
 8006a64:	0800ac3c 	.word	0x0800ac3c

08006a68 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <pbuf_cat+0x16>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d107      	bne.n	8006a8e <pbuf_cat+0x26>
 8006a7e:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <pbuf_cat+0x98>)
 8006a80:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8006a84:	491f      	ldr	r1, [pc, #124]	; (8006b04 <pbuf_cat+0x9c>)
 8006a86:	4820      	ldr	r0, [pc, #128]	; (8006b08 <pbuf_cat+0xa0>)
 8006a88:	f003 f802 	bl	8009a90 <iprintf>
 8006a8c:	e034      	b.n	8006af8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e00a      	b.n	8006aaa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	891a      	ldrh	r2, [r3, #8]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	891b      	ldrh	r3, [r3, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	891a      	ldrh	r2, [r3, #8]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	895b      	ldrh	r3, [r3, #10]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d006      	beq.n	8006acc <pbuf_cat+0x64>
 8006abe:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <pbuf_cat+0x98>)
 8006ac0:	f240 3255 	movw	r2, #853	; 0x355
 8006ac4:	4911      	ldr	r1, [pc, #68]	; (8006b0c <pbuf_cat+0xa4>)
 8006ac6:	4810      	ldr	r0, [pc, #64]	; (8006b08 <pbuf_cat+0xa0>)
 8006ac8:	f002 ffe2 	bl	8009a90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d006      	beq.n	8006ae2 <pbuf_cat+0x7a>
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <pbuf_cat+0x98>)
 8006ad6:	f240 3256 	movw	r2, #854	; 0x356
 8006ada:	490d      	ldr	r1, [pc, #52]	; (8006b10 <pbuf_cat+0xa8>)
 8006adc:	480a      	ldr	r0, [pc, #40]	; (8006b08 <pbuf_cat+0xa0>)
 8006ade:	f002 ffd7 	bl	8009a90 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	891a      	ldrh	r2, [r3, #8]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	891b      	ldrh	r3, [r3, #8]
 8006aea:	4413      	add	r3, r2
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	0800abf0 	.word	0x0800abf0
 8006b04:	0800aecc 	.word	0x0800aecc
 8006b08:	0800ac3c 	.word	0x0800ac3c
 8006b0c:	0800af04 	.word	0x0800af04
 8006b10:	0800af34 	.word	0x0800af34

08006b14 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ffa1 	bl	8006a68 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006b26:	6838      	ldr	r0, [r7, #0]
 8006b28:	f7ff ff7c 	bl	8006a24 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	81fb      	strh	r3, [r7, #14]
 8006b42:	2300      	movs	r3, #0
 8006b44:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <pbuf_copy+0x2a>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <pbuf_copy+0x2a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	891a      	ldrh	r2, [r3, #8]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	891b      	ldrh	r3, [r3, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d209      	bcs.n	8006b72 <pbuf_copy+0x3e>
 8006b5e:	4b54      	ldr	r3, [pc, #336]	; (8006cb0 <pbuf_copy+0x17c>)
 8006b60:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8006b64:	4953      	ldr	r1, [pc, #332]	; (8006cb4 <pbuf_copy+0x180>)
 8006b66:	4854      	ldr	r0, [pc, #336]	; (8006cb8 <pbuf_copy+0x184>)
 8006b68:	f002 ff92 	bl	8009a90 <iprintf>
 8006b6c:	f06f 030f 	mvn.w	r3, #15
 8006b70:	e099      	b.n	8006ca6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	895b      	ldrh	r3, [r3, #10]
 8006b76:	461a      	mov	r2, r3
 8006b78:	89fb      	ldrh	r3, [r7, #14]
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	895b      	ldrh	r3, [r3, #10]
 8006b80:	4619      	mov	r1, r3
 8006b82:	89bb      	ldrh	r3, [r7, #12]
 8006b84:	1acb      	subs	r3, r1, r3
 8006b86:	429a      	cmp	r2, r3
 8006b88:	db05      	blt.n	8006b96 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	895a      	ldrh	r2, [r3, #10]
 8006b8e:	89bb      	ldrh	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	817b      	strh	r3, [r7, #10]
 8006b94:	e004      	b.n	8006ba0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	895a      	ldrh	r2, [r3, #10]
 8006b9a:	89fb      	ldrh	r3, [r7, #14]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	89fb      	ldrh	r3, [r7, #14]
 8006ba6:	18d0      	adds	r0, r2, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	89bb      	ldrh	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	897a      	ldrh	r2, [r7, #10]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f003 f847 	bl	8009c46 <memcpy>
    offset_to += len;
 8006bb8:	89fa      	ldrh	r2, [r7, #14]
 8006bba:	897b      	ldrh	r3, [r7, #10]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8006bc0:	89ba      	ldrh	r2, [r7, #12]
 8006bc2:	897b      	ldrh	r3, [r7, #10]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	895b      	ldrh	r3, [r3, #10]
 8006bcc:	89fa      	ldrh	r2, [r7, #14]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d906      	bls.n	8006be0 <pbuf_copy+0xac>
 8006bd2:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <pbuf_copy+0x17c>)
 8006bd4:	f240 32cd 	movw	r2, #973	; 0x3cd
 8006bd8:	4938      	ldr	r1, [pc, #224]	; (8006cbc <pbuf_copy+0x188>)
 8006bda:	4837      	ldr	r0, [pc, #220]	; (8006cb8 <pbuf_copy+0x184>)
 8006bdc:	f002 ff58 	bl	8009a90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	895b      	ldrh	r3, [r3, #10]
 8006be4:	89ba      	ldrh	r2, [r7, #12]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d906      	bls.n	8006bf8 <pbuf_copy+0xc4>
 8006bea:	4b31      	ldr	r3, [pc, #196]	; (8006cb0 <pbuf_copy+0x17c>)
 8006bec:	f240 32ce 	movw	r2, #974	; 0x3ce
 8006bf0:	4933      	ldr	r1, [pc, #204]	; (8006cc0 <pbuf_copy+0x18c>)
 8006bf2:	4831      	ldr	r0, [pc, #196]	; (8006cb8 <pbuf_copy+0x184>)
 8006bf4:	f002 ff4c 	bl	8009a90 <iprintf>
    if (offset_from >= p_from->len) {
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	895b      	ldrh	r3, [r3, #10]
 8006bfc:	89ba      	ldrh	r2, [r7, #12]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d304      	bcc.n	8006c0c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	895b      	ldrh	r3, [r3, #10]
 8006c10:	89fa      	ldrh	r2, [r7, #14]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d114      	bne.n	8006c40 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10c      	bne.n	8006c40 <pbuf_copy+0x10c>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <pbuf_copy+0x10c>
 8006c2c:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <pbuf_copy+0x17c>)
 8006c2e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8006c32:	4924      	ldr	r1, [pc, #144]	; (8006cc4 <pbuf_copy+0x190>)
 8006c34:	4820      	ldr	r0, [pc, #128]	; (8006cb8 <pbuf_copy+0x184>)
 8006c36:	f002 ff2b 	bl	8009a90 <iprintf>
 8006c3a:	f06f 030f 	mvn.w	r3, #15
 8006c3e:	e032      	b.n	8006ca6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d013      	beq.n	8006c6e <pbuf_copy+0x13a>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	895a      	ldrh	r2, [r3, #10]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	891b      	ldrh	r3, [r3, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d10d      	bne.n	8006c6e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <pbuf_copy+0x13a>
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <pbuf_copy+0x17c>)
 8006c5c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8006c60:	4919      	ldr	r1, [pc, #100]	; (8006cc8 <pbuf_copy+0x194>)
 8006c62:	4815      	ldr	r0, [pc, #84]	; (8006cb8 <pbuf_copy+0x184>)
 8006c64:	f002 ff14 	bl	8009a90 <iprintf>
 8006c68:	f06f 0305 	mvn.w	r3, #5
 8006c6c:	e01b      	b.n	8006ca6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d013      	beq.n	8006c9c <pbuf_copy+0x168>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	895a      	ldrh	r2, [r3, #10]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	891b      	ldrh	r3, [r3, #8]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d10d      	bne.n	8006c9c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <pbuf_copy+0x168>
 8006c88:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <pbuf_copy+0x17c>)
 8006c8a:	f240 32e2 	movw	r2, #994	; 0x3e2
 8006c8e:	490e      	ldr	r1, [pc, #56]	; (8006cc8 <pbuf_copy+0x194>)
 8006c90:	4809      	ldr	r0, [pc, #36]	; (8006cb8 <pbuf_copy+0x184>)
 8006c92:	f002 fefd 	bl	8009a90 <iprintf>
 8006c96:	f06f 0305 	mvn.w	r3, #5
 8006c9a:	e004      	b.n	8006ca6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f47f af67 	bne.w	8006b72 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	0800abf0 	.word	0x0800abf0
 8006cb4:	0800af80 	.word	0x0800af80
 8006cb8:	0800ac3c 	.word	0x0800ac3c
 8006cbc:	0800afb0 	.word	0x0800afb0
 8006cc0:	0800afc8 	.word	0x0800afc8
 8006cc4:	0800afe4 	.word	0x0800afe4
 8006cc8:	0800aff4 	.word	0x0800aff4

08006ccc <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	4903      	ldr	r1, [pc, #12]	; (8006cf4 <cyclic_timer+0x28>)
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 f82e 	bl	8006d48 <sys_timeout>
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	08006ccd 	.word	0x08006ccd

08006cf8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8006cfe:	2300      	movs	r3, #0
 8006d00:	607b      	str	r3, [r7, #4]
 8006d02:	e00e      	b.n	8006d22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8006d04:	4a0d      	ldr	r2, [pc, #52]	; (8006d3c <sys_timeouts_init+0x44>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <sys_timeouts_init+0x44>)
 8006d12:	4413      	add	r3, r2
 8006d14:	461a      	mov	r2, r3
 8006d16:	490a      	ldr	r1, [pc, #40]	; (8006d40 <sys_timeouts_init+0x48>)
 8006d18:	f000 f816 	bl	8006d48 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d9ed      	bls.n	8006d04 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8006d28:	f7fe fc8a 	bl	8005640 <sys_now>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4a05      	ldr	r2, [pc, #20]	; (8006d44 <sys_timeouts_init+0x4c>)
 8006d30:	6013      	str	r3, [r2, #0]
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	0800b948 	.word	0x0800b948
 8006d40:	08006ccd 	.word	0x08006ccd
 8006d44:	20007c34 	.word	0x20007c34

08006d48 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8006d54:	2003      	movs	r0, #3
 8006d56:	f7ff f88f 	bl	8005e78 <memp_malloc>
 8006d5a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 8084 	bne.w	8006e72 <sys_timeout+0x12a>
 8006d6a:	4b44      	ldr	r3, [pc, #272]	; (8006e7c <sys_timeout+0x134>)
 8006d6c:	22d4      	movs	r2, #212	; 0xd4
 8006d6e:	4944      	ldr	r1, [pc, #272]	; (8006e80 <sys_timeout+0x138>)
 8006d70:	4844      	ldr	r0, [pc, #272]	; (8006e84 <sys_timeout+0x13c>)
 8006d72:	f002 fe8d 	bl	8009a90 <iprintf>
    return;
 8006d76:	e07c      	b.n	8006e72 <sys_timeout+0x12a>
  }

  now = sys_now();
 8006d78:	f7fe fc62 	bl	8005640 <sys_now>
 8006d7c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8006d7e:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <sys_timeout+0x140>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <sys_timeout+0x4a>
    diff = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8006d8a:	4a40      	ldr	r2, [pc, #256]	; (8006e8c <sys_timeout+0x144>)
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e004      	b.n	8006d9c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8006d92:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <sys_timeout+0x144>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	441a      	add	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8006db8:	4b33      	ldr	r3, [pc, #204]	; (8006e88 <sys_timeout+0x140>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <sys_timeout+0x80>
    next_timeout = timeout;
 8006dc0:	4a31      	ldr	r2, [pc, #196]	; (8006e88 <sys_timeout+0x140>)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6013      	str	r3, [r2, #0]
    return;
 8006dc6:	e055      	b.n	8006e74 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8006dc8:	4b2f      	ldr	r3, [pc, #188]	; (8006e88 <sys_timeout+0x140>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d20f      	bcs.n	8006df4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8006dd4:	4b2c      	ldr	r3, [pc, #176]	; (8006e88 <sys_timeout+0x140>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6859      	ldr	r1, [r3, #4]
 8006dda:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <sys_timeout+0x140>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	1a8a      	subs	r2, r1, r2
 8006de2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8006de4:	4b28      	ldr	r3, [pc, #160]	; (8006e88 <sys_timeout+0x140>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8006dec:	4a26      	ldr	r2, [pc, #152]	; (8006e88 <sys_timeout+0x140>)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e03f      	b.n	8006e74 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8006df4:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <sys_timeout+0x140>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	61fb      	str	r3, [r7, #28]
 8006dfa:	e036      	b.n	8006e6a <sys_timeout+0x122>
      timeout->time -= t->time;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d006      	beq.n	8006e20 <sys_timeout+0xd8>
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d921      	bls.n	8006e64 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	1a8a      	subs	r2, r1, r2
 8006e38:	605a      	str	r2, [r3, #4]
 8006e3a:	e00b      	b.n	8006e54 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d206      	bcs.n	8006e54 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <sys_timeout+0x140>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	441a      	add	r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	601a      	str	r2, [r3, #0]
        break;
 8006e62:	e007      	b.n	8006e74 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1c5      	bne.n	8006dfc <sys_timeout+0xb4>
 8006e70:	e000      	b.n	8006e74 <sys_timeout+0x12c>
    return;
 8006e72:	bf00      	nop
      }
    }
  }
}
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	0800b0fc 	.word	0x0800b0fc
 8006e80:	0800b130 	.word	0x0800b130
 8006e84:	0800b170 	.word	0x0800b170
 8006e88:	20007c30 	.word	0x20007c30
 8006e8c:	20007c34 	.word	0x20007c34

08006e90 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <sys_check_timeouts+0x8c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d039      	beq.n	8006f12 <sys_check_timeouts+0x82>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8006e9e:	f7fe fbcf 	bl	8005640 <sys_now>
 8006ea2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	; (8006f20 <sys_check_timeouts+0x90>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8006eb2:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <sys_check_timeouts+0x8c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d026      	beq.n	8006f0c <sys_check_timeouts+0x7c>
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d321      	bcc.n	8006f0c <sys_check_timeouts+0x7c>
        /* timeout has expired */
        had_one = 1;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <sys_check_timeouts+0x90>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	4a12      	ldr	r2, [pc, #72]	; (8006f20 <sys_check_timeouts+0x90>)
 8006ed8:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a0c      	ldr	r2, [pc, #48]	; (8006f1c <sys_check_timeouts+0x8c>)
 8006eea:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	2003      	movs	r0, #3
 8006efc:	f7ff f808 	bl	8005f10 <memp_free>
        if (handler != NULL) {
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <sys_check_timeouts+0x7c>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6838      	ldr	r0, [r7, #0]
 8006f0a:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8006f0c:	7cfb      	ldrb	r3, [r7, #19]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1cd      	bne.n	8006eae <sys_check_timeouts+0x1e>
  }
}
 8006f12:	bf00      	nop
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20007c30 	.word	0x20007c30
 8006f20:	20007c34 	.word	0x20007c34

08006f24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8006f28:	bf00      	nop
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8006f3a:	4b17      	ldr	r3, [pc, #92]	; (8006f98 <udp_new_port+0x68>)
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	b291      	uxth	r1, r2
 8006f42:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <udp_new_port+0x68>)
 8006f44:	8011      	strh	r1, [r2, #0]
 8006f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d103      	bne.n	8006f56 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8006f4e:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <udp_new_port+0x68>)
 8006f50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006f54:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f56:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <udp_new_port+0x6c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	e011      	b.n	8006f82 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	8a5a      	ldrh	r2, [r3, #18]
 8006f62:	4b0d      	ldr	r3, [pc, #52]	; (8006f98 <udp_new_port+0x68>)
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d108      	bne.n	8006f7c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	80fb      	strh	r3, [r7, #6]
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f76:	d3e0      	bcc.n	8006f3a <udp_new_port+0xa>
        return 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e007      	b.n	8006f8c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	603b      	str	r3, [r7, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1ea      	bne.n	8006f5e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8006f88:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <udp_new_port+0x68>)
 8006f8a:	881b      	ldrh	r3, [r3, #0]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	2000000a 	.word	0x2000000a
 8006f9c:	20007c38 	.word	0x20007c38

08006fa0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d018      	beq.n	8006fe6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d013      	beq.n	8006fe2 <udp_input_local_match+0x42>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00f      	beq.n	8006fe2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8006fc2:	4b13      	ldr	r3, [pc, #76]	; (8007010 <udp_input_local_match+0x70>)
 8006fc4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fca:	d00a      	beq.n	8006fe2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <udp_input_local_match+0x70>)
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	405a      	eors	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d110      	bne.n	8007004 <udp_input_local_match+0x64>
          return 1;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e00f      	b.n	8007006 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d009      	beq.n	8007000 <udp_input_local_match+0x60>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <udp_input_local_match+0x60>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <udp_input_local_match+0x70>)
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d101      	bne.n	8007004 <udp_input_local_match+0x64>
      return 1;
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr
 8007010:	20004bd4 	.word	0x20004bd4

08007014 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b08d      	sub	sp, #52	; 0x34
 8007018:	af02      	add	r7, sp, #8
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	895b      	ldrh	r3, [r3, #10]
 8007026:	2b07      	cmp	r3, #7
 8007028:	d803      	bhi.n	8007032 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fc50 	bl	80068d0 <pbuf_free>
    goto end;
 8007030:	e0c6      	b.n	80071c0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8007038:	4b63      	ldr	r3, [pc, #396]	; (80071c8 <udp_input+0x1b4>)
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	4a62      	ldr	r2, [pc, #392]	; (80071c8 <udp_input+0x1b4>)
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fd78 	bl	8008b38 <ip4_addr_isbroadcast_u32>
 8007048:	4603      	mov	r3, r0
 800704a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fb81 	bl	800575a <lwip_htons>
 8007058:	4603      	mov	r3, r0
 800705a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	885b      	ldrh	r3, [r3, #2]
 8007060:	b29b      	uxth	r3, r3
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fb79 	bl	800575a <lwip_htons>
 8007068:	4603      	mov	r3, r0
 800706a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800706c:	2300      	movs	r3, #0
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007078:	4b54      	ldr	r3, [pc, #336]	; (80071cc <udp_input+0x1b8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
 800707e:	e03b      	b.n	80070f8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	8a5b      	ldrh	r3, [r3, #18]
 8007084:	89fa      	ldrh	r2, [r7, #14]
 8007086:	429a      	cmp	r2, r3
 8007088:	d131      	bne.n	80070ee <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800708a:	7cfb      	ldrb	r3, [r7, #19]
 800708c:	461a      	mov	r2, r3
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007092:	f7ff ff85 	bl	8006fa0 <udp_input_local_match>
 8007096:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8007098:	2b00      	cmp	r3, #0
 800709a:	d028      	beq.n	80070ee <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	7c1b      	ldrb	r3, [r3, #16]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <udp_input+0x9e>
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	8a9b      	ldrh	r3, [r3, #20]
 80070b6:	8a3a      	ldrh	r2, [r7, #16]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d118      	bne.n	80070ee <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	4b3f      	ldr	r3, [pc, #252]	; (80071c8 <udp_input+0x1b4>)
 80070ca:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d10e      	bne.n	80070ee <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d014      	beq.n	8007100 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80070de:	4b3b      	ldr	r3, [pc, #236]	; (80071cc <udp_input+0x1b8>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80070e6:	4a39      	ldr	r2, [pc, #228]	; (80071cc <udp_input+0x1b8>)
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80070ec:	e008      	b.n	8007100 <udp_input+0xec>
      }
    }

    prev = pcb;
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1c0      	bne.n	8007080 <udp_input+0x6c>
 80070fe:	e000      	b.n	8007102 <udp_input+0xee>
        break;
 8007100:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <udp_input+0xf8>
    pcb = uncon_pcb;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <udp_input+0x104>
    for_us = 1;
 8007112:	2301      	movs	r3, #1
 8007114:	76fb      	strb	r3, [r7, #27]
 8007116:	e00a      	b.n	800712e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	3304      	adds	r3, #4
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b2a      	ldr	r3, [pc, #168]	; (80071c8 <udp_input+0x1b4>)
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	429a      	cmp	r2, r3
 8007124:	bf0c      	ite	eq
 8007126:	2301      	moveq	r3, #1
 8007128:	2300      	movne	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800712e:	7efb      	ldrb	r3, [r7, #27]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d042      	beq.n	80071ba <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8007134:	f06f 0107 	mvn.w	r1, #7
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fba5 	bl	8006888 <pbuf_header>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8007144:	4b22      	ldr	r3, [pc, #136]	; (80071d0 <udp_input+0x1bc>)
 8007146:	f240 1255 	movw	r2, #341	; 0x155
 800714a:	4922      	ldr	r1, [pc, #136]	; (80071d4 <udp_input+0x1c0>)
 800714c:	4822      	ldr	r0, [pc, #136]	; (80071d8 <udp_input+0x1c4>)
 800714e:	f002 fc9f 	bl	8009a90 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fbbc 	bl	80068d0 <pbuf_free>
      goto end;
 8007158:	e032      	b.n	80071c0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d012      	beq.n	8007186 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	699c      	ldr	r4, [r3, #24]
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	69d8      	ldr	r0, [r3, #28]
 8007170:	8a3b      	ldrh	r3, [r7, #16]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	4b19      	ldr	r3, [pc, #100]	; (80071dc <udp_input+0x1c8>)
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800717a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800717c:	e021      	b.n	80071c2 <udp_input+0x1ae>
        pbuf_free(p);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fba6 	bl	80068d0 <pbuf_free>
        goto end;
 8007184:	e01c      	b.n	80071c0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8007186:	7cfb      	ldrb	r3, [r7, #19]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d112      	bne.n	80071b2 <udp_input+0x19e>
 800718c:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <udp_input+0x1b4>)
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007194:	2be0      	cmp	r3, #224	; 0xe0
 8007196:	d00c      	beq.n	80071b2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8007198:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <udp_input+0x1b4>)
 800719a:	899b      	ldrh	r3, [r3, #12]
 800719c:	3308      	adds	r3, #8
 800719e:	b29b      	uxth	r3, r3
 80071a0:	b21b      	sxth	r3, r3
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fb81 	bl	80068ac <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80071aa:	2103      	movs	r1, #3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f9c9 	bl	8008544 <icmp_dest_unreach>
      pbuf_free(p);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fb8c 	bl	80068d0 <pbuf_free>
  return;
 80071b8:	e003      	b.n	80071c2 <udp_input+0x1ae>
    pbuf_free(p);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fb88 	bl	80068d0 <pbuf_free>
  return;
 80071c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80071c2:	372c      	adds	r7, #44	; 0x2c
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd90      	pop	{r4, r7, pc}
 80071c8:	20004bd4 	.word	0x20004bd4
 80071cc:	20007c38 	.word	0x20007c38
 80071d0:	0800b198 	.word	0x0800b198
 80071d4:	0800b1c8 	.word	0x0800b1c8
 80071d8:	0800b1dc 	.word	0x0800b1dc
 80071dc:	20004be4 	.word	0x20004be4

080071e0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <udp_sendto+0x1e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d102      	bne.n	8007204 <udp_sendto+0x24>
    return ERR_VAL;
 80071fe:	f06f 0305 	mvn.w	r3, #5
 8007202:	e013      	b.n	800722c <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8007204:	6978      	ldr	r0, [r7, #20]
 8007206:	f001 fa25 	bl	8008654 <ip4_route>
 800720a:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d102      	bne.n	8007218 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8007212:	f06f 0303 	mvn.w	r3, #3
 8007216:	e009      	b.n	800722c <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8007218:	887a      	ldrh	r2, [r7, #2]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f805 	bl	8007234 <udp_sendto_if>
 800722a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <udp_sendto_if+0x1a>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <udp_sendto_if+0x20>
    return ERR_VAL;
 800724e:	f06f 0305 	mvn.w	r3, #5
 8007252:	e028      	b.n	80072a6 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <udp_sendto_if+0x3a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800726a:	2be0      	cmp	r3, #224	; 0xe0
 800726c:	d103      	bne.n	8007276 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	3304      	adds	r3, #4
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e00b      	b.n	800728e <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	3304      	adds	r3, #4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d002      	beq.n	800728a <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8007284:	f06f 0303 	mvn.w	r3, #3
 8007288:	e00d      	b.n	80072a6 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800728e:	887a      	ldrh	r2, [r7, #2]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4613      	mov	r3, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f806 	bl	80072b0 <udp_sendto_if_src>
 80072a4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08c      	sub	sp, #48	; 0x30
 80072b4:	af04      	add	r7, sp, #16
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <udp_sendto_if_src+0x1a>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 80072ca:	f06f 0305 	mvn.w	r3, #5
 80072ce:	e07e      	b.n	80073ce <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8a5b      	ldrh	r3, [r3, #18]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10f      	bne.n	80072f8 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8a5b      	ldrh	r3, [r3, #18]
 80072de:	461a      	mov	r2, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f87f 	bl	80073e4 <udp_bind>
 80072e6:	4603      	mov	r3, r0
 80072e8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80072ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80072f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072f6:	e06a      	b.n	80073ce <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80072f8:	2108      	movs	r1, #8
 80072fa:	68b8      	ldr	r0, [r7, #8]
 80072fc:	f7ff fac4 	bl	8006888 <pbuf_header>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d014      	beq.n	8007330 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8007306:	2200      	movs	r2, #0
 8007308:	2108      	movs	r1, #8
 800730a:	2001      	movs	r0, #1
 800730c:	f7fe ff6c 	bl	80061e8 <pbuf_alloc>
 8007310:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8007318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800731c:	e057      	b.n	80073ce <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	891b      	ldrh	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d006      	beq.n	8007334 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	69f8      	ldr	r0, [r7, #28]
 800732a:	f7ff fbf3 	bl	8006b14 <pbuf_chain>
 800732e:	e001      	b.n	8007334 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	895b      	ldrh	r3, [r3, #10]
 8007338:	2b07      	cmp	r3, #7
 800733a:	d806      	bhi.n	800734a <udp_sendto_if_src+0x9a>
 800733c:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <udp_sendto_if_src+0x128>)
 800733e:	f240 22db 	movw	r2, #731	; 0x2db
 8007342:	4926      	ldr	r1, [pc, #152]	; (80073dc <udp_sendto_if_src+0x12c>)
 8007344:	4826      	ldr	r0, [pc, #152]	; (80073e0 <udp_sendto_if_src+0x130>)
 8007346:	f002 fba3 	bl	8009a90 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8a5b      	ldrh	r3, [r3, #18]
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fa00 	bl	800575a <lwip_htons>
 800735a:	4603      	mov	r3, r0
 800735c:	461a      	mov	r2, r3
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8007362:	887b      	ldrh	r3, [r7, #2]
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe f9f8 	bl	800575a <lwip_htons>
 800736a:	4603      	mov	r3, r0
 800736c:	461a      	mov	r2, r3
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2200      	movs	r2, #0
 8007376:	719a      	strb	r2, [r3, #6]
 8007378:	2200      	movs	r2, #0
 800737a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	891b      	ldrh	r3, [r3, #8]
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe f9ea 	bl	800575a <lwip_htons>
 8007386:	4603      	mov	r3, r0
 8007388:	461a      	mov	r2, r3
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800738e:	2311      	movs	r3, #17
 8007390:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	7a9b      	ldrb	r3, [r3, #10]
 8007396:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	7a5b      	ldrb	r3, [r3, #9]
 800739c:	7cb9      	ldrb	r1, [r7, #18]
 800739e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073a0:	9202      	str	r2, [sp, #8]
 80073a2:	7cfa      	ldrb	r2, [r7, #19]
 80073a4:	9201      	str	r2, [sp, #4]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	460b      	mov	r3, r1
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073ae:	69f8      	ldr	r0, [r7, #28]
 80073b0:	f001 fb1a 	bl	80089e8 <ip4_output_if_src>
 80073b4:	4603      	mov	r3, r0
 80073b6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80073b8:	69fa      	ldr	r2, [r7, #28]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d004      	beq.n	80073ca <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 80073c0:	69f8      	ldr	r0, [r7, #28]
 80073c2:	f7ff fa85 	bl	80068d0 <pbuf_free>
    q = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80073ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	0800b198 	.word	0x0800b198
 80073dc:	0800b204 	.word	0x0800b204
 80073e0:	0800b1dc 	.word	0x0800b1dc

080073e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80073f8:	4b30      	ldr	r3, [pc, #192]	; (80074bc <udp_bind+0xd8>)
 80073fa:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <udp_bind+0x24>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <udp_bind+0x2a>
    return ERR_VAL;
 8007408:	f06f 0305 	mvn.w	r3, #5
 800740c:	e052      	b.n	80074b4 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007412:	4b2b      	ldr	r3, [pc, #172]	; (80074c0 <udp_bind+0xdc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e009      	b.n	800742e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	429a      	cmp	r2, r3
 8007420:	d102      	bne.n	8007428 <udp_bind+0x44>
      rebind = 1;
 8007422:	2301      	movs	r3, #1
 8007424:	74fb      	strb	r3, [r7, #19]
      break;
 8007426:	e005      	b.n	8007434 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1f2      	bne.n	800741a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d109      	bne.n	800744e <udp_bind+0x6a>
    port = udp_new_port();
 800743a:	f7ff fd79 	bl	8006f30 <udp_new_port>
 800743e:	4603      	mov	r3, r0
 8007440:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007442:	88fb      	ldrh	r3, [r7, #6]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d11e      	bne.n	8007486 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8007448:	f06f 0307 	mvn.w	r3, #7
 800744c:	e032      	b.n	80074b4 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800744e:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <udp_bind+0xdc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	e014      	b.n	8007480 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	429a      	cmp	r2, r3
 800745c:	d00d      	beq.n	800747a <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	8a5b      	ldrh	r3, [r3, #18]
 8007462:	88fa      	ldrh	r2, [r7, #6]
 8007464:	429a      	cmp	r2, r3
 8007466:	d108      	bne.n	800747a <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8007470:	429a      	cmp	r2, r3
 8007472:	d102      	bne.n	800747a <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8007474:	f06f 0307 	mvn.w	r3, #7
 8007478:	e01c      	b.n	80074b4 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e7      	bne.n	8007456 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <udp_bind+0xae>
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	e000      	b.n	8007494 <udp_bind+0xb0>
 8007492:	2300      	movs	r3, #0
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800749e:	7cfb      	ldrb	r3, [r7, #19]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <udp_bind+0xdc>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80074ac:	4a04      	ldr	r2, [pc, #16]	; (80074c0 <udp_bind+0xdc>)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	0800b958 	.word	0x0800b958
 80074c0:	20007c38 	.word	0x20007c38

080074c4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	61da      	str	r2, [r3, #28]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr

080074e6 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80074ec:	2000      	movs	r0, #0
 80074ee:	f7fe fcc3 	bl	8005e78 <memp_malloc>
 80074f2:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80074fa:	2220      	movs	r2, #32
 80074fc:	2100      	movs	r1, #0
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f002 fb2b 	bl	8009b5a <memset>
    pcb->ttl = UDP_TTL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	22ff      	movs	r2, #255	; 0xff
 8007508:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800750a:	687b      	ldr	r3, [r7, #4]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01e      	beq.n	8007562 <udp_netif_ip_addr_changed+0x4e>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01a      	beq.n	8007562 <udp_netif_ip_addr_changed+0x4e>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d017      	beq.n	8007562 <udp_netif_ip_addr_changed+0x4e>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d013      	beq.n	8007562 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <udp_netif_ip_addr_changed+0x58>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	e00c      	b.n	800755c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d103      	bne.n	8007556 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1ef      	bne.n	8007542 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8007562:	bf00      	nop
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr
 800756c:	20007c38 	.word	0x20007c38

08007570 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8007578:	4915      	ldr	r1, [pc, #84]	; (80075d0 <etharp_free_entry+0x60>)
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4413      	add	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	440b      	add	r3, r1
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d013      	beq.n	80075b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800758c:	4910      	ldr	r1, [pc, #64]	; (80075d0 <etharp_free_entry+0x60>)
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	4413      	add	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	440b      	add	r3, r1
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff f997 	bl	80068d0 <pbuf_free>
    arp_table[i].q = NULL;
 80075a2:	490b      	ldr	r1, [pc, #44]	; (80075d0 <etharp_free_entry+0x60>)
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	4413      	add	r3, r2
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	440b      	add	r3, r1
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80075b4:	4906      	ldr	r1, [pc, #24]	; (80075d0 <etharp_free_entry+0x60>)
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	4613      	mov	r3, r2
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	4413      	add	r3, r2
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	440b      	add	r3, r1
 80075c2:	3314      	adds	r3, #20
 80075c4:	2200      	movs	r2, #0
 80075c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20007c3c 	.word	0x20007c3c

080075d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80075da:	2300      	movs	r3, #0
 80075dc:	71fb      	strb	r3, [r7, #7]
 80075de:	e096      	b.n	800770e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80075e0:	79fa      	ldrb	r2, [r7, #7]
 80075e2:	494f      	ldr	r1, [pc, #316]	; (8007720 <etharp_tmr+0x14c>)
 80075e4:	4613      	mov	r3, r2
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	4413      	add	r3, r2
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	440b      	add	r3, r1
 80075ee:	3314      	adds	r3, #20
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80075f4:	79bb      	ldrb	r3, [r7, #6]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8086 	beq.w	8007708 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80075fc:	79fa      	ldrb	r2, [r7, #7]
 80075fe:	4948      	ldr	r1, [pc, #288]	; (8007720 <etharp_tmr+0x14c>)
 8007600:	4613      	mov	r3, r2
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	440b      	add	r3, r1
 800760a:	3312      	adds	r3, #18
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	3301      	adds	r3, #1
 8007610:	b298      	uxth	r0, r3
 8007612:	4943      	ldr	r1, [pc, #268]	; (8007720 <etharp_tmr+0x14c>)
 8007614:	4613      	mov	r3, r2
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	440b      	add	r3, r1
 800761e:	3312      	adds	r3, #18
 8007620:	4602      	mov	r2, r0
 8007622:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007624:	79fa      	ldrb	r2, [r7, #7]
 8007626:	493e      	ldr	r1, [pc, #248]	; (8007720 <etharp_tmr+0x14c>)
 8007628:	4613      	mov	r3, r2
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	4413      	add	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	440b      	add	r3, r1
 8007632:	3312      	adds	r3, #18
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800763a:	d215      	bcs.n	8007668 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800763c:	79fa      	ldrb	r2, [r7, #7]
 800763e:	4938      	ldr	r1, [pc, #224]	; (8007720 <etharp_tmr+0x14c>)
 8007640:	4613      	mov	r3, r2
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	4413      	add	r3, r2
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	440b      	add	r3, r1
 800764a:	3314      	adds	r3, #20
 800764c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800764e:	2b01      	cmp	r3, #1
 8007650:	d10f      	bne.n	8007672 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8007652:	79fa      	ldrb	r2, [r7, #7]
 8007654:	4932      	ldr	r1, [pc, #200]	; (8007720 <etharp_tmr+0x14c>)
 8007656:	4613      	mov	r3, r2
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	4413      	add	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	440b      	add	r3, r1
 8007660:	3312      	adds	r3, #18
 8007662:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007664:	2b04      	cmp	r3, #4
 8007666:	d904      	bls.n	8007672 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff ff80 	bl	8007570 <etharp_free_entry>
 8007670:	e04a      	b.n	8007708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8007672:	79fa      	ldrb	r2, [r7, #7]
 8007674:	492a      	ldr	r1, [pc, #168]	; (8007720 <etharp_tmr+0x14c>)
 8007676:	4613      	mov	r3, r2
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	4413      	add	r3, r2
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	440b      	add	r3, r1
 8007680:	3314      	adds	r3, #20
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d10a      	bne.n	800769e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007688:	79fa      	ldrb	r2, [r7, #7]
 800768a:	4925      	ldr	r1, [pc, #148]	; (8007720 <etharp_tmr+0x14c>)
 800768c:	4613      	mov	r3, r2
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	440b      	add	r3, r1
 8007696:	3314      	adds	r3, #20
 8007698:	2204      	movs	r2, #4
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e034      	b.n	8007708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800769e:	79fa      	ldrb	r2, [r7, #7]
 80076a0:	491f      	ldr	r1, [pc, #124]	; (8007720 <etharp_tmr+0x14c>)
 80076a2:	4613      	mov	r3, r2
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	4413      	add	r3, r2
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	440b      	add	r3, r1
 80076ac:	3314      	adds	r3, #20
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d10a      	bne.n	80076ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80076b4:	79fa      	ldrb	r2, [r7, #7]
 80076b6:	491a      	ldr	r1, [pc, #104]	; (8007720 <etharp_tmr+0x14c>)
 80076b8:	4613      	mov	r3, r2
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	4413      	add	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	440b      	add	r3, r1
 80076c2:	3314      	adds	r3, #20
 80076c4:	2202      	movs	r2, #2
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e01e      	b.n	8007708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80076ca:	79fa      	ldrb	r2, [r7, #7]
 80076cc:	4914      	ldr	r1, [pc, #80]	; (8007720 <etharp_tmr+0x14c>)
 80076ce:	4613      	mov	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	440b      	add	r3, r1
 80076d8:	3314      	adds	r3, #20
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d113      	bne.n	8007708 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80076e0:	79fa      	ldrb	r2, [r7, #7]
 80076e2:	490f      	ldr	r1, [pc, #60]	; (8007720 <etharp_tmr+0x14c>)
 80076e4:	4613      	mov	r3, r2
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	4413      	add	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	440b      	add	r3, r1
 80076ee:	3308      	adds	r3, #8
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	79fa      	ldrb	r2, [r7, #7]
 80076f4:	4613      	mov	r3, r2
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	4413      	add	r3, r2
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	4a08      	ldr	r2, [pc, #32]	; (8007720 <etharp_tmr+0x14c>)
 80076fe:	4413      	add	r3, r2
 8007700:	3304      	adds	r3, #4
 8007702:	4619      	mov	r1, r3
 8007704:	f000 fe06 	bl	8008314 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	3301      	adds	r3, #1
 800770c:	71fb      	strb	r3, [r7, #7]
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	2b09      	cmp	r3, #9
 8007712:	f67f af65 	bls.w	80075e0 <etharp_tmr+0xc>
      }
    }
  }
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20007c3c 	.word	0x20007c3c

08007724 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	460b      	mov	r3, r1
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8007732:	230a      	movs	r3, #10
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	230a      	movs	r3, #10
 8007738:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800773a:	230a      	movs	r3, #10
 800773c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8007742:	230a      	movs	r3, #10
 8007744:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	833b      	strh	r3, [r7, #24]
 800774a:	2300      	movs	r3, #0
 800774c:	82fb      	strh	r3, [r7, #22]
 800774e:	2300      	movs	r3, #0
 8007750:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007752:	2300      	movs	r3, #0
 8007754:	773b      	strb	r3, [r7, #28]
 8007756:	e093      	b.n	8007880 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8007758:	7f3a      	ldrb	r2, [r7, #28]
 800775a:	4990      	ldr	r1, [pc, #576]	; (800799c <etharp_find_entry+0x278>)
 800775c:	4613      	mov	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	4413      	add	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	440b      	add	r3, r1
 8007766:	3314      	adds	r3, #20
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800776c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007770:	2b0a      	cmp	r3, #10
 8007772:	d105      	bne.n	8007780 <etharp_find_entry+0x5c>
 8007774:	7cfb      	ldrb	r3, [r7, #19]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800777a:	7f3b      	ldrb	r3, [r7, #28]
 800777c:	777b      	strb	r3, [r7, #29]
 800777e:	e07c      	b.n	800787a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8007780:	7cfb      	ldrb	r3, [r7, #19]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d079      	beq.n	800787a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8007786:	7cfb      	ldrb	r3, [r7, #19]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d009      	beq.n	80077a0 <etharp_find_entry+0x7c>
 800778c:	7cfb      	ldrb	r3, [r7, #19]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d806      	bhi.n	80077a0 <etharp_find_entry+0x7c>
 8007792:	4b83      	ldr	r3, [pc, #524]	; (80079a0 <etharp_find_entry+0x27c>)
 8007794:	f240 1225 	movw	r2, #293	; 0x125
 8007798:	4982      	ldr	r1, [pc, #520]	; (80079a4 <etharp_find_entry+0x280>)
 800779a:	4883      	ldr	r0, [pc, #524]	; (80079a8 <etharp_find_entry+0x284>)
 800779c:	f002 f978 	bl	8009a90 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00f      	beq.n	80077c6 <etharp_find_entry+0xa2>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6819      	ldr	r1, [r3, #0]
 80077aa:	7f3a      	ldrb	r2, [r7, #28]
 80077ac:	487b      	ldr	r0, [pc, #492]	; (800799c <etharp_find_entry+0x278>)
 80077ae:	4613      	mov	r3, r2
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	4413      	add	r3, r2
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	4403      	add	r3, r0
 80077b8:	3304      	adds	r3, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4299      	cmp	r1, r3
 80077be:	d102      	bne.n	80077c6 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80077c0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80077c4:	e0e5      	b.n	8007992 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80077c6:	7cfb      	ldrb	r3, [r7, #19]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d13b      	bne.n	8007844 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80077cc:	7f3a      	ldrb	r2, [r7, #28]
 80077ce:	4973      	ldr	r1, [pc, #460]	; (800799c <etharp_find_entry+0x278>)
 80077d0:	4613      	mov	r3, r2
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	440b      	add	r3, r1
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d018      	beq.n	8007812 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80077e0:	7f3a      	ldrb	r2, [r7, #28]
 80077e2:	496e      	ldr	r1, [pc, #440]	; (800799c <etharp_find_entry+0x278>)
 80077e4:	4613      	mov	r3, r2
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	4413      	add	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	440b      	add	r3, r1
 80077ee:	3312      	adds	r3, #18
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	8b3a      	ldrh	r2, [r7, #24]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d840      	bhi.n	800787a <etharp_find_entry+0x156>
            old_queue = i;
 80077f8:	7f3b      	ldrb	r3, [r7, #28]
 80077fa:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80077fc:	7f3a      	ldrb	r2, [r7, #28]
 80077fe:	4967      	ldr	r1, [pc, #412]	; (800799c <etharp_find_entry+0x278>)
 8007800:	4613      	mov	r3, r2
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	4413      	add	r3, r2
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	440b      	add	r3, r1
 800780a:	3312      	adds	r3, #18
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	833b      	strh	r3, [r7, #24]
 8007810:	e033      	b.n	800787a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8007812:	7f3a      	ldrb	r2, [r7, #28]
 8007814:	4961      	ldr	r1, [pc, #388]	; (800799c <etharp_find_entry+0x278>)
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	440b      	add	r3, r1
 8007820:	3312      	adds	r3, #18
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	8afa      	ldrh	r2, [r7, #22]
 8007826:	429a      	cmp	r2, r3
 8007828:	d827      	bhi.n	800787a <etharp_find_entry+0x156>
            old_pending = i;
 800782a:	7f3b      	ldrb	r3, [r7, #28]
 800782c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800782e:	7f3a      	ldrb	r2, [r7, #28]
 8007830:	495a      	ldr	r1, [pc, #360]	; (800799c <etharp_find_entry+0x278>)
 8007832:	4613      	mov	r3, r2
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	4413      	add	r3, r2
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	440b      	add	r3, r1
 800783c:	3312      	adds	r3, #18
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	82fb      	strh	r3, [r7, #22]
 8007842:	e01a      	b.n	800787a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8007844:	7cfb      	ldrb	r3, [r7, #19]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d917      	bls.n	800787a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800784a:	7f3a      	ldrb	r2, [r7, #28]
 800784c:	4953      	ldr	r1, [pc, #332]	; (800799c <etharp_find_entry+0x278>)
 800784e:	4613      	mov	r3, r2
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4413      	add	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	440b      	add	r3, r1
 8007858:	3312      	adds	r3, #18
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	8aba      	ldrh	r2, [r7, #20]
 800785e:	429a      	cmp	r2, r3
 8007860:	d80b      	bhi.n	800787a <etharp_find_entry+0x156>
            old_stable = i;
 8007862:	7f3b      	ldrb	r3, [r7, #28]
 8007864:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8007866:	7f3a      	ldrb	r2, [r7, #28]
 8007868:	494c      	ldr	r1, [pc, #304]	; (800799c <etharp_find_entry+0x278>)
 800786a:	4613      	mov	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4413      	add	r3, r2
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	440b      	add	r3, r1
 8007874:	3312      	adds	r3, #18
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800787a:	7f3b      	ldrb	r3, [r7, #28]
 800787c:	3301      	adds	r3, #1
 800787e:	773b      	strb	r3, [r7, #28]
 8007880:	7f3b      	ldrb	r3, [r7, #28]
 8007882:	2b09      	cmp	r3, #9
 8007884:	f67f af68 	bls.w	8007758 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d108      	bne.n	80078a4 <etharp_find_entry+0x180>
 8007892:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007896:	2b0a      	cmp	r3, #10
 8007898:	d107      	bne.n	80078aa <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800789a:	7afb      	ldrb	r3, [r7, #11]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a8:	e073      	b.n	8007992 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80078aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80078ae:	2b09      	cmp	r3, #9
 80078b0:	dc02      	bgt.n	80078b8 <etharp_find_entry+0x194>
    i = empty;
 80078b2:	7f7b      	ldrb	r3, [r7, #29]
 80078b4:	773b      	strb	r3, [r7, #28]
 80078b6:	e036      	b.n	8007926 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80078b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80078bc:	2b09      	cmp	r3, #9
 80078be:	dc13      	bgt.n	80078e8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80078c0:	7fbb      	ldrb	r3, [r7, #30]
 80078c2:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80078c4:	7f3a      	ldrb	r2, [r7, #28]
 80078c6:	4935      	ldr	r1, [pc, #212]	; (800799c <etharp_find_entry+0x278>)
 80078c8:	4613      	mov	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	440b      	add	r3, r1
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d018      	beq.n	800790a <etharp_find_entry+0x1e6>
 80078d8:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <etharp_find_entry+0x27c>)
 80078da:	f240 126f 	movw	r2, #367	; 0x16f
 80078de:	4933      	ldr	r1, [pc, #204]	; (80079ac <etharp_find_entry+0x288>)
 80078e0:	4831      	ldr	r0, [pc, #196]	; (80079a8 <etharp_find_entry+0x284>)
 80078e2:	f002 f8d5 	bl	8009a90 <iprintf>
 80078e6:	e010      	b.n	800790a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80078e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80078ec:	2b09      	cmp	r3, #9
 80078ee:	dc02      	bgt.n	80078f6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80078f0:	7ffb      	ldrb	r3, [r7, #31]
 80078f2:	773b      	strb	r3, [r7, #28]
 80078f4:	e009      	b.n	800790a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80078f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80078fa:	2b09      	cmp	r3, #9
 80078fc:	dc02      	bgt.n	8007904 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80078fe:	7efb      	ldrb	r3, [r7, #27]
 8007900:	773b      	strb	r3, [r7, #28]
 8007902:	e002      	b.n	800790a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8007904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007908:	e043      	b.n	8007992 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800790a:	7f3b      	ldrb	r3, [r7, #28]
 800790c:	2b09      	cmp	r3, #9
 800790e:	d906      	bls.n	800791e <etharp_find_entry+0x1fa>
 8007910:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <etharp_find_entry+0x27c>)
 8007912:	f240 1281 	movw	r2, #385	; 0x181
 8007916:	4926      	ldr	r1, [pc, #152]	; (80079b0 <etharp_find_entry+0x28c>)
 8007918:	4823      	ldr	r0, [pc, #140]	; (80079a8 <etharp_find_entry+0x284>)
 800791a:	f002 f8b9 	bl	8009a90 <iprintf>
    etharp_free_entry(i);
 800791e:	7f3b      	ldrb	r3, [r7, #28]
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fe25 	bl	8007570 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8007926:	7f3b      	ldrb	r3, [r7, #28]
 8007928:	2b09      	cmp	r3, #9
 800792a:	d906      	bls.n	800793a <etharp_find_entry+0x216>
 800792c:	4b1c      	ldr	r3, [pc, #112]	; (80079a0 <etharp_find_entry+0x27c>)
 800792e:	f240 1285 	movw	r2, #389	; 0x185
 8007932:	491f      	ldr	r1, [pc, #124]	; (80079b0 <etharp_find_entry+0x28c>)
 8007934:	481c      	ldr	r0, [pc, #112]	; (80079a8 <etharp_find_entry+0x284>)
 8007936:	f002 f8ab 	bl	8009a90 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800793a:	7f3a      	ldrb	r2, [r7, #28]
 800793c:	4917      	ldr	r1, [pc, #92]	; (800799c <etharp_find_entry+0x278>)
 800793e:	4613      	mov	r3, r2
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	4413      	add	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	440b      	add	r3, r1
 8007948:	3314      	adds	r3, #20
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <etharp_find_entry+0x23a>
 8007950:	4b13      	ldr	r3, [pc, #76]	; (80079a0 <etharp_find_entry+0x27c>)
 8007952:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8007956:	4917      	ldr	r1, [pc, #92]	; (80079b4 <etharp_find_entry+0x290>)
 8007958:	4813      	ldr	r0, [pc, #76]	; (80079a8 <etharp_find_entry+0x284>)
 800795a:	f002 f899 	bl	8009a90 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8007964:	7f3a      	ldrb	r2, [r7, #28]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6819      	ldr	r1, [r3, #0]
 800796a:	480c      	ldr	r0, [pc, #48]	; (800799c <etharp_find_entry+0x278>)
 800796c:	4613      	mov	r3, r2
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	4413      	add	r3, r2
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4403      	add	r3, r0
 8007976:	3304      	adds	r3, #4
 8007978:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800797a:	7f3a      	ldrb	r2, [r7, #28]
 800797c:	4907      	ldr	r1, [pc, #28]	; (800799c <etharp_find_entry+0x278>)
 800797e:	4613      	mov	r3, r2
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4413      	add	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	440b      	add	r3, r1
 8007988:	3312      	adds	r3, #18
 800798a:	2200      	movs	r2, #0
 800798c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800798e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20007c3c 	.word	0x20007c3c
 80079a0:	0800b234 	.word	0x0800b234
 80079a4:	0800b26c 	.word	0x0800b26c
 80079a8:	0800b2ac 	.word	0x0800b2ac
 80079ac:	0800b2d4 	.word	0x0800b2d4
 80079b0:	0800b2ec 	.word	0x0800b2ec
 80079b4:	0800b300 	.word	0x0800b300

080079b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af02      	add	r7, sp, #8
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079cc:	2b06      	cmp	r3, #6
 80079ce:	d006      	beq.n	80079de <etharp_update_arp_entry+0x26>
 80079d0:	4b48      	ldr	r3, [pc, #288]	; (8007af4 <etharp_update_arp_entry+0x13c>)
 80079d2:	f240 12ab 	movw	r2, #427	; 0x1ab
 80079d6:	4948      	ldr	r1, [pc, #288]	; (8007af8 <etharp_update_arp_entry+0x140>)
 80079d8:	4848      	ldr	r0, [pc, #288]	; (8007afc <etharp_update_arp_entry+0x144>)
 80079da:	f002 f859 	bl	8009a90 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d012      	beq.n	8007a0a <etharp_update_arp_entry+0x52>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00e      	beq.n	8007a0a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68f9      	ldr	r1, [r7, #12]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 f8a0 	bl	8008b38 <ip4_addr_isbroadcast_u32>
 80079f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d105      	bne.n	8007a0a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007a06:	2be0      	cmp	r3, #224	; 0xe0
 8007a08:	d102      	bne.n	8007a10 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8007a0a:	f06f 030f 	mvn.w	r3, #15
 8007a0e:	e06c      	b.n	8007aea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4619      	mov	r1, r3
 8007a16:	68b8      	ldr	r0, [r7, #8]
 8007a18:	f7ff fe84 	bl	8007724 <etharp_find_entry>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8007a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	da02      	bge.n	8007a2e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8007a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a2c:	e05d      	b.n	8007aea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8007a2e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007a32:	4933      	ldr	r1, [pc, #204]	; (8007b00 <etharp_update_arp_entry+0x148>)
 8007a34:	4613      	mov	r3, r2
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	4413      	add	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3314      	adds	r3, #20
 8007a40:	2202      	movs	r2, #2
 8007a42:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8007a44:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007a48:	492d      	ldr	r1, [pc, #180]	; (8007b00 <etharp_update_arp_entry+0x148>)
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4413      	add	r3, r2
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	440b      	add	r3, r1
 8007a54:	3308      	adds	r3, #8
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8007a5a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	4413      	add	r3, r2
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	3308      	adds	r3, #8
 8007a68:	4a25      	ldr	r2, [pc, #148]	; (8007b00 <etharp_update_arp_entry+0x148>)
 8007a6a:	4413      	add	r3, r2
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	2206      	movs	r2, #6
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f002 f8e7 	bl	8009c46 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8007a78:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007a7c:	4920      	ldr	r1, [pc, #128]	; (8007b00 <etharp_update_arp_entry+0x148>)
 8007a7e:	4613      	mov	r3, r2
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	4413      	add	r3, r2
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	440b      	add	r3, r1
 8007a88:	3312      	adds	r3, #18
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8007a8e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007a92:	491b      	ldr	r1, [pc, #108]	; (8007b00 <etharp_update_arp_entry+0x148>)
 8007a94:	4613      	mov	r3, r2
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	4413      	add	r3, r2
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	440b      	add	r3, r1
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d021      	beq.n	8007ae8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8007aa4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007aa8:	4915      	ldr	r1, [pc, #84]	; (8007b00 <etharp_update_arp_entry+0x148>)
 8007aaa:	4613      	mov	r3, r2
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	4413      	add	r3, r2
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	440b      	add	r3, r1
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8007ab8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007abc:	4910      	ldr	r1, [pc, #64]	; (8007b00 <etharp_update_arp_entry+0x148>)
 8007abe:	4613      	mov	r3, r2
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4413      	add	r3, r2
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	440b      	add	r3, r1
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8007ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6939      	ldr	r1, [r7, #16]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f001 fecd 	bl	800987c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8007ae2:	6938      	ldr	r0, [r7, #16]
 8007ae4:	f7fe fef4 	bl	80068d0 <pbuf_free>
  }
  return ERR_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	0800b234 	.word	0x0800b234
 8007af8:	0800b32c 	.word	0x0800b32c
 8007afc:	0800b2ac 	.word	0x0800b2ac
 8007b00:	20007c3c 	.word	0x20007c3c

08007b04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8007b04:	b5b0      	push	{r4, r5, r7, lr}
 8007b06:	b08a      	sub	sp, #40	; 0x28
 8007b08:	af04      	add	r7, sp, #16
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d107      	bne.n	8007b24 <etharp_input+0x20>
 8007b14:	4b3d      	ldr	r3, [pc, #244]	; (8007c0c <etharp_input+0x108>)
 8007b16:	f44f 7222 	mov.w	r2, #648	; 0x288
 8007b1a:	493d      	ldr	r1, [pc, #244]	; (8007c10 <etharp_input+0x10c>)
 8007b1c:	483d      	ldr	r0, [pc, #244]	; (8007c14 <etharp_input+0x110>)
 8007b1e:	f001 ffb7 	bl	8009a90 <iprintf>
 8007b22:	e06f      	b.n	8007c04 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b34:	d10c      	bne.n	8007b50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8007b3a:	2b06      	cmp	r3, #6
 8007b3c:	d108      	bne.n	8007b50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d104      	bne.n	8007b50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d003      	beq.n	8007b58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7fe febd 	bl	80068d0 <pbuf_free>
    return;
 8007b56:	e055      	b.n	8007c04 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	330e      	adds	r3, #14
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	3318      	adds	r3, #24
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <etharp_input+0x74>
    for_us = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]
 8007b76:	e009      	b.n	8007b8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	bf0c      	ite	eq
 8007b84:	2301      	moveq	r3, #1
 8007b86:	2300      	movne	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f103 0208 	add.w	r2, r3, #8
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <etharp_input+0x98>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <etharp_input+0x9a>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	f107 010c 	add.w	r1, r7, #12
 8007ba2:	6838      	ldr	r0, [r7, #0]
 8007ba4:	f7ff ff08 	bl	80079b8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	88db      	ldrh	r3, [r3, #6]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb2:	d003      	beq.n	8007bbc <etharp_input+0xb8>
 8007bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb8:	d01e      	beq.n	8007bf8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8007bba:	e020      	b.n	8007bfe <etharp_input+0xfa>
    if (for_us) {
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01c      	beq.n	8007bfc <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	3208      	adds	r2, #8
      etharp_raw(netif,
 8007bdc:	2102      	movs	r1, #2
 8007bde:	9103      	str	r1, [sp, #12]
 8007be0:	f107 010c 	add.w	r1, r7, #12
 8007be4:	9102      	str	r1, [sp, #8]
 8007be6:	9201      	str	r2, [sp, #4]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	462b      	mov	r3, r5
 8007bec:	4622      	mov	r2, r4
 8007bee:	4601      	mov	r1, r0
 8007bf0:	6838      	ldr	r0, [r7, #0]
 8007bf2:	f000 fae1 	bl	80081b8 <etharp_raw>
    break;
 8007bf6:	e001      	b.n	8007bfc <etharp_input+0xf8>
    break;
 8007bf8:	bf00      	nop
 8007bfa:	e000      	b.n	8007bfe <etharp_input+0xfa>
    break;
 8007bfc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fe fe66 	bl	80068d0 <pbuf_free>
}
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bdb0      	pop	{r4, r5, r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	0800b234 	.word	0x0800b234
 8007c10:	0800b384 	.word	0x0800b384
 8007c14:	0800b2ac 	.word	0x0800b2ac

08007c18 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	4613      	mov	r3, r2
 8007c24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007c26:	79fa      	ldrb	r2, [r7, #7]
 8007c28:	4944      	ldr	r1, [pc, #272]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	4413      	add	r3, r2
 8007c30:	00db      	lsls	r3, r3, #3
 8007c32:	440b      	add	r3, r1
 8007c34:	3314      	adds	r3, #20
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d806      	bhi.n	8007c4a <etharp_output_to_arp_index+0x32>
 8007c3c:	4b40      	ldr	r3, [pc, #256]	; (8007d40 <etharp_output_to_arp_index+0x128>)
 8007c3e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8007c42:	4940      	ldr	r1, [pc, #256]	; (8007d44 <etharp_output_to_arp_index+0x12c>)
 8007c44:	4840      	ldr	r0, [pc, #256]	; (8007d48 <etharp_output_to_arp_index+0x130>)
 8007c46:	f001 ff23 	bl	8009a90 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8007c4a:	79fa      	ldrb	r2, [r7, #7]
 8007c4c:	493b      	ldr	r1, [pc, #236]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007c4e:	4613      	mov	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4413      	add	r3, r2
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	440b      	add	r3, r1
 8007c58:	3314      	adds	r3, #20
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d153      	bne.n	8007d08 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8007c60:	79fa      	ldrb	r2, [r7, #7]
 8007c62:	4936      	ldr	r1, [pc, #216]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007c64:	4613      	mov	r3, r2
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	4413      	add	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	440b      	add	r3, r1
 8007c6e:	3312      	adds	r3, #18
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8007c76:	d919      	bls.n	8007cac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8007c78:	79fa      	ldrb	r2, [r7, #7]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	4413      	add	r3, r2
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	4a2e      	ldr	r2, [pc, #184]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007c84:	4413      	add	r3, r2
 8007c86:	3304      	adds	r3, #4
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fb42 	bl	8008314 <etharp_request>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d138      	bne.n	8007d08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8007c96:	79fa      	ldrb	r2, [r7, #7]
 8007c98:	4928      	ldr	r1, [pc, #160]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	4413      	add	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	e02d      	b.n	8007d08 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8007cac:	79fa      	ldrb	r2, [r7, #7]
 8007cae:	4923      	ldr	r1, [pc, #140]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	4413      	add	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	440b      	add	r3, r1
 8007cba:	3312      	adds	r3, #18
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007cc2:	d321      	bcc.n	8007d08 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007cc4:	79fa      	ldrb	r2, [r7, #7]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	4413      	add	r3, r2
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	4a1b      	ldr	r2, [pc, #108]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007cd0:	4413      	add	r3, r2
 8007cd2:	1d19      	adds	r1, r3, #4
 8007cd4:	79fa      	ldrb	r2, [r7, #7]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	4413      	add	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	3308      	adds	r3, #8
 8007ce0:	4a16      	ldr	r2, [pc, #88]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007ce2:	4413      	add	r3, r2
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 faf1 	bl	80082d0 <etharp_request_dst>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8007cf4:	79fa      	ldrb	r2, [r7, #7]
 8007cf6:	4911      	ldr	r1, [pc, #68]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4413      	add	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	440b      	add	r3, r1
 8007d02:	3314      	adds	r3, #20
 8007d04:	2203      	movs	r2, #3
 8007d06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8007d0e:	79fa      	ldrb	r2, [r7, #7]
 8007d10:	4613      	mov	r3, r2
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	4413      	add	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	3308      	adds	r3, #8
 8007d1a:	4a08      	ldr	r2, [pc, #32]	; (8007d3c <etharp_output_to_arp_index+0x124>)
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3304      	adds	r3, #4
 8007d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d24:	9200      	str	r2, [sp, #0]
 8007d26:	460a      	mov	r2, r1
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f001 fda6 	bl	800987c <ethernet_output>
 8007d30:	4603      	mov	r3, r0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20007c3c 	.word	0x20007c3c
 8007d40:	0800b234 	.word	0x0800b234
 8007d44:	0800b3a4 	.word	0x0800b3a4
 8007d48:	0800b2ac 	.word	0x0800b2ac

08007d4c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	; 0x28
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <etharp_output+0x24>
 8007d62:	4b69      	ldr	r3, [pc, #420]	; (8007f08 <etharp_output+0x1bc>)
 8007d64:	f240 321b 	movw	r2, #795	; 0x31b
 8007d68:	4968      	ldr	r1, [pc, #416]	; (8007f0c <etharp_output+0x1c0>)
 8007d6a:	4869      	ldr	r0, [pc, #420]	; (8007f10 <etharp_output+0x1c4>)
 8007d6c:	f001 fe90 	bl	8009a90 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <etharp_output+0x38>
 8007d76:	4b64      	ldr	r3, [pc, #400]	; (8007f08 <etharp_output+0x1bc>)
 8007d78:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007d7c:	4965      	ldr	r1, [pc, #404]	; (8007f14 <etharp_output+0x1c8>)
 8007d7e:	4864      	ldr	r0, [pc, #400]	; (8007f10 <etharp_output+0x1c4>)
 8007d80:	f001 fe86 	bl	8009a90 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <etharp_output+0x4c>
 8007d8a:	4b5f      	ldr	r3, [pc, #380]	; (8007f08 <etharp_output+0x1bc>)
 8007d8c:	f240 321d 	movw	r2, #797	; 0x31d
 8007d90:	4961      	ldr	r1, [pc, #388]	; (8007f18 <etharp_output+0x1cc>)
 8007d92:	485f      	ldr	r0, [pc, #380]	; (8007f10 <etharp_output+0x1c4>)
 8007d94:	f001 fe7c 	bl	8009a90 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68f9      	ldr	r1, [r7, #12]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 feca 	bl	8008b38 <ip4_addr_isbroadcast_u32>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8007daa:	4b5c      	ldr	r3, [pc, #368]	; (8007f1c <etharp_output+0x1d0>)
 8007dac:	61fb      	str	r3, [r7, #28]
 8007dae:	e09b      	b.n	8007ee8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007db8:	2be0      	cmp	r3, #224	; 0xe0
 8007dba:	d118      	bne.n	8007dee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8007dc4:	235e      	movs	r3, #94	; 0x5e
 8007dc6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3302      	adds	r3, #2
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3303      	adds	r3, #3
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8007de6:	f107 0310 	add.w	r3, r7, #16
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	e07c      	b.n	8007ee8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3304      	adds	r3, #4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	405a      	eors	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d012      	beq.n	8007e2c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007e0c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00b      	beq.n	8007e2c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	330c      	adds	r3, #12
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	330c      	adds	r3, #12
 8007e22:	61bb      	str	r3, [r7, #24]
 8007e24:	e002      	b.n	8007e2c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8007e26:	f06f 0303 	mvn.w	r3, #3
 8007e2a:	e069      	b.n	8007f00 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8007e2c:	4b3c      	ldr	r3, [pc, #240]	; (8007f20 <etharp_output+0x1d4>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	4619      	mov	r1, r3
 8007e32:	4a3c      	ldr	r2, [pc, #240]	; (8007f24 <etharp_output+0x1d8>)
 8007e34:	460b      	mov	r3, r1
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	440b      	add	r3, r1
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3314      	adds	r3, #20
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d917      	bls.n	8007e76 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	4b35      	ldr	r3, [pc, #212]	; (8007f20 <etharp_output+0x1d4>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	4934      	ldr	r1, [pc, #208]	; (8007f24 <etharp_output+0x1d8>)
 8007e52:	4603      	mov	r3, r0
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	4403      	add	r3, r0
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	440b      	add	r3, r1
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d108      	bne.n	8007e76 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8007e64:	4b2e      	ldr	r3, [pc, #184]	; (8007f20 <etharp_output+0x1d4>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7ff fed3 	bl	8007c18 <etharp_output_to_arp_index>
 8007e72:	4603      	mov	r3, r0
 8007e74:	e044      	b.n	8007f00 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8007e76:	2300      	movs	r3, #0
 8007e78:	75fb      	strb	r3, [r7, #23]
 8007e7a:	e02a      	b.n	8007ed2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8007e7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007e80:	4928      	ldr	r1, [pc, #160]	; (8007f24 <etharp_output+0x1d8>)
 8007e82:	4613      	mov	r3, r2
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	4413      	add	r3, r2
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	440b      	add	r3, r1
 8007e8c:	3314      	adds	r3, #20
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d918      	bls.n	8007ec6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	6819      	ldr	r1, [r3, #0]
 8007e98:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8007e9c:	4821      	ldr	r0, [pc, #132]	; (8007f24 <etharp_output+0x1d8>)
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	4413      	add	r3, r2
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	4403      	add	r3, r0
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8007eac:	4299      	cmp	r1, r3
 8007eae:	d10a      	bne.n	8007ec6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8007eb0:	7dfa      	ldrb	r2, [r7, #23]
 8007eb2:	4b1b      	ldr	r3, [pc, #108]	; (8007f20 <etharp_output+0x1d4>)
 8007eb4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7ff feab 	bl	8007c18 <etharp_output_to_arp_index>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	e01c      	b.n	8007f00 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8007ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	3301      	adds	r3, #1
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	75fb      	strb	r3, [r7, #23]
 8007ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ed6:	2b09      	cmp	r3, #9
 8007ed8:	ddd0      	ble.n	8007e7c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	69b9      	ldr	r1, [r7, #24]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f822 	bl	8007f28 <etharp_query>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	e00b      	b.n	8007f00 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8007eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f001 fcbf 	bl	800987c <ethernet_output>
 8007efe:	4603      	mov	r3, r0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3720      	adds	r7, #32
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	0800b234 	.word	0x0800b234
 8007f0c:	0800b384 	.word	0x0800b384
 8007f10:	0800b2ac 	.word	0x0800b2ac
 8007f14:	0800b3d4 	.word	0x0800b3d4
 8007f18:	0800b374 	.word	0x0800b374
 8007f1c:	0800b95c 	.word	0x0800b95c
 8007f20:	20007d2c 	.word	0x20007d2c
 8007f24:	20007c3c 	.word	0x20007c3c

08007f28 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08c      	sub	sp, #48	; 0x30
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3329      	adds	r3, #41	; 0x29
 8007f38:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8007f3a:	23ff      	movs	r3, #255	; 0xff
 8007f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68f9      	ldr	r1, [r7, #12]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fdf4 	bl	8008b38 <ip4_addr_isbroadcast_u32>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10c      	bne.n	8007f70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007f5e:	2be0      	cmp	r3, #224	; 0xe0
 8007f60:	d006      	beq.n	8007f70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8007f70:	f06f 030f 	mvn.w	r3, #15
 8007f74:	e10e      	b.n	8008194 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	2101      	movs	r1, #1
 8007f7a:	68b8      	ldr	r0, [r7, #8]
 8007f7c:	f7ff fbd2 	bl	8007724 <etharp_find_entry>
 8007f80:	4603      	mov	r3, r0
 8007f82:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8007f84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	da02      	bge.n	8007f92 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8007f8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f90:	e100      	b.n	8008194 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8007f92:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8007f96:	4981      	ldr	r1, [pc, #516]	; (800819c <etharp_query+0x274>)
 8007f98:	4613      	mov	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	4413      	add	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	440b      	add	r3, r1
 8007fa2:	3314      	adds	r3, #20
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d117      	bne.n	8007fda <etharp_query+0xb2>
    is_new_entry = 1;
 8007faa:	2301      	movs	r3, #1
 8007fac:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007fae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8007fb2:	497a      	ldr	r1, [pc, #488]	; (800819c <etharp_query+0x274>)
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	4413      	add	r3, r2
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	440b      	add	r3, r1
 8007fbe:	3314      	adds	r3, #20
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8007fc4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8007fc8:	4974      	ldr	r1, [pc, #464]	; (800819c <etharp_query+0x274>)
 8007fca:	4613      	mov	r3, r2
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	4413      	add	r3, r2
 8007fd0:	00db      	lsls	r3, r3, #3
 8007fd2:	440b      	add	r3, r1
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8007fda:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8007fde:	496f      	ldr	r1, [pc, #444]	; (800819c <etharp_query+0x274>)
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	4413      	add	r3, r2
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	440b      	add	r3, r1
 8007fea:	3314      	adds	r3, #20
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d012      	beq.n	8008018 <etharp_query+0xf0>
 8007ff2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8007ff6:	4969      	ldr	r1, [pc, #420]	; (800819c <etharp_query+0x274>)
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	440b      	add	r3, r1
 8008002:	3314      	adds	r3, #20
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d806      	bhi.n	8008018 <etharp_query+0xf0>
 800800a:	4b65      	ldr	r3, [pc, #404]	; (80081a0 <etharp_query+0x278>)
 800800c:	f240 32c7 	movw	r2, #967	; 0x3c7
 8008010:	4964      	ldr	r1, [pc, #400]	; (80081a4 <etharp_query+0x27c>)
 8008012:	4865      	ldr	r0, [pc, #404]	; (80081a8 <etharp_query+0x280>)
 8008014:	f001 fd3c 	bl	8009a90 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <etharp_query+0xfc>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10c      	bne.n	800803e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f974 	bl	8008314 <etharp_request>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <etharp_query+0x116>
      return result;
 8008038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800803c:	e0aa      	b.n	8008194 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d106      	bne.n	8008052 <etharp_query+0x12a>
 8008044:	4b56      	ldr	r3, [pc, #344]	; (80081a0 <etharp_query+0x278>)
 8008046:	f240 32db 	movw	r2, #987	; 0x3db
 800804a:	4958      	ldr	r1, [pc, #352]	; (80081ac <etharp_query+0x284>)
 800804c:	4856      	ldr	r0, [pc, #344]	; (80081a8 <etharp_query+0x280>)
 800804e:	f001 fd1f 	bl	8009a90 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008052:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8008056:	4951      	ldr	r1, [pc, #324]	; (800819c <etharp_query+0x274>)
 8008058:	4613      	mov	r3, r2
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	4413      	add	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	440b      	add	r3, r1
 8008062:	3314      	adds	r3, #20
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d918      	bls.n	800809c <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800806a:	7cfa      	ldrb	r2, [r7, #19]
 800806c:	4b50      	ldr	r3, [pc, #320]	; (80081b0 <etharp_query+0x288>)
 800806e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008070:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8008074:	4613      	mov	r3, r2
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	4413      	add	r3, r2
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	3308      	adds	r3, #8
 800807e:	4a47      	ldr	r2, [pc, #284]	; (800819c <etharp_query+0x274>)
 8008080:	4413      	add	r3, r2
 8008082:	3304      	adds	r3, #4
 8008084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008088:	9200      	str	r2, [sp, #0]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f001 fbf4 	bl	800987c <ethernet_output>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800809a:	e079      	b.n	8008190 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800809c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80080a0:	493e      	ldr	r1, [pc, #248]	; (800819c <etharp_query+0x274>)
 80080a2:	4613      	mov	r3, r2
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	4413      	add	r3, r2
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	440b      	add	r3, r1
 80080ac:	3314      	adds	r3, #20
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d16d      	bne.n	8008190 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80080bc:	e01a      	b.n	80080f4 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	895a      	ldrh	r2, [r3, #10]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	891b      	ldrh	r3, [r3, #8]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d10a      	bne.n	80080e0 <etharp_query+0x1b8>
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d006      	beq.n	80080e0 <etharp_query+0x1b8>
 80080d2:	4b33      	ldr	r3, [pc, #204]	; (80081a0 <etharp_query+0x278>)
 80080d4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80080d8:	4936      	ldr	r1, [pc, #216]	; (80081b4 <etharp_query+0x28c>)
 80080da:	4833      	ldr	r0, [pc, #204]	; (80081a8 <etharp_query+0x280>)
 80080dc:	f001 fcd8 	bl	8009a90 <iprintf>
      if (p->type != PBUF_ROM) {
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	7b1b      	ldrb	r3, [r3, #12]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d002      	beq.n	80080ee <etharp_query+0x1c6>
        copy_needed = 1;
 80080e8:	2301      	movs	r3, #1
 80080ea:	61bb      	str	r3, [r7, #24]
        break;
 80080ec:	e005      	b.n	80080fa <etharp_query+0x1d2>
      }
      p = p->next;
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e1      	bne.n	80080be <etharp_query+0x196>
    }
    if (copy_needed) {
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	891b      	ldrh	r3, [r3, #8]
 8008104:	2200      	movs	r2, #0
 8008106:	4619      	mov	r1, r3
 8008108:	2002      	movs	r0, #2
 800810a:	f7fe f86d 	bl	80061e8 <pbuf_alloc>
 800810e:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d011      	beq.n	800813a <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	69f8      	ldr	r0, [r7, #28]
 800811a:	f7fe fd0b 	bl	8006b34 <pbuf_copy>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <etharp_query+0x212>
          pbuf_free(p);
 8008124:	69f8      	ldr	r0, [r7, #28]
 8008126:	f7fe fbd3 	bl	80068d0 <pbuf_free>
          p = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	e004      	b.n	800813a <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8008134:	69f8      	ldr	r0, [r7, #28]
 8008136:	f7fe fc75 	bl	8006a24 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d024      	beq.n	800818a <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8008140:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8008144:	4915      	ldr	r1, [pc, #84]	; (800819c <etharp_query+0x274>)
 8008146:	4613      	mov	r3, r2
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4413      	add	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	440b      	add	r3, r1
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8008156:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800815a:	4910      	ldr	r1, [pc, #64]	; (800819c <etharp_query+0x274>)
 800815c:	4613      	mov	r3, r2
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	4413      	add	r3, r2
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	440b      	add	r3, r1
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe fbb1 	bl	80068d0 <pbuf_free>
      }
      arp_table[i].q = p;
 800816e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8008172:	490a      	ldr	r1, [pc, #40]	; (800819c <etharp_query+0x274>)
 8008174:	4613      	mov	r3, r2
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	4413      	add	r3, r2
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	440b      	add	r3, r1
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008188:	e002      	b.n	8008190 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800818a:	23ff      	movs	r3, #255	; 0xff
 800818c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8008190:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008194:	4618      	mov	r0, r3
 8008196:	3728      	adds	r7, #40	; 0x28
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20007c3c 	.word	0x20007c3c
 80081a0:	0800b234 	.word	0x0800b234
 80081a4:	0800b3e0 	.word	0x0800b3e0
 80081a8:	0800b2ac 	.word	0x0800b2ac
 80081ac:	0800b3d4 	.word	0x0800b3d4
 80081b0:	20007d2c 	.word	0x20007d2c
 80081b4:	0800b408 	.word	0x0800b408

080081b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af02      	add	r7, sp, #8
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <etharp_raw+0x26>
 80081d0:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <etharp_raw+0x104>)
 80081d2:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80081d6:	493a      	ldr	r1, [pc, #232]	; (80082c0 <etharp_raw+0x108>)
 80081d8:	483a      	ldr	r0, [pc, #232]	; (80082c4 <etharp_raw+0x10c>)
 80081da:	f001 fc59 	bl	8009a90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80081de:	2200      	movs	r2, #0
 80081e0:	211c      	movs	r1, #28
 80081e2:	2002      	movs	r0, #2
 80081e4:	f7fe f800 	bl	80061e8 <pbuf_alloc>
 80081e8:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80081f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081f4:	e05d      	b.n	80082b2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	895b      	ldrh	r3, [r3, #10]
 80081fa:	2b1b      	cmp	r3, #27
 80081fc:	d806      	bhi.n	800820c <etharp_raw+0x54>
 80081fe:	4b2f      	ldr	r3, [pc, #188]	; (80082bc <etharp_raw+0x104>)
 8008200:	f240 4263 	movw	r2, #1123	; 0x463
 8008204:	4930      	ldr	r1, [pc, #192]	; (80082c8 <etharp_raw+0x110>)
 8008206:	482f      	ldr	r0, [pc, #188]	; (80082c4 <etharp_raw+0x10c>)
 8008208:	f001 fc42 	bl	8009a90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008212:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008214:	4618      	mov	r0, r3
 8008216:	f7fd faa0 	bl	800575a <lwip_htons>
 800821a:	4603      	mov	r3, r0
 800821c:	461a      	mov	r2, r3
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008228:	2b06      	cmp	r3, #6
 800822a:	d006      	beq.n	800823a <etharp_raw+0x82>
 800822c:	4b23      	ldr	r3, [pc, #140]	; (80082bc <etharp_raw+0x104>)
 800822e:	f240 426a 	movw	r2, #1130	; 0x46a
 8008232:	4926      	ldr	r1, [pc, #152]	; (80082cc <etharp_raw+0x114>)
 8008234:	4823      	ldr	r0, [pc, #140]	; (80082c4 <etharp_raw+0x10c>)
 8008236:	f001 fc2b 	bl	8009a90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	3308      	adds	r3, #8
 800823e:	2206      	movs	r2, #6
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f001 fcff 	bl	8009c46 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	3312      	adds	r3, #18
 800824c:	2206      	movs	r2, #6
 800824e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008250:	4618      	mov	r0, r3
 8008252:	f001 fcf8 	bl	8009c46 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	330e      	adds	r3, #14
 800825a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800825c:	6812      	ldr	r2, [r2, #0]
 800825e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	3318      	adds	r3, #24
 8008264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008266:	6812      	ldr	r2, [r2, #0]
 8008268:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2200      	movs	r2, #0
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	2200      	movs	r2, #0
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2200      	movs	r2, #0
 800827c:	f042 0208 	orr.w	r2, r2, #8
 8008280:	709a      	strb	r2, [r3, #2]
 8008282:	2200      	movs	r2, #0
 8008284:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2206      	movs	r2, #6
 800828a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2204      	movs	r2, #4
 8008290:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008292:	f640 0306 	movw	r3, #2054	; 0x806
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	69b9      	ldr	r1, [r7, #24]
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f001 faec 	bl	800987c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80082a4:	69b8      	ldr	r0, [r7, #24]
 80082a6:	f7fe fb13 	bl	80068d0 <pbuf_free>
  p = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80082ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3720      	adds	r7, #32
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	0800b234 	.word	0x0800b234
 80082c0:	0800b384 	.word	0x0800b384
 80082c4:	0800b2ac 	.word	0x0800b2ac
 80082c8:	0800b424 	.word	0x0800b424
 80082cc:	0800b458 	.word	0x0800b458

080082d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af04      	add	r7, sp, #16
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80082ec:	2201      	movs	r2, #1
 80082ee:	9203      	str	r2, [sp, #12]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	9202      	str	r2, [sp, #8]
 80082f4:	4a06      	ldr	r2, [pc, #24]	; (8008310 <etharp_request_dst+0x40>)
 80082f6:	9201      	str	r2, [sp, #4]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	4603      	mov	r3, r0
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f7ff ff5a 	bl	80081b8 <etharp_raw>
 8008304:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	0800b964 	.word	0x0800b964

08008314 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800831e:	4a05      	ldr	r2, [pc, #20]	; (8008334 <etharp_request+0x20>)
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff ffd4 	bl	80082d0 <etharp_request_dst>
 8008328:	4603      	mov	r3, r0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	0800b95c 	.word	0x0800b95c

08008338 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08e      	sub	sp, #56	; 0x38
 800833c:	af04      	add	r7, sp, #16
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8008342:	4b7a      	ldr	r3, [pc, #488]	; (800852c <icmp_input+0x1f4>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	b29b      	uxth	r3, r3
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8008358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800835a:	2b13      	cmp	r3, #19
 800835c:	f240 80d1 	bls.w	8008502 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	895b      	ldrh	r3, [r3, #10]
 8008364:	2b03      	cmp	r3, #3
 8008366:	f240 80ce 	bls.w	8008506 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8008374:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 80bb 	beq.w	80084f4 <icmp_input+0x1bc>
 800837e:	2b08      	cmp	r3, #8
 8008380:	f040 80bb 	bne.w	80084fa <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8008384:	4b6a      	ldr	r3, [pc, #424]	; (8008530 <icmp_input+0x1f8>)
 8008386:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008388:	4b68      	ldr	r3, [pc, #416]	; (800852c <icmp_input+0x1f4>)
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008390:	2be0      	cmp	r3, #224	; 0xe0
 8008392:	f000 80bf 	beq.w	8008514 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8008396:	4b65      	ldr	r3, [pc, #404]	; (800852c <icmp_input+0x1f4>)
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	4a64      	ldr	r2, [pc, #400]	; (800852c <icmp_input+0x1f4>)
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fbc9 	bl	8008b38 <ip4_addr_isbroadcast_u32>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f040 80b5 	bne.w	8008518 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	891b      	ldrh	r3, [r3, #8]
 80083b2:	2b07      	cmp	r3, #7
 80083b4:	f240 80a9 	bls.w	800850a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80083b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083ba:	330e      	adds	r3, #14
 80083bc:	b29b      	uxth	r3, r3
 80083be:	b21b      	sxth	r3, r3
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7fe fa60 	bl	8006888 <pbuf_header>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d046      	beq.n	800845c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	891a      	ldrh	r2, [r3, #8]
 80083d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083d4:	4413      	add	r3, r2
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	2200      	movs	r2, #0
 80083da:	4619      	mov	r1, r3
 80083dc:	2002      	movs	r0, #2
 80083de:	f7fd ff03 	bl	80061e8 <pbuf_alloc>
 80083e2:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8098 	beq.w	800851c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	895b      	ldrh	r3, [r3, #10]
 80083f0:	461a      	mov	r2, r3
 80083f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083f4:	3308      	adds	r3, #8
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d203      	bcs.n	8008402 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80083fa:	69b8      	ldr	r0, [r7, #24]
 80083fc:	f7fe fa68 	bl	80068d0 <pbuf_free>
        goto icmperr;
 8008400:	e08d      	b.n	800851e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fc1b 	bl	8009c46 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8008410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008412:	425b      	negs	r3, r3
 8008414:	b29b      	uxth	r3, r3
 8008416:	b21b      	sxth	r3, r3
 8008418:	4619      	mov	r1, r3
 800841a:	69b8      	ldr	r0, [r7, #24]
 800841c:	f7fe fa34 	bl	8006888 <pbuf_header>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d009      	beq.n	800843a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008426:	4b43      	ldr	r3, [pc, #268]	; (8008534 <icmp_input+0x1fc>)
 8008428:	22af      	movs	r2, #175	; 0xaf
 800842a:	4943      	ldr	r1, [pc, #268]	; (8008538 <icmp_input+0x200>)
 800842c:	4843      	ldr	r0, [pc, #268]	; (800853c <icmp_input+0x204>)
 800842e:	f001 fb2f 	bl	8009a90 <iprintf>
        pbuf_free(r);
 8008432:	69b8      	ldr	r0, [r7, #24]
 8008434:	f7fe fa4c 	bl	80068d0 <pbuf_free>
        goto icmperr;
 8008438:	e071      	b.n	800851e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	69b8      	ldr	r0, [r7, #24]
 800843e:	f7fe fb79 	bl	8006b34 <pbuf_copy>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8008448:	69b8      	ldr	r0, [r7, #24]
 800844a:	f7fe fa41 	bl	80068d0 <pbuf_free>
        goto icmperr;
 800844e:	e066      	b.n	800851e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fe fa3d 	bl	80068d0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	e015      	b.n	8008488 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800845c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800845e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8008462:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008466:	33f2      	adds	r3, #242	; 0xf2
 8008468:	b29b      	uxth	r3, r3
 800846a:	b21b      	sxth	r3, r3
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fe fa0a 	bl	8006888 <pbuf_header>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d006      	beq.n	8008488 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800847a:	4b2e      	ldr	r3, [pc, #184]	; (8008534 <icmp_input+0x1fc>)
 800847c:	22c0      	movs	r2, #192	; 0xc0
 800847e:	4930      	ldr	r1, [pc, #192]	; (8008540 <icmp_input+0x208>)
 8008480:	482e      	ldr	r0, [pc, #184]	; (800853c <icmp_input+0x204>)
 8008482:	f001 fb05 	bl	8009a90 <iprintf>
        goto icmperr;
 8008486:	e04a      	b.n	800851e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800848e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7fe f9f7 	bl	8006888 <pbuf_header>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d12b      	bne.n	80084f8 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80084ae:	4b1f      	ldr	r3, [pc, #124]	; (800852c <icmp_input+0x1f4>)
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2200      	movs	r2, #0
 80084c0:	709a      	strb	r2, [r3, #2]
 80084c2:	2200      	movs	r2, #0
 80084c4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	22ff      	movs	r2, #255	; 0xff
 80084ca:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2200      	movs	r2, #0
 80084d0:	729a      	strb	r2, [r3, #10]
 80084d2:	2200      	movs	r2, #0
 80084d4:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	9302      	str	r3, [sp, #8]
 80084da:	2301      	movs	r3, #1
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	2300      	movs	r3, #0
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	23ff      	movs	r3, #255	; 0xff
 80084e4:	2200      	movs	r2, #0
 80084e6:	69f9      	ldr	r1, [r7, #28]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fa53 	bl	8008994 <ip4_output_if>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80084f2:	e001      	b.n	80084f8 <icmp_input+0x1c0>
    break;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <icmp_input+0x1c2>
    break;
 80084f8:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fe f9e8 	bl	80068d0 <pbuf_free>
  return;
 8008500:	e011      	b.n	8008526 <icmp_input+0x1ee>
    goto lenerr;
 8008502:	bf00      	nop
 8008504:	e002      	b.n	800850c <icmp_input+0x1d4>
    goto lenerr;
 8008506:	bf00      	nop
 8008508:	e000      	b.n	800850c <icmp_input+0x1d4>
      goto lenerr;
 800850a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fe f9df 	bl	80068d0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8008512:	e008      	b.n	8008526 <icmp_input+0x1ee>
      goto icmperr;
 8008514:	bf00      	nop
 8008516:	e002      	b.n	800851e <icmp_input+0x1e6>
      goto icmperr;
 8008518:	bf00      	nop
 800851a:	e000      	b.n	800851e <icmp_input+0x1e6>
        goto icmperr;
 800851c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fe f9d6 	bl	80068d0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8008524:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8008526:	3728      	adds	r7, #40	; 0x28
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20004bd4 	.word	0x20004bd4
 8008530:	20004be8 	.word	0x20004be8
 8008534:	0800b49c 	.word	0x0800b49c
 8008538:	0800b4d4 	.word	0x0800b4d4
 800853c:	0800b50c 	.word	0x0800b50c
 8008540:	0800b534 	.word	0x0800b534

08008544 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	461a      	mov	r2, r3
 8008554:	2103      	movs	r1, #3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f814 	bl	8008584 <icmp_send_response>
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	461a      	mov	r2, r3
 8008574:	210b      	movs	r1, #11
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f804 	bl	8008584 <icmp_send_response>
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08c      	sub	sp, #48	; 0x30
 8008588:	af04      	add	r7, sp, #16
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
 8008590:	4613      	mov	r3, r2
 8008592:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8008594:	2200      	movs	r2, #0
 8008596:	2124      	movs	r1, #36	; 0x24
 8008598:	2001      	movs	r0, #1
 800859a:	f7fd fe25 	bl	80061e8 <pbuf_alloc>
 800859e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d04c      	beq.n	8008640 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	895b      	ldrh	r3, [r3, #10]
 80085aa:	2b23      	cmp	r3, #35	; 0x23
 80085ac:	d806      	bhi.n	80085bc <icmp_send_response+0x38>
 80085ae:	4b26      	ldr	r3, [pc, #152]	; (8008648 <icmp_send_response+0xc4>)
 80085b0:	f240 1261 	movw	r2, #353	; 0x161
 80085b4:	4925      	ldr	r1, [pc, #148]	; (800864c <icmp_send_response+0xc8>)
 80085b6:	4826      	ldr	r0, [pc, #152]	; (8008650 <icmp_send_response+0xcc>)
 80085b8:	f001 fa6a 	bl	8009a90 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	78ba      	ldrb	r2, [r7, #2]
 80085d2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	711a      	strb	r2, [r3, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2200      	movs	r2, #0
 80085e2:	719a      	strb	r2, [r3, #6]
 80085e4:	2200      	movs	r2, #0
 80085e6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f103 0008 	add.w	r0, r3, #8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	221c      	movs	r2, #28
 80085f6:	4619      	mov	r1, r3
 80085f8:	f001 fb25 	bl	8009c46 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008602:	f107 030c 	add.w	r3, r7, #12
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f824 	bl	8008654 <ip4_route>
 800860c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d011      	beq.n	8008638 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2200      	movs	r2, #0
 8008618:	709a      	strb	r2, [r3, #2]
 800861a:	2200      	movs	r2, #0
 800861c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800861e:	f107 020c 	add.w	r2, r7, #12
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	2301      	movs	r3, #1
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	2300      	movs	r3, #0
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	23ff      	movs	r3, #255	; 0xff
 8008630:	2100      	movs	r1, #0
 8008632:	69f8      	ldr	r0, [r7, #28]
 8008634:	f000 f9ae 	bl	8008994 <ip4_output_if>
  }
  pbuf_free(q);
 8008638:	69f8      	ldr	r0, [r7, #28]
 800863a:	f7fe f949 	bl	80068d0 <pbuf_free>
 800863e:	e000      	b.n	8008642 <icmp_send_response+0xbe>
    return;
 8008640:	bf00      	nop
}
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	0800b49c 	.word	0x0800b49c
 800864c:	0800b568 	.word	0x0800b568
 8008650:	0800b50c 	.word	0x0800b50c

08008654 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800865c:	4b30      	ldr	r3, [pc, #192]	; (8008720 <ip4_route+0xcc>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60fb      	str	r3, [r7, #12]
 8008662:	e036      	b.n	80086d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	d02b      	beq.n	80086cc <ip4_route+0x78>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800867a:	089b      	lsrs	r3, r3, #2
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d022      	beq.n	80086cc <ip4_route+0x78>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3304      	adds	r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01d      	beq.n	80086cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3304      	adds	r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	405a      	eors	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3308      	adds	r3, #8
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	e033      	b.n	8008714 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d108      	bne.n	80086cc <ip4_route+0x78>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	330c      	adds	r3, #12
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d101      	bne.n	80086cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	e023      	b.n	8008714 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1c5      	bne.n	8008664 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80086d8:	4b12      	ldr	r3, [pc, #72]	; (8008724 <ip4_route+0xd0>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d015      	beq.n	800870c <ip4_route+0xb8>
 80086e0:	4b10      	ldr	r3, [pc, #64]	; (8008724 <ip4_route+0xd0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <ip4_route+0xb8>
 80086f0:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <ip4_route+0xd0>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8008700:	4b08      	ldr	r3, [pc, #32]	; (8008724 <ip4_route+0xd0>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3304      	adds	r3, #4
 8008706:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800870c:	2300      	movs	r3, #0
 800870e:	e001      	b.n	8008714 <ip4_route+0xc0>
  }

  return netif_default;
 8008710:	4b04      	ldr	r3, [pc, #16]	; (8008724 <ip4_route+0xd0>)
 8008712:	681b      	ldr	r3, [r3, #0]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	bc80      	pop	{r7}
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20007c24 	.word	0x20007c24
 8008724:	20007c28 	.word	0x20007c28

08008728 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	091b      	lsrs	r3, r3, #4
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b04      	cmp	r3, #4
 8008742:	d004      	beq.n	800874e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7fe f8c3 	bl	80068d0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	e11a      	b.n	8008984 <ip4_input+0x25c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	f003 030f 	and.w	r3, r3, #15
 8008758:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800875a:	897b      	ldrh	r3, [r7, #10]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	885b      	ldrh	r3, [r3, #2]
 8008764:	b29b      	uxth	r3, r3
 8008766:	4618      	mov	r0, r3
 8008768:	f7fc fff7 	bl	800575a <lwip_htons>
 800876c:	4603      	mov	r3, r0
 800876e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	891b      	ldrh	r3, [r3, #8]
 8008774:	893a      	ldrh	r2, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	d204      	bcs.n	8008784 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800877a:	893b      	ldrh	r3, [r7, #8]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7fd ff32 	bl	80065e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	895b      	ldrh	r3, [r3, #10]
 8008788:	897a      	ldrh	r2, [r7, #10]
 800878a:	429a      	cmp	r2, r3
 800878c:	d807      	bhi.n	800879e <ip4_input+0x76>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	891b      	ldrh	r3, [r3, #8]
 8008792:	893a      	ldrh	r2, [r7, #8]
 8008794:	429a      	cmp	r2, r3
 8008796:	d802      	bhi.n	800879e <ip4_input+0x76>
 8008798:	897b      	ldrh	r3, [r7, #10]
 800879a:	2b13      	cmp	r3, #19
 800879c:	d804      	bhi.n	80087a8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7fe f896 	bl	80068d0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e0ed      	b.n	8008984 <ip4_input+0x25c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	4a77      	ldr	r2, [pc, #476]	; (800898c <ip4_input+0x264>)
 80087ae:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	4a75      	ldr	r2, [pc, #468]	; (800898c <ip4_input+0x264>)
 80087b6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80087b8:	4b74      	ldr	r3, [pc, #464]	; (800898c <ip4_input+0x264>)
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087c0:	2be0      	cmp	r3, #224	; 0xe0
 80087c2:	d112      	bne.n	80087ea <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d007      	beq.n	80087e4 <ip4_input+0xbc>
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	3304      	adds	r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <ip4_input+0xbc>
      netif = inp;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	613b      	str	r3, [r7, #16]
 80087e2:	e041      	b.n	8008868 <ip4_input+0x140>
    } else {
      netif = NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	e03e      	b.n	8008868 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80087ea:	2301      	movs	r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]
    netif = inp;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d014      	beq.n	800882c <ip4_input+0x104>
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3304      	adds	r3, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00f      	beq.n	800882c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800880c:	4b5f      	ldr	r3, [pc, #380]	; (800898c <ip4_input+0x264>)
 800880e:	695a      	ldr	r2, [r3, #20]
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3304      	adds	r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d026      	beq.n	8008868 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800881a:	4b5c      	ldr	r3, [pc, #368]	; (800898c <ip4_input+0x264>)
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	6939      	ldr	r1, [r7, #16]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f989 	bl	8008b38 <ip4_addr_isbroadcast_u32>
 8008826:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008828:	2b00      	cmp	r3, #0
 800882a:	d11d      	bne.n	8008868 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8008832:	4b56      	ldr	r3, [pc, #344]	; (800898c <ip4_input+0x264>)
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b7f      	cmp	r3, #127	; 0x7f
 800883a:	d102      	bne.n	8008842 <ip4_input+0x11a>
          netif = NULL;
 800883c:	2300      	movs	r3, #0
 800883e:	613b      	str	r3, [r7, #16]
          break;
 8008840:	e012      	b.n	8008868 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8008846:	4b52      	ldr	r3, [pc, #328]	; (8008990 <ip4_input+0x268>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	e002      	b.n	8008854 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	d102      	bne.n	8008862 <ip4_input+0x13a>
        netif = netif->next;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1c4      	bne.n	80087f2 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008868:	4b48      	ldr	r3, [pc, #288]	; (800898c <ip4_input+0x264>)
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f962 	bl	8008b38 <ip4_addr_isbroadcast_u32>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800887a:	4b44      	ldr	r3, [pc, #272]	; (800898c <ip4_input+0x264>)
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008882:	2be0      	cmp	r3, #224	; 0xe0
 8008884:	d104      	bne.n	8008890 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7fe f822 	bl	80068d0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e079      	b.n	8008984 <ip4_input+0x25c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fe f81a 	bl	80068d0 <pbuf_free>
    return ERR_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	e071      	b.n	8008984 <ip4_input+0x25c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	88db      	ldrh	r3, [r3, #6]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80088ac:	4013      	ands	r3, r2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fc84 	bl	80091c0 <ip4_reass>
 80088b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <ip4_input+0x19c>
      return ERR_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e05f      	b.n	8008984 <ip4_input+0x25c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80088ca:	4a30      	ldr	r2, [pc, #192]	; (800898c <ip4_input+0x264>)
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80088d0:	4a2e      	ldr	r2, [pc, #184]	; (800898c <ip4_input+0x264>)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80088d6:	4a2d      	ldr	r2, [pc, #180]	; (800898c <ip4_input+0x264>)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	f003 030f 	and.w	r3, r3, #15
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	4b27      	ldr	r3, [pc, #156]	; (800898c <ip4_input+0x264>)
 80088ee:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80088f0:	897b      	ldrh	r3, [r7, #10]
 80088f2:	425b      	negs	r3, r3
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	b21b      	sxth	r3, r3
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7fd ffc4 	bl	8006888 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	7a5b      	ldrb	r3, [r3, #9]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d006      	beq.n	8008916 <ip4_input+0x1ee>
 8008908:	2b11      	cmp	r3, #17
 800890a:	d109      	bne.n	8008920 <ip4_input+0x1f8>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fe fb80 	bl	8007014 <udp_input>
      break;
 8008914:	e023      	b.n	800895e <ip4_input+0x236>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff fd0d 	bl	8008338 <icmp_input>
      break;
 800891e:	e01e      	b.n	800895e <ip4_input+0x236>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008920:	4b1a      	ldr	r3, [pc, #104]	; (800898c <ip4_input+0x264>)
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	6939      	ldr	r1, [r7, #16]
 8008926:	4618      	mov	r0, r3
 8008928:	f000 f906 	bl	8008b38 <ip4_addr_isbroadcast_u32>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d112      	bne.n	8008958 <ip4_input+0x230>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008932:	4b16      	ldr	r3, [pc, #88]	; (800898c <ip4_input+0x264>)
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800893a:	2be0      	cmp	r3, #224	; 0xe0
 800893c:	d00c      	beq.n	8008958 <ip4_input+0x230>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800893e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7fd ffb1 	bl	80068ac <pbuf_header_force>
        p->payload = iphdr;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8008950:	2102      	movs	r1, #2
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff fdf6 	bl	8008544 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7fd ffb9 	bl	80068d0 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800895e:	4b0b      	ldr	r3, [pc, #44]	; (800898c <ip4_input+0x264>)
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <ip4_input+0x264>)
 8008966:	2200      	movs	r2, #0
 8008968:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800896a:	4b08      	ldr	r3, [pc, #32]	; (800898c <ip4_input+0x264>)
 800896c:	2200      	movs	r2, #0
 800896e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <ip4_input+0x264>)
 8008972:	2200      	movs	r2, #0
 8008974:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8008976:	4b05      	ldr	r3, [pc, #20]	; (800898c <ip4_input+0x264>)
 8008978:	2200      	movs	r2, #0
 800897a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800897c:	4b03      	ldr	r3, [pc, #12]	; (800898c <ip4_input+0x264>)
 800897e:	2200      	movs	r2, #0
 8008980:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20004bd4 	.word	0x20004bd4
 8008990:	20007c24 	.word	0x20007c24

08008994 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af04      	add	r7, sp, #16
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d009      	beq.n	80089c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <ip4_output_if+0x26>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d102      	bne.n	80089c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	3304      	adds	r3, #4
 80089be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	9302      	str	r3, [sp, #8]
 80089c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089ca:	9301      	str	r3, [sp, #4]
 80089cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	4613      	mov	r3, r2
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	6979      	ldr	r1, [r7, #20]
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f805 	bl	80089e8 <ip4_output_if_src>
 80089de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	89db      	ldrh	r3, [r3, #14]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d006      	beq.n	8008a0c <ip4_output_if_src+0x24>
 80089fe:	4b48      	ldr	r3, [pc, #288]	; (8008b20 <ip4_output_if_src+0x138>)
 8008a00:	f240 3233 	movw	r2, #819	; 0x333
 8008a04:	4947      	ldr	r1, [pc, #284]	; (8008b24 <ip4_output_if_src+0x13c>)
 8008a06:	4848      	ldr	r0, [pc, #288]	; (8008b28 <ip4_output_if_src+0x140>)
 8008a08:	f001 f842 	bl	8009a90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d060      	beq.n	8008ad4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8008a12:	2314      	movs	r3, #20
 8008a14:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8008a16:	2114      	movs	r1, #20
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7fd ff35 	bl	8006888 <pbuf_header>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8008a24:	f06f 0301 	mvn.w	r3, #1
 8008a28:	e075      	b.n	8008b16 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	895b      	ldrh	r3, [r3, #10]
 8008a34:	2b13      	cmp	r3, #19
 8008a36:	d806      	bhi.n	8008a46 <ip4_output_if_src+0x5e>
 8008a38:	4b39      	ldr	r3, [pc, #228]	; (8008b20 <ip4_output_if_src+0x138>)
 8008a3a:	f44f 7258 	mov.w	r2, #864	; 0x360
 8008a3e:	493b      	ldr	r1, [pc, #236]	; (8008b2c <ip4_output_if_src+0x144>)
 8008a40:	4839      	ldr	r0, [pc, #228]	; (8008b28 <ip4_output_if_src+0x140>)
 8008a42:	f001 f825 	bl	8009a90 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	78fa      	ldrb	r2, [r7, #3]
 8008a4a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008a52:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8008a5c:	8b7b      	ldrh	r3, [r7, #26]
 8008a5e:	089b      	lsrs	r3, r3, #2
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008a74:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	891b      	ldrh	r3, [r3, #8]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fc fe6d 	bl	800575a <lwip_htons>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	719a      	strb	r2, [r3, #6]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008a92:	4b27      	ldr	r3, [pc, #156]	; (8008b30 <ip4_output_if_src+0x148>)
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fc fe5f 	bl	800575a <lwip_htons>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8008aa4:	4b22      	ldr	r3, [pc, #136]	; (8008b30 <ip4_output_if_src+0x148>)
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	4b20      	ldr	r3, [pc, #128]	; (8008b30 <ip4_output_if_src+0x148>)
 8008aae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d104      	bne.n	8008ac0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8008ab6:	4b1f      	ldr	r3, [pc, #124]	; (8008b34 <ip4_output_if_src+0x14c>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	60da      	str	r2, [r3, #12]
 8008abe:	e003      	b.n	8008ac8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2200      	movs	r2, #0
 8008acc:	729a      	strb	r2, [r3, #10]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	72da      	strb	r2, [r3, #11]
 8008ad2:	e008      	b.n	8008ae6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8008ae0:	f107 0314 	add.w	r3, r7, #20
 8008ae4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00c      	beq.n	8008b08 <ip4_output_if_src+0x120>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	891a      	ldrh	r2, [r3, #8]
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d906      	bls.n	8008b08 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fd08 	bl	8009514 <ip4_frag>
 8008b04:	4603      	mov	r3, r0
 8008b06:	e006      	b.n	8008b16 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68f9      	ldr	r1, [r7, #12]
 8008b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b12:	4798      	blx	r3
 8008b14:	4603      	mov	r3, r0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	0800b594 	.word	0x0800b594
 8008b24:	0800b5c8 	.word	0x0800b5c8
 8008b28:	0800b5d4 	.word	0x0800b5d4
 8008b2c:	0800b5fc 	.word	0x0800b5fc
 8008b30:	20007d2e 	.word	0x20007d2e
 8008b34:	0800b958 	.word	0x0800b958

08008b38 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b4c:	d002      	beq.n	8008b54 <ip4_addr_isbroadcast_u32+0x1c>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e02a      	b.n	8008bae <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e021      	b.n	8008bae <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d101      	bne.n	8008b7a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e019      	b.n	8008bae <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	405a      	eors	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	3308      	adds	r3, #8
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10d      	bne.n	8008bac <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	3308      	adds	r3, #8
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	43da      	mvns	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d101      	bne.n	8008bac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8008bac:	2300      	movs	r3, #0
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bc80      	pop	{r7}
 8008bb6:	4770      	bx	lr

08008bb8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <ip_reass_tmr+0x54>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8008bc8:	e018      	b.n	8008bfc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	7fdb      	ldrb	r3, [r3, #31]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <ip_reass_tmr+0x32>
      r->timer--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	7fdb      	ldrb	r3, [r3, #31]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	e008      	b.n	8008bfc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f80a 	bl	8008c10 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e3      	bne.n	8008bca <ip_reass_tmr+0x12>
     }
   }
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20007d30 	.word	0x20007d30

08008c10 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d105      	bne.n	8008c32 <ip_reass_free_complete_datagram+0x22>
 8008c26:	4b45      	ldr	r3, [pc, #276]	; (8008d3c <ip_reass_free_complete_datagram+0x12c>)
 8008c28:	22ab      	movs	r2, #171	; 0xab
 8008c2a:	4945      	ldr	r1, [pc, #276]	; (8008d40 <ip_reass_free_complete_datagram+0x130>)
 8008c2c:	4845      	ldr	r0, [pc, #276]	; (8008d44 <ip_reass_free_complete_datagram+0x134>)
 8008c2e:	f000 ff2f 	bl	8009a90 <iprintf>
  if (prev != NULL) {
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00a      	beq.n	8008c4e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d005      	beq.n	8008c4e <ip_reass_free_complete_datagram+0x3e>
 8008c42:	4b3e      	ldr	r3, [pc, #248]	; (8008d3c <ip_reass_free_complete_datagram+0x12c>)
 8008c44:	22ad      	movs	r2, #173	; 0xad
 8008c46:	4940      	ldr	r1, [pc, #256]	; (8008d48 <ip_reass_free_complete_datagram+0x138>)
 8008c48:	483e      	ldr	r0, [pc, #248]	; (8008d44 <ip_reass_free_complete_datagram+0x134>)
 8008c4a:	f000 ff21 	bl	8009a90 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	889b      	ldrh	r3, [r3, #4]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d12a      	bne.n	8008cb6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	6858      	ldr	r0, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3308      	adds	r3, #8
 8008c76:	2214      	movs	r2, #20
 8008c78:	4619      	mov	r1, r3
 8008c7a:	f000 ffe4 	bl	8009c46 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8008c7e:	2101      	movs	r1, #1
 8008c80:	69b8      	ldr	r0, [r7, #24]
 8008c82:	f7ff fc6f 	bl	8008564 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8008c86:	69b8      	ldr	r0, [r7, #24]
 8008c88:	f7fd feb6 	bl	80069f8 <pbuf_clen>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8008c90:	8bfa      	ldrh	r2, [r7, #30]
 8008c92:	8a7b      	ldrh	r3, [r7, #18]
 8008c94:	4413      	add	r3, r2
 8008c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c9a:	db05      	blt.n	8008ca8 <ip_reass_free_complete_datagram+0x98>
 8008c9c:	4b27      	ldr	r3, [pc, #156]	; (8008d3c <ip_reass_free_complete_datagram+0x12c>)
 8008c9e:	22bc      	movs	r2, #188	; 0xbc
 8008ca0:	492a      	ldr	r1, [pc, #168]	; (8008d4c <ip_reass_free_complete_datagram+0x13c>)
 8008ca2:	4828      	ldr	r0, [pc, #160]	; (8008d44 <ip_reass_free_complete_datagram+0x134>)
 8008ca4:	f000 fef4 	bl	8009a90 <iprintf>
    pbufs_freed += clen;
 8008ca8:	8bfa      	ldrh	r2, [r7, #30]
 8008caa:	8a7b      	ldrh	r3, [r7, #18]
 8008cac:	4413      	add	r3, r2
 8008cae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8008cb0:	69b8      	ldr	r0, [r7, #24]
 8008cb2:	f7fd fe0d 	bl	80068d0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8008cbc:	e01f      	b.n	8008cfe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7fd fe92 	bl	80069f8 <pbuf_clen>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8008cd8:	8bfa      	ldrh	r2, [r7, #30]
 8008cda:	8a7b      	ldrh	r3, [r7, #18]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce2:	db05      	blt.n	8008cf0 <ip_reass_free_complete_datagram+0xe0>
 8008ce4:	4b15      	ldr	r3, [pc, #84]	; (8008d3c <ip_reass_free_complete_datagram+0x12c>)
 8008ce6:	22cc      	movs	r2, #204	; 0xcc
 8008ce8:	4918      	ldr	r1, [pc, #96]	; (8008d4c <ip_reass_free_complete_datagram+0x13c>)
 8008cea:	4816      	ldr	r0, [pc, #88]	; (8008d44 <ip_reass_free_complete_datagram+0x134>)
 8008cec:	f000 fed0 	bl	8009a90 <iprintf>
    pbufs_freed += clen;
 8008cf0:	8bfa      	ldrh	r2, [r7, #30]
 8008cf2:	8a7b      	ldrh	r3, [r7, #18]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7fd fde9 	bl	80068d0 <pbuf_free>
  while (p != NULL) {
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1dc      	bne.n	8008cbe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f8c2 	bl	8008e90 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8008d0c:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <ip_reass_free_complete_datagram+0x140>)
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	8bfa      	ldrh	r2, [r7, #30]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d905      	bls.n	8008d22 <ip_reass_free_complete_datagram+0x112>
 8008d16:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <ip_reass_free_complete_datagram+0x12c>)
 8008d18:	22d2      	movs	r2, #210	; 0xd2
 8008d1a:	490e      	ldr	r1, [pc, #56]	; (8008d54 <ip_reass_free_complete_datagram+0x144>)
 8008d1c:	4809      	ldr	r0, [pc, #36]	; (8008d44 <ip_reass_free_complete_datagram+0x134>)
 8008d1e:	f000 feb7 	bl	8009a90 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8008d22:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <ip_reass_free_complete_datagram+0x140>)
 8008d24:	881a      	ldrh	r2, [r3, #0]
 8008d26:	8bfb      	ldrh	r3, [r7, #30]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <ip_reass_free_complete_datagram+0x140>)
 8008d2e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8008d30:	8bfb      	ldrh	r3, [r7, #30]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	0800b62c 	.word	0x0800b62c
 8008d40:	0800b668 	.word	0x0800b668
 8008d44:	0800b674 	.word	0x0800b674
 8008d48:	0800b69c 	.word	0x0800b69c
 8008d4c:	0800b6b0 	.word	0x0800b6b0
 8008d50:	20007d34 	.word	0x20007d34
 8008d54:	0800b6d0 	.word	0x0800b6d0

08008d58 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	; 0x28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8008d76:	4b28      	ldr	r3, [pc, #160]	; (8008e18 <ip_reass_remove_oldest_datagram+0xc0>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8008d7c:	e030      	b.n	8008de0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	695a      	ldr	r2, [r3, #20]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d10c      	bne.n	8008da4 <ip_reass_remove_oldest_datagram+0x4c>
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d106      	bne.n	8008da4 <ip_reass_remove_oldest_datagram+0x4c>
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	899a      	ldrh	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	889b      	ldrh	r3, [r3, #4]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d014      	beq.n	8008dce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	3301      	adds	r3, #1
 8008da8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	e009      	b.n	8008dce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	7fda      	ldrb	r2, [r3, #31]
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	7fdb      	ldrb	r3, [r3, #31]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d803      	bhi.n	8008dce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1cb      	bne.n	8008d7e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d008      	beq.n	8008dfe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8008dec:	69b9      	ldr	r1, [r7, #24]
 8008dee:	6a38      	ldr	r0, [r7, #32]
 8008df0:	f7ff ff0e 	bl	8008c10 <ip_reass_free_complete_datagram>
 8008df4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	da02      	bge.n	8008e0c <ip_reass_remove_oldest_datagram+0xb4>
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	dcac      	bgt.n	8008d66 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8008e0c:	697b      	ldr	r3, [r7, #20]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3728      	adds	r7, #40	; 0x28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	20007d30 	.word	0x20007d30

08008e1c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8008e26:	2001      	movs	r0, #1
 8008e28:	f7fd f826 	bl	8005e78 <memp_malloc>
 8008e2c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d110      	bne.n	8008e56 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff ff8e 	bl	8008d58 <ip_reass_remove_oldest_datagram>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	4293      	cmp	r3, r2
 8008e42:	dc03      	bgt.n	8008e4c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8008e44:	2001      	movs	r0, #1
 8008e46:	f7fd f817 	bl	8005e78 <memp_malloc>
 8008e4a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	e016      	b.n	8008e84 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8008e56:	2220      	movs	r2, #32
 8008e58:	2100      	movs	r1, #0
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fe7d 	bl	8009b5a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2203      	movs	r2, #3
 8008e64:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <ip_reass_enqueue_new_datagram+0x70>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8008e6e:	4a07      	ldr	r2, [pc, #28]	; (8008e8c <ip_reass_enqueue_new_datagram+0x70>)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3308      	adds	r3, #8
 8008e78:	2214      	movs	r2, #20
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fee2 	bl	8009c46 <memcpy>
  return ipr;
 8008e82:	68fb      	ldr	r3, [r7, #12]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20007d30 	.word	0x20007d30

08008e90 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8008e9a:	4b10      	ldr	r3, [pc, #64]	; (8008edc <ip_reass_dequeue_datagram+0x4c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d104      	bne.n	8008eae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a0c      	ldr	r2, [pc, #48]	; (8008edc <ip_reass_dequeue_datagram+0x4c>)
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	e00d      	b.n	8008eca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <ip_reass_dequeue_datagram+0x32>
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <ip_reass_dequeue_datagram+0x50>)
 8008eb6:	f240 1245 	movw	r2, #325	; 0x145
 8008eba:	490a      	ldr	r1, [pc, #40]	; (8008ee4 <ip_reass_dequeue_datagram+0x54>)
 8008ebc:	480a      	ldr	r0, [pc, #40]	; (8008ee8 <ip_reass_dequeue_datagram+0x58>)
 8008ebe:	f000 fde7 	bl	8009a90 <iprintf>
    prev->next = ipr->next;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8008eca:	6879      	ldr	r1, [r7, #4]
 8008ecc:	2001      	movs	r0, #1
 8008ece:	f7fd f81f 	bl	8005f10 <memp_free>
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20007d30 	.word	0x20007d30
 8008ee0:	0800b62c 	.word	0x0800b62c
 8008ee4:	0800b6ec 	.word	0x0800b6ec
 8008ee8:	0800b674 	.word	0x0800b674

08008eec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08c      	sub	sp, #48	; 0x30
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8008efc:	2301      	movs	r3, #1
 8008efe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fc fc24 	bl	800575a <lwip_htons>
 8008f12:	4603      	mov	r3, r0
 8008f14:	461a      	mov	r2, r3
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	88db      	ldrh	r3, [r3, #6]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fc fc12 	bl	800575a <lwip_htons>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	705a      	strb	r2, [r3, #1]
 8008f52:	2200      	movs	r2, #0
 8008f54:	709a      	strb	r2, [r3, #2]
 8008f56:	2200      	movs	r2, #0
 8008f58:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8008f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5c:	8b3a      	ldrh	r2, [r7, #24]
 8008f5e:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8008f60:	8b3a      	ldrh	r2, [r7, #24]
 8008f62:	8b7b      	ldrh	r3, [r7, #26]
 8008f64:	4413      	add	r3, r2
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24
 8008f72:	e061      	b.n	8009038 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	889b      	ldrh	r3, [r3, #4]
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	889b      	ldrh	r3, [r3, #4]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d232      	bcs.n	8008ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8e:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8008f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d01f      	beq.n	8008fd6 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	889b      	ldrh	r3, [r3, #4]
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	88db      	ldrh	r3, [r3, #6]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	f0c0 80e3 	bcc.w	800916e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	88db      	ldrh	r3, [r3, #6]
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	889b      	ldrh	r3, [r3, #4]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	f200 80da 	bhi.w	800916e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	88db      	ldrh	r3, [r3, #6]
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	889b      	ldrh	r3, [r3, #4]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d037      	beq.n	8009040 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8008fd4:	e034      	b.n	8009040 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	88db      	ldrh	r3, [r3, #6]
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	889b      	ldrh	r3, [r3, #4]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	f200 80c5 	bhi.w	8009172 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	605a      	str	r2, [r3, #4]
      break;
 8008fee:	e027      	b.n	8009040 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8008ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff2:	889b      	ldrh	r3, [r3, #4]
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	889b      	ldrh	r3, [r3, #4]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	f000 80ba 	beq.w	8009176 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	889b      	ldrh	r3, [r3, #4]
 8009006:	b29a      	uxth	r2, r3
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	88db      	ldrh	r3, [r3, #6]
 800900c:	b29b      	uxth	r3, r3
 800900e:	429a      	cmp	r2, r3
 8009010:	f0c0 80b3 	bcc.w	800917a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	2b00      	cmp	r3, #0
 8009018:	d009      	beq.n	800902e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	88db      	ldrh	r3, [r3, #6]
 800901e:	b29a      	uxth	r2, r3
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	889b      	ldrh	r3, [r3, #4]
 8009024:	b29b      	uxth	r3, r3
 8009026:	429a      	cmp	r2, r3
 8009028:	d001      	beq.n	800902e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	2b00      	cmp	r3, #0
 800903c:	d19a      	bne.n	8008f74 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800903e:	e000      	b.n	8009042 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8009040:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	2b00      	cmp	r3, #0
 8009046:	d12d      	bne.n	80090a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01c      	beq.n	8009088 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	88db      	ldrh	r3, [r3, #6]
 8009052:	b29a      	uxth	r2, r3
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	889b      	ldrh	r3, [r3, #4]
 8009058:	b29b      	uxth	r3, r3
 800905a:	429a      	cmp	r2, r3
 800905c:	d906      	bls.n	800906c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800905e:	4b51      	ldr	r3, [pc, #324]	; (80091a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8009060:	f240 12ab 	movw	r2, #427	; 0x1ab
 8009064:	4950      	ldr	r1, [pc, #320]	; (80091a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009066:	4851      	ldr	r0, [pc, #324]	; (80091ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8009068:	f000 fd12 	bl	8009a90 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	88db      	ldrh	r3, [r3, #6]
 8009076:	b29a      	uxth	r2, r3
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	889b      	ldrh	r3, [r3, #4]
 800907c:	b29b      	uxth	r3, r3
 800907e:	429a      	cmp	r2, r3
 8009080:	d010      	beq.n	80090a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	623b      	str	r3, [r7, #32]
 8009086:	e00d      	b.n	80090a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d006      	beq.n	800909e <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8009090:	4b44      	ldr	r3, [pc, #272]	; (80091a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8009092:	f240 12b3 	movw	r2, #435	; 0x1b3
 8009096:	4946      	ldr	r1, [pc, #280]	; (80091b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009098:	4844      	ldr	r0, [pc, #272]	; (80091ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800909a:	f000 fcf9 	bl	8009a90 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	7f9b      	ldrb	r3, [r3, #30]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d059      	beq.n	800916a <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d04f      	beq.n	800915c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	889b      	ldrh	r3, [r3, #4]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	623b      	str	r3, [r7, #32]
 80090d6:	e041      	b.n	800915c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80090d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80090dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80090e2:	e012      	b.n	800910a <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	88db      	ldrh	r3, [r3, #6]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	889b      	ldrh	r3, [r3, #4]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d002      	beq.n	8009100 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	623b      	str	r3, [r7, #32]
            break;
 80090fe:	e007      	b.n	8009110 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e9      	bne.n	80090e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d022      	beq.n	800915c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800911e:	4b21      	ldr	r3, [pc, #132]	; (80091a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8009120:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8009124:	4923      	ldr	r1, [pc, #140]	; (80091b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8009126:	4821      	ldr	r0, [pc, #132]	; (80091ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8009128:	f000 fcb2 	bl	8009a90 <iprintf>
          LWIP_ASSERT("sanity check",
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009134:	429a      	cmp	r2, r3
 8009136:	d106      	bne.n	8009146 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8009138:	4b1a      	ldr	r3, [pc, #104]	; (80091a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800913a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800913e:	491d      	ldr	r1, [pc, #116]	; (80091b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8009140:	481a      	ldr	r0, [pc, #104]	; (80091ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8009142:	f000 fca5 	bl	8009a90 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d006      	beq.n	800915c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800914e:	4b15      	ldr	r3, [pc, #84]	; (80091a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8009150:	f240 12d7 	movw	r2, #471	; 0x1d7
 8009154:	4918      	ldr	r1, [pc, #96]	; (80091b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8009156:	4815      	ldr	r0, [pc, #84]	; (80091ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8009158:	f000 fc9a 	bl	8009a90 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	2b00      	cmp	r3, #0
 8009160:	bf14      	ite	ne
 8009162:	2301      	movne	r3, #1
 8009164:	2300      	moveq	r3, #0
 8009166:	b2db      	uxtb	r3, r3
 8009168:	e018      	b.n	800919c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800916a:	2300      	movs	r3, #0
 800916c:	e016      	b.n	800919c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800916e:	bf00      	nop
 8009170:	e004      	b.n	800917c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8009172:	bf00      	nop
 8009174:	e002      	b.n	800917c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8009176:	bf00      	nop
 8009178:	e000      	b.n	800917c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800917a:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800917c:	68b8      	ldr	r0, [r7, #8]
 800917e:	f7fd fc3b 	bl	80069f8 <pbuf_clen>
 8009182:	4603      	mov	r3, r0
 8009184:	461a      	mov	r2, r3
 8009186:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	b29a      	uxth	r2, r3
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8009190:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8009192:	68b8      	ldr	r0, [r7, #8]
 8009194:	f7fd fb9c 	bl	80068d0 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800919c:	4618      	mov	r0, r3
 800919e:	3730      	adds	r7, #48	; 0x30
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	0800b62c 	.word	0x0800b62c
 80091a8:	0800b708 	.word	0x0800b708
 80091ac:	0800b674 	.word	0x0800b674
 80091b0:	0800b728 	.word	0x0800b728
 80091b4:	0800b760 	.word	0x0800b760
 80091b8:	0800b770 	.word	0x0800b770
 80091bc:	20007d34 	.word	0x20007d34

080091c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	; 0x38
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	f003 030f 	and.w	r3, r3, #15
 80091d6:	2b05      	cmp	r3, #5
 80091d8:	f040 8131 	bne.w	800943e <ip4_reass+0x27e>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	88db      	ldrh	r3, [r3, #6]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fc fab9 	bl	800575a <lwip_htons>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	885b      	ldrh	r3, [r3, #2]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fc faad 	bl	800575a <lwip_htons>
 8009200:	4603      	mov	r3, r0
 8009202:	461a      	mov	r2, r3
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	b29b      	uxth	r3, r3
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	b29b      	uxth	r3, r3
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	b29b      	uxth	r3, r3
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7fd fbed 	bl	80069f8 <pbuf_clen>
 800921e:	4603      	mov	r3, r0
 8009220:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009222:	4b8e      	ldr	r3, [pc, #568]	; (800945c <ip4_reass+0x29c>)
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800922a:	4413      	add	r3, r2
 800922c:	2b0a      	cmp	r3, #10
 800922e:	dd10      	ble.n	8009252 <ip4_reass+0x92>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009232:	4619      	mov	r1, r3
 8009234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009236:	f7ff fd8f 	bl	8008d58 <ip_reass_remove_oldest_datagram>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8100 	beq.w	8009442 <ip4_reass+0x282>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8009242:	4b86      	ldr	r3, [pc, #536]	; (800945c <ip4_reass+0x29c>)
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800924a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800924c:	2b0a      	cmp	r3, #10
 800924e:	f300 80f8 	bgt.w	8009442 <ip4_reass+0x282>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009252:	4b83      	ldr	r3, [pc, #524]	; (8009460 <ip4_reass+0x2a0>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	633b      	str	r3, [r7, #48]	; 0x30
 8009258:	e015      	b.n	8009286 <ip4_reass+0xc6>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925c:	695a      	ldr	r2, [r3, #20]
 800925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	429a      	cmp	r2, r3
 8009264:	d10c      	bne.n	8009280 <ip4_reass+0xc0>
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	429a      	cmp	r2, r3
 8009270:	d106      	bne.n	8009280 <ip4_reass+0xc0>
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	899a      	ldrh	r2, [r3, #12]
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	889b      	ldrh	r3, [r3, #4]
 800927a:	b29b      	uxth	r3, r3
 800927c:	429a      	cmp	r2, r3
 800927e:	d006      	beq.n	800928e <ip4_reass+0xce>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	633b      	str	r3, [r7, #48]	; 0x30
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e6      	bne.n	800925a <ip4_reass+0x9a>
 800928c:	e000      	b.n	8009290 <ip4_reass+0xd0>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800928e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	2b00      	cmp	r3, #0
 8009294:	d109      	bne.n	80092aa <ip4_reass+0xea>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8009296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009298:	4619      	mov	r1, r3
 800929a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800929c:	f7ff fdbe 	bl	8008e1c <ip_reass_enqueue_new_datagram>
 80092a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d11c      	bne.n	80092e2 <ip4_reass+0x122>
      goto nullreturn;
 80092a8:	e0d0      	b.n	800944c <ip4_reass+0x28c>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	88db      	ldrh	r3, [r3, #6]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fc fa52 	bl	800575a <lwip_htons>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d110      	bne.n	80092e2 <ip4_reass+0x122>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	89db      	ldrh	r3, [r3, #14]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fc fa48 	bl	800575a <lwip_htons>
 80092ca:	4603      	mov	r3, r0
 80092cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d006      	beq.n	80092e2 <ip4_reass+0x122>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	3308      	adds	r3, #8
 80092d8:	2214      	movs	r2, #20
 80092da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 fcb2 	bl	8009c46 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	88db      	ldrh	r3, [r3, #6]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bf0c      	ite	eq
 80092f0:	2301      	moveq	r3, #1
 80092f2:	2300      	movne	r3, #0
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00e      	beq.n	800931c <ip4_reass+0x15c>
    u16_t datagram_len = (u16_t)(offset + len);
 80092fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009302:	4413      	add	r3, r2
 8009304:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009306:	8b7a      	ldrh	r2, [r7, #26]
 8009308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800930a:	429a      	cmp	r2, r3
 800930c:	f0c0 809b 	bcc.w	8009446 <ip4_reass+0x286>
 8009310:	8b7b      	ldrh	r3, [r7, #26]
 8009312:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8009316:	4293      	cmp	r3, r2
 8009318:	f200 8095 	bhi.w	8009446 <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800931c:	69fa      	ldr	r2, [r7, #28]
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009322:	f7ff fde3 	bl	8008eec <ip_reass_chain_frag_into_datagram_and_validate>
 8009326:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800932e:	f000 808c 	beq.w	800944a <ip4_reass+0x28a>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8009332:	4b4a      	ldr	r3, [pc, #296]	; (800945c <ip4_reass+0x29c>)
 8009334:	881a      	ldrh	r2, [r3, #0]
 8009336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009338:	4413      	add	r3, r2
 800933a:	b29a      	uxth	r2, r3
 800933c:	4b47      	ldr	r3, [pc, #284]	; (800945c <ip4_reass+0x29c>)
 800933e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00d      	beq.n	8009362 <ip4_reass+0x1a2>
    u16_t datagram_len = (u16_t)(offset + len);
 8009346:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009348:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800934a:	4413      	add	r3, r2
 800934c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	8a7a      	ldrh	r2, [r7, #18]
 8009352:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	7f9b      	ldrb	r3, [r3, #30]
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d168      	bne.n	800943a <ip4_reass+0x27a>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	8b9b      	ldrh	r3, [r3, #28]
 800936c:	3314      	adds	r3, #20
 800936e:	b29a      	uxth	r2, r3
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	3308      	adds	r3, #8
 800938a:	2214      	movs	r2, #20
 800938c:	4619      	mov	r1, r3
 800938e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009390:	f000 fc59 	bl	8009c46 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	8b9b      	ldrh	r3, [r3, #28]
 8009398:	4618      	mov	r0, r3
 800939a:	f7fc f9de 	bl	800575a <lwip_htons>
 800939e:	4603      	mov	r3, r0
 80093a0:	461a      	mov	r2, r3
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	2200      	movs	r2, #0
 80093aa:	719a      	strb	r2, [r3, #6]
 80093ac:	2200      	movs	r2, #0
 80093ae:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	2200      	movs	r2, #0
 80093b4:	729a      	strb	r2, [r3, #10]
 80093b6:	2200      	movs	r2, #0
 80093b8:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80093c0:	e00e      	b.n	80093e0 <ip4_reass+0x220>
      iprh = (struct ip_reass_helper*)r->payload;
 80093c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80093c8:	f06f 0113 	mvn.w	r1, #19
 80093cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093ce:	f7fd fa5b 	bl	8006888 <pbuf_header>
      pbuf_cat(p, r);
 80093d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7fd fb47 	bl	8006a68 <pbuf_cat>
      r = iprh->next_pbuf;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80093e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1ed      	bne.n	80093c2 <ip4_reass+0x202>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80093e6:	4b1e      	ldr	r3, [pc, #120]	; (8009460 <ip4_reass+0x2a0>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d102      	bne.n	80093f6 <ip4_reass+0x236>
      ipr_prev = NULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093f4:	e010      	b.n	8009418 <ip4_reass+0x258>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <ip4_reass+0x2a0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093fc:	e007      	b.n	800940e <ip4_reass+0x24e>
        if (ipr_prev->next == ipr) {
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009404:	429a      	cmp	r2, r3
 8009406:	d006      	beq.n	8009416 <ip4_reass+0x256>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800940e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f4      	bne.n	80093fe <ip4_reass+0x23e>
 8009414:	e000      	b.n	8009418 <ip4_reass+0x258>
          break;
 8009416:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8009418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800941a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800941c:	f7ff fd38 	bl	8008e90 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7fd fae9 	bl	80069f8 <pbuf_clen>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	4b0c      	ldr	r3, [pc, #48]	; (800945c <ip4_reass+0x29c>)
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	b29a      	uxth	r2, r3
 8009432:	4b0a      	ldr	r3, [pc, #40]	; (800945c <ip4_reass+0x29c>)
 8009434:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	e00c      	b.n	8009454 <ip4_reass+0x294>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800943a:	2300      	movs	r3, #0
 800943c:	e00a      	b.n	8009454 <ip4_reass+0x294>
    goto nullreturn;
 800943e:	bf00      	nop
 8009440:	e004      	b.n	800944c <ip4_reass+0x28c>
      goto nullreturn;
 8009442:	bf00      	nop
 8009444:	e002      	b.n	800944c <ip4_reass+0x28c>
      goto nullreturn;
 8009446:	bf00      	nop
 8009448:	e000      	b.n	800944c <ip4_reass+0x28c>
    goto nullreturn;
 800944a:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7fd fa3f 	bl	80068d0 <pbuf_free>
  return NULL;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3738      	adds	r7, #56	; 0x38
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20007d34 	.word	0x20007d34
 8009460:	20007d30 	.word	0x20007d30

08009464 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8009468:	2002      	movs	r0, #2
 800946a:	f7fc fd05 	bl	8005e78 <memp_malloc>
 800946e:	4603      	mov	r3, r0
}
 8009470:	4618      	mov	r0, r3
 8009472:	bd80      	pop	{r7, pc}

08009474 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <ip_frag_free_pbuf_custom_ref+0x1c>
 8009482:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8009484:	f240 22ae 	movw	r2, #686	; 0x2ae
 8009488:	4906      	ldr	r1, [pc, #24]	; (80094a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800948a:	4807      	ldr	r0, [pc, #28]	; (80094a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800948c:	f000 fb00 	bl	8009a90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	2002      	movs	r0, #2
 8009494:	f7fc fd3c 	bl	8005f10 <memp_free>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	0800b62c 	.word	0x0800b62c
 80094a4:	0800b794 	.word	0x0800b794
 80094a8:	0800b674 	.word	0x0800b674

080094ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <ipfrag_free_pbuf_custom+0x20>
 80094be:	4b11      	ldr	r3, [pc, #68]	; (8009504 <ipfrag_free_pbuf_custom+0x58>)
 80094c0:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80094c4:	4910      	ldr	r1, [pc, #64]	; (8009508 <ipfrag_free_pbuf_custom+0x5c>)
 80094c6:	4811      	ldr	r0, [pc, #68]	; (800950c <ipfrag_free_pbuf_custom+0x60>)
 80094c8:	f000 fae2 	bl	8009a90 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d006      	beq.n	80094e2 <ipfrag_free_pbuf_custom+0x36>
 80094d4:	4b0b      	ldr	r3, [pc, #44]	; (8009504 <ipfrag_free_pbuf_custom+0x58>)
 80094d6:	f240 22b9 	movw	r2, #697	; 0x2b9
 80094da:	490d      	ldr	r1, [pc, #52]	; (8009510 <ipfrag_free_pbuf_custom+0x64>)
 80094dc:	480b      	ldr	r0, [pc, #44]	; (800950c <ipfrag_free_pbuf_custom+0x60>)
 80094de:	f000 fad7 	bl	8009a90 <iprintf>
  if (pcr->original != NULL) {
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fd f9ee 	bl	80068d0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7ff ffbd 	bl	8009474 <ip_frag_free_pbuf_custom_ref>
}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	0800b62c 	.word	0x0800b62c
 8009508:	0800b7a0 	.word	0x0800b7a0
 800950c:	0800b674 	.word	0x0800b674
 8009510:	0800b7ac 	.word	0x0800b7ac

08009514 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b092      	sub	sp, #72	; 0x48
 8009518:	af02      	add	r7, sp, #8
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009528:	3b14      	subs	r3, #20
 800952a:	2b00      	cmp	r3, #0
 800952c:	da00      	bge.n	8009530 <ip4_frag+0x1c>
 800952e:	3307      	adds	r3, #7
 8009530:	10db      	asrs	r3, r3, #3
 8009532:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8009534:	2314      	movs	r3, #20
 8009536:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	2b05      	cmp	r3, #5
 800954c:	d009      	beq.n	8009562 <ip4_frag+0x4e>
 800954e:	4b7a      	ldr	r3, [pc, #488]	; (8009738 <ip4_frag+0x224>)
 8009550:	f240 22e1 	movw	r2, #737	; 0x2e1
 8009554:	4979      	ldr	r1, [pc, #484]	; (800973c <ip4_frag+0x228>)
 8009556:	487a      	ldr	r0, [pc, #488]	; (8009740 <ip4_frag+0x22c>)
 8009558:	f000 fa9a 	bl	8009a90 <iprintf>
 800955c:	f06f 0305 	mvn.w	r3, #5
 8009560:	e0e6      	b.n	8009730 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8009562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009564:	88db      	ldrh	r3, [r3, #6]
 8009566:	b29b      	uxth	r3, r3
 8009568:	4618      	mov	r0, r3
 800956a:	f7fc f8f6 	bl	800575a <lwip_htons>
 800956e:	4603      	mov	r3, r0
 8009570:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8009572:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009578:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800957a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800957c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d009      	beq.n	8009598 <ip4_frag+0x84>
 8009584:	4b6c      	ldr	r3, [pc, #432]	; (8009738 <ip4_frag+0x224>)
 8009586:	f240 22e6 	movw	r2, #742	; 0x2e6
 800958a:	496e      	ldr	r1, [pc, #440]	; (8009744 <ip4_frag+0x230>)
 800958c:	486c      	ldr	r0, [pc, #432]	; (8009740 <ip4_frag+0x22c>)
 800958e:	f000 fa7f 	bl	8009a90 <iprintf>
 8009592:	f06f 0305 	mvn.w	r3, #5
 8009596:	e0cb      	b.n	8009730 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	891b      	ldrh	r3, [r3, #8]
 800959c:	3b14      	subs	r3, #20
 800959e:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80095a0:	e0bd      	b.n	800971e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80095a2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80095a4:	00da      	lsls	r2, r3, #3
 80095a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80095a8:	4293      	cmp	r3, r2
 80095aa:	bfa8      	it	ge
 80095ac:	4613      	movge	r3, r2
 80095ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80095b0:	2200      	movs	r2, #0
 80095b2:	2114      	movs	r1, #20
 80095b4:	2002      	movs	r0, #2
 80095b6:	f7fc fe17 	bl	80061e8 <pbuf_alloc>
 80095ba:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 80b3 	beq.w	800972a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	895b      	ldrh	r3, [r3, #10]
 80095c8:	2b13      	cmp	r3, #19
 80095ca:	d806      	bhi.n	80095da <ip4_frag+0xc6>
 80095cc:	4b5a      	ldr	r3, [pc, #360]	; (8009738 <ip4_frag+0x224>)
 80095ce:	f44f 7242 	mov.w	r2, #776	; 0x308
 80095d2:	495d      	ldr	r1, [pc, #372]	; (8009748 <ip4_frag+0x234>)
 80095d4:	485a      	ldr	r0, [pc, #360]	; (8009740 <ip4_frag+0x22c>)
 80095d6:	f000 fa5b 	bl	8009a90 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2214      	movs	r2, #20
 80095e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fb2f 	bl	8009c46 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80095ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80095f2:	e04f      	b.n	8009694 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	895a      	ldrh	r2, [r3, #10]
 80095f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80095fe:	8b7a      	ldrh	r2, [r7, #26]
 8009600:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009602:	4293      	cmp	r3, r2
 8009604:	bf28      	it	cs
 8009606:	4613      	movcs	r3, r2
 8009608:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800960a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800960c:	2b00      	cmp	r3, #0
 800960e:	d105      	bne.n	800961c <ip4_frag+0x108>
        poff = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60fb      	str	r3, [r7, #12]
        continue;
 800961a:	e03b      	b.n	8009694 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800961c:	f7ff ff22 	bl	8009464 <ip_frag_alloc_pbuf_custom_ref>
 8009620:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d103      	bne.n	8009630 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 8009628:	6a38      	ldr	r0, [r7, #32]
 800962a:	f7fd f951 	bl	80068d0 <pbuf_free>
        goto memerr;
 800962e:	e07d      	b.n	800972c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009630:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009636:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009638:	4413      	add	r3, r2
 800963a:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800963c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800963e:	9201      	str	r2, [sp, #4]
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	4603      	mov	r3, r0
 8009644:	2202      	movs	r2, #2
 8009646:	2004      	movs	r0, #4
 8009648:	f7fc ff64 	bl	8006514 <pbuf_alloced_custom>
 800964c:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 8009654:	6978      	ldr	r0, [r7, #20]
 8009656:	f7ff ff0d 	bl	8009474 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800965a:	6a38      	ldr	r0, [r7, #32]
 800965c:	f7fd f938 	bl	80068d0 <pbuf_free>
        goto memerr;
 8009660:	e064      	b.n	800972c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7fd f9de 	bl	8006a24 <pbuf_ref>
      pcr->original = p;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	4a36      	ldr	r2, [pc, #216]	; (800974c <ip4_frag+0x238>)
 8009672:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8009674:	6939      	ldr	r1, [r7, #16]
 8009676:	6a38      	ldr	r0, [r7, #32]
 8009678:	f7fd f9f6 	bl	8006a68 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800967c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800967e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8009684:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d004      	beq.n	8009694 <ip4_frag+0x180>
        poff = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8009694:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1ac      	bne.n	80095f4 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 800969a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800969c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800969e:	4413      	add	r3, r2
 80096a0:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096a6:	f1a3 0213 	sub.w	r2, r3, #19
 80096aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80096ac:	429a      	cmp	r2, r3
 80096ae:	bfcc      	ite	gt
 80096b0:	2301      	movgt	r3, #1
 80096b2:	2300      	movle	r3, #0
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80096b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80096ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096be:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d103      	bne.n	80096ce <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80096c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80096c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80096cc:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80096ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fc f842 	bl	800575a <lwip_htons>
 80096d6:	4603      	mov	r3, r0
 80096d8:	461a      	mov	r2, r3
 80096da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80096de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096e0:	3314      	adds	r3, #20
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fc f838 	bl	800575a <lwip_htons>
 80096ea:	4603      	mov	r3, r0
 80096ec:	461a      	mov	r2, r3
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	2200      	movs	r2, #0
 80096f6:	729a      	strb	r2, [r3, #10]
 80096f8:	2200      	movs	r2, #0
 80096fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6a39      	ldr	r1, [r7, #32]
 8009704:	68b8      	ldr	r0, [r7, #8]
 8009706:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8009708:	6a38      	ldr	r0, [r7, #32]
 800970a:	f7fd f8e1 	bl	80068d0 <pbuf_free>
    left -= fragsize;
 800970e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8009716:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009718:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800971a:	4413      	add	r3, r2
 800971c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800971e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009720:	2b00      	cmp	r3, #0
 8009722:	f47f af3e 	bne.w	80095a2 <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	e002      	b.n	8009730 <ip4_frag+0x21c>
      goto memerr;
 800972a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800972c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009730:	4618      	mov	r0, r3
 8009732:	3740      	adds	r7, #64	; 0x40
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	0800b62c 	.word	0x0800b62c
 800973c:	0800b7b8 	.word	0x0800b7b8
 8009740:	0800b674 	.word	0x0800b674
 8009744:	0800b7e0 	.word	0x0800b7e0
 8009748:	0800b7fc 	.word	0x0800b7fc
 800974c:	080094ad 	.word	0x080094ad

08009750 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800975a:	230e      	movs	r3, #14
 800975c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	895b      	ldrh	r3, [r3, #10]
 8009762:	2b0e      	cmp	r3, #14
 8009764:	d977      	bls.n	8009856 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	7b1a      	ldrb	r2, [r3, #12]
 8009770:	7b5b      	ldrb	r3, [r3, #13]
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	4313      	orrs	r3, r2
 8009776:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d023      	beq.n	80097cc <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d10f      	bne.n	80097ac <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	785b      	ldrb	r3, [r3, #1]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d11b      	bne.n	80097cc <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009798:	2b5e      	cmp	r3, #94	; 0x5e
 800979a:	d117      	bne.n	80097cc <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	7b5b      	ldrb	r3, [r3, #13]
 80097a0:	f043 0310 	orr.w	r3, r3, #16
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	735a      	strb	r2, [r3, #13]
 80097aa:	e00f      	b.n	80097cc <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2206      	movs	r2, #6
 80097b0:	4931      	ldr	r1, [pc, #196]	; (8009878 <ethernet_input+0x128>)
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f9c1 	bl	8009b3a <memcmp>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	7b5b      	ldrb	r3, [r3, #13]
 80097c2:	f043 0308 	orr.w	r3, r3, #8
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80097cc:	89fb      	ldrh	r3, [r7, #14]
 80097ce:	2b08      	cmp	r3, #8
 80097d0:	d003      	beq.n	80097da <ethernet_input+0x8a>
 80097d2:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80097d6:	d01e      	beq.n	8009816 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80097d8:	e046      	b.n	8009868 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80097e0:	f003 0308 	and.w	r3, r3, #8
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d038      	beq.n	800985a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	895b      	ldrh	r3, [r3, #10]
 80097ec:	461a      	mov	r2, r3
 80097ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	db33      	blt.n	800985e <ethernet_input+0x10e>
 80097f6:	8afb      	ldrh	r3, [r7, #22]
 80097f8:	425b      	negs	r3, r3
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	b21b      	sxth	r3, r3
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7fd f841 	bl	8006888 <pbuf_header>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d128      	bne.n	800985e <ethernet_input+0x10e>
        ip4_input(p, netif);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7fe ff8a 	bl	8008728 <ip4_input>
      break;
 8009814:	e01d      	b.n	8009852 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01e      	beq.n	8009862 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	895b      	ldrh	r3, [r3, #10]
 8009828:	461a      	mov	r2, r3
 800982a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800982e:	429a      	cmp	r2, r3
 8009830:	db19      	blt.n	8009866 <ethernet_input+0x116>
 8009832:	8afb      	ldrh	r3, [r7, #22]
 8009834:	425b      	negs	r3, r3
 8009836:	b29b      	uxth	r3, r3
 8009838:	b21b      	sxth	r3, r3
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7fd f823 	bl	8006888 <pbuf_header>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10e      	bne.n	8009866 <ethernet_input+0x116>
        etharp_input(p, netif);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7fe f95a 	bl	8007b04 <etharp_input>
      break;
 8009850:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	e00c      	b.n	8009870 <ethernet_input+0x120>
    goto free_and_return;
 8009856:	bf00      	nop
 8009858:	e006      	b.n	8009868 <ethernet_input+0x118>
        goto free_and_return;
 800985a:	bf00      	nop
 800985c:	e004      	b.n	8009868 <ethernet_input+0x118>
        goto free_and_return;
 800985e:	bf00      	nop
 8009860:	e002      	b.n	8009868 <ethernet_input+0x118>
        goto free_and_return;
 8009862:	bf00      	nop
 8009864:	e000      	b.n	8009868 <ethernet_input+0x118>
        goto free_and_return;
 8009866:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7fd f831 	bl	80068d0 <pbuf_free>
  return ERR_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	0800b95c 	.word	0x0800b95c

0800987c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800988a:	8c3b      	ldrh	r3, [r7, #32]
 800988c:	4618      	mov	r0, r3
 800988e:	f7fb ff64 	bl	800575a <lwip_htons>
 8009892:	4603      	mov	r3, r0
 8009894:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8009896:	210e      	movs	r1, #14
 8009898:	68b8      	ldr	r0, [r7, #8]
 800989a:	f7fc fff5 	bl	8006888 <pbuf_header>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d125      	bne.n	80098f0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	8afa      	ldrh	r2, [r7, #22]
 80098ae:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2206      	movs	r2, #6
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f9c5 	bl	8009c46 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3306      	adds	r3, #6
 80098c0:	2206      	movs	r2, #6
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f000 f9be 	bl	8009c46 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	d006      	beq.n	80098e2 <ethernet_output+0x66>
 80098d4:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <ethernet_output+0x84>)
 80098d6:	f240 122b 	movw	r2, #299	; 0x12b
 80098da:	490a      	ldr	r1, [pc, #40]	; (8009904 <ethernet_output+0x88>)
 80098dc:	480a      	ldr	r0, [pc, #40]	; (8009908 <ethernet_output+0x8c>)
 80098de:	f000 f8d7 	bl	8009a90 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	4798      	blx	r3
 80098ec:	4603      	mov	r3, r0
 80098ee:	e002      	b.n	80098f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80098f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80098f2:	f06f 0301 	mvn.w	r3, #1
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	0800b81c 	.word	0x0800b81c
 8009904:	0800b854 	.word	0x0800b854
 8009908:	0800b888 	.word	0x0800b888

0800990c <std>:
 800990c:	2300      	movs	r3, #0
 800990e:	b510      	push	{r4, lr}
 8009910:	4604      	mov	r4, r0
 8009912:	e9c0 3300 	strd	r3, r3, [r0]
 8009916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800991a:	6083      	str	r3, [r0, #8]
 800991c:	8181      	strh	r1, [r0, #12]
 800991e:	6643      	str	r3, [r0, #100]	; 0x64
 8009920:	81c2      	strh	r2, [r0, #14]
 8009922:	6183      	str	r3, [r0, #24]
 8009924:	4619      	mov	r1, r3
 8009926:	2208      	movs	r2, #8
 8009928:	305c      	adds	r0, #92	; 0x5c
 800992a:	f000 f916 	bl	8009b5a <memset>
 800992e:	4b0d      	ldr	r3, [pc, #52]	; (8009964 <std+0x58>)
 8009930:	6224      	str	r4, [r4, #32]
 8009932:	6263      	str	r3, [r4, #36]	; 0x24
 8009934:	4b0c      	ldr	r3, [pc, #48]	; (8009968 <std+0x5c>)
 8009936:	62a3      	str	r3, [r4, #40]	; 0x28
 8009938:	4b0c      	ldr	r3, [pc, #48]	; (800996c <std+0x60>)
 800993a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800993c:	4b0c      	ldr	r3, [pc, #48]	; (8009970 <std+0x64>)
 800993e:	6323      	str	r3, [r4, #48]	; 0x30
 8009940:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <std+0x68>)
 8009942:	429c      	cmp	r4, r3
 8009944:	d006      	beq.n	8009954 <std+0x48>
 8009946:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800994a:	4294      	cmp	r4, r2
 800994c:	d002      	beq.n	8009954 <std+0x48>
 800994e:	33d0      	adds	r3, #208	; 0xd0
 8009950:	429c      	cmp	r4, r3
 8009952:	d105      	bne.n	8009960 <std+0x54>
 8009954:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800995c:	f000 b970 	b.w	8009c40 <__retarget_lock_init_recursive>
 8009960:	bd10      	pop	{r4, pc}
 8009962:	bf00      	nop
 8009964:	08009ab5 	.word	0x08009ab5
 8009968:	08009ad7 	.word	0x08009ad7
 800996c:	08009b0f 	.word	0x08009b0f
 8009970:	08009b33 	.word	0x08009b33
 8009974:	20007d38 	.word	0x20007d38

08009978 <stdio_exit_handler>:
 8009978:	4a02      	ldr	r2, [pc, #8]	; (8009984 <stdio_exit_handler+0xc>)
 800997a:	4903      	ldr	r1, [pc, #12]	; (8009988 <stdio_exit_handler+0x10>)
 800997c:	4803      	ldr	r0, [pc, #12]	; (800998c <stdio_exit_handler+0x14>)
 800997e:	f000 b869 	b.w	8009a54 <_fwalk_sglue>
 8009982:	bf00      	nop
 8009984:	2000000c 	.word	0x2000000c
 8009988:	0800a4fd 	.word	0x0800a4fd
 800998c:	20000018 	.word	0x20000018

08009990 <cleanup_stdio>:
 8009990:	6841      	ldr	r1, [r0, #4]
 8009992:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <cleanup_stdio+0x34>)
 8009994:	b510      	push	{r4, lr}
 8009996:	4299      	cmp	r1, r3
 8009998:	4604      	mov	r4, r0
 800999a:	d001      	beq.n	80099a0 <cleanup_stdio+0x10>
 800999c:	f000 fdae 	bl	800a4fc <_fflush_r>
 80099a0:	68a1      	ldr	r1, [r4, #8]
 80099a2:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <cleanup_stdio+0x38>)
 80099a4:	4299      	cmp	r1, r3
 80099a6:	d002      	beq.n	80099ae <cleanup_stdio+0x1e>
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 fda7 	bl	800a4fc <_fflush_r>
 80099ae:	68e1      	ldr	r1, [r4, #12]
 80099b0:	4b06      	ldr	r3, [pc, #24]	; (80099cc <cleanup_stdio+0x3c>)
 80099b2:	4299      	cmp	r1, r3
 80099b4:	d004      	beq.n	80099c0 <cleanup_stdio+0x30>
 80099b6:	4620      	mov	r0, r4
 80099b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099bc:	f000 bd9e 	b.w	800a4fc <_fflush_r>
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	bf00      	nop
 80099c4:	20007d38 	.word	0x20007d38
 80099c8:	20007da0 	.word	0x20007da0
 80099cc:	20007e08 	.word	0x20007e08

080099d0 <global_stdio_init.part.0>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <global_stdio_init.part.0+0x30>)
 80099d4:	4c0b      	ldr	r4, [pc, #44]	; (8009a04 <global_stdio_init.part.0+0x34>)
 80099d6:	4a0c      	ldr	r2, [pc, #48]	; (8009a08 <global_stdio_init.part.0+0x38>)
 80099d8:	4620      	mov	r0, r4
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	2104      	movs	r1, #4
 80099de:	2200      	movs	r2, #0
 80099e0:	f7ff ff94 	bl	800990c <std>
 80099e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099e8:	2201      	movs	r2, #1
 80099ea:	2109      	movs	r1, #9
 80099ec:	f7ff ff8e 	bl	800990c <std>
 80099f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099f4:	2202      	movs	r2, #2
 80099f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099fa:	2112      	movs	r1, #18
 80099fc:	f7ff bf86 	b.w	800990c <std>
 8009a00:	20007e70 	.word	0x20007e70
 8009a04:	20007d38 	.word	0x20007d38
 8009a08:	08009979 	.word	0x08009979

08009a0c <__sfp_lock_acquire>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	; (8009a14 <__sfp_lock_acquire+0x8>)
 8009a0e:	f000 b918 	b.w	8009c42 <__retarget_lock_acquire_recursive>
 8009a12:	bf00      	nop
 8009a14:	20007e79 	.word	0x20007e79

08009a18 <__sfp_lock_release>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__sfp_lock_release+0x8>)
 8009a1a:	f000 b913 	b.w	8009c44 <__retarget_lock_release_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20007e79 	.word	0x20007e79

08009a24 <__sinit>:
 8009a24:	b510      	push	{r4, lr}
 8009a26:	4604      	mov	r4, r0
 8009a28:	f7ff fff0 	bl	8009a0c <__sfp_lock_acquire>
 8009a2c:	6a23      	ldr	r3, [r4, #32]
 8009a2e:	b11b      	cbz	r3, 8009a38 <__sinit+0x14>
 8009a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a34:	f7ff bff0 	b.w	8009a18 <__sfp_lock_release>
 8009a38:	4b04      	ldr	r3, [pc, #16]	; (8009a4c <__sinit+0x28>)
 8009a3a:	6223      	str	r3, [r4, #32]
 8009a3c:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <__sinit+0x2c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1f5      	bne.n	8009a30 <__sinit+0xc>
 8009a44:	f7ff ffc4 	bl	80099d0 <global_stdio_init.part.0>
 8009a48:	e7f2      	b.n	8009a30 <__sinit+0xc>
 8009a4a:	bf00      	nop
 8009a4c:	08009991 	.word	0x08009991
 8009a50:	20007e70 	.word	0x20007e70

08009a54 <_fwalk_sglue>:
 8009a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	4607      	mov	r7, r0
 8009a5a:	4688      	mov	r8, r1
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	2600      	movs	r6, #0
 8009a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a64:	f1b9 0901 	subs.w	r9, r9, #1
 8009a68:	d505      	bpl.n	8009a76 <_fwalk_sglue+0x22>
 8009a6a:	6824      	ldr	r4, [r4, #0]
 8009a6c:	2c00      	cmp	r4, #0
 8009a6e:	d1f7      	bne.n	8009a60 <_fwalk_sglue+0xc>
 8009a70:	4630      	mov	r0, r6
 8009a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a76:	89ab      	ldrh	r3, [r5, #12]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d907      	bls.n	8009a8c <_fwalk_sglue+0x38>
 8009a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a80:	3301      	adds	r3, #1
 8009a82:	d003      	beq.n	8009a8c <_fwalk_sglue+0x38>
 8009a84:	4629      	mov	r1, r5
 8009a86:	4638      	mov	r0, r7
 8009a88:	47c0      	blx	r8
 8009a8a:	4306      	orrs	r6, r0
 8009a8c:	3568      	adds	r5, #104	; 0x68
 8009a8e:	e7e9      	b.n	8009a64 <_fwalk_sglue+0x10>

08009a90 <iprintf>:
 8009a90:	b40f      	push	{r0, r1, r2, r3}
 8009a92:	b507      	push	{r0, r1, r2, lr}
 8009a94:	4906      	ldr	r1, [pc, #24]	; (8009ab0 <iprintf+0x20>)
 8009a96:	ab04      	add	r3, sp, #16
 8009a98:	6808      	ldr	r0, [r1, #0]
 8009a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9e:	6881      	ldr	r1, [r0, #8]
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	f000 f9fb 	bl	8009e9c <_vfiprintf_r>
 8009aa6:	b003      	add	sp, #12
 8009aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aac:	b004      	add	sp, #16
 8009aae:	4770      	bx	lr
 8009ab0:	20000064 	.word	0x20000064

08009ab4 <__sread>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009abc:	f000 f878 	bl	8009bb0 <_read_r>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	bfab      	itete	ge
 8009ac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ac6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ac8:	181b      	addge	r3, r3, r0
 8009aca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ace:	bfac      	ite	ge
 8009ad0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ad2:	81a3      	strhlt	r3, [r4, #12]
 8009ad4:	bd10      	pop	{r4, pc}

08009ad6 <__swrite>:
 8009ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ada:	461f      	mov	r7, r3
 8009adc:	898b      	ldrh	r3, [r1, #12]
 8009ade:	4605      	mov	r5, r0
 8009ae0:	05db      	lsls	r3, r3, #23
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	d505      	bpl.n	8009af4 <__swrite+0x1e>
 8009ae8:	2302      	movs	r3, #2
 8009aea:	2200      	movs	r2, #0
 8009aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af0:	f000 f84c 	bl	8009b8c <_lseek_r>
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	4632      	mov	r2, r6
 8009af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	4628      	mov	r0, r5
 8009b00:	463b      	mov	r3, r7
 8009b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0a:	f000 b863 	b.w	8009bd4 <_write_r>

08009b0e <__sseek>:
 8009b0e:	b510      	push	{r4, lr}
 8009b10:	460c      	mov	r4, r1
 8009b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b16:	f000 f839 	bl	8009b8c <_lseek_r>
 8009b1a:	1c43      	adds	r3, r0, #1
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	bf15      	itete	ne
 8009b20:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b2a:	81a3      	strheq	r3, [r4, #12]
 8009b2c:	bf18      	it	ne
 8009b2e:	81a3      	strhne	r3, [r4, #12]
 8009b30:	bd10      	pop	{r4, pc}

08009b32 <__sclose>:
 8009b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b36:	f000 b819 	b.w	8009b6c <_close_r>

08009b3a <memcmp>:
 8009b3a:	b510      	push	{r4, lr}
 8009b3c:	3901      	subs	r1, #1
 8009b3e:	4402      	add	r2, r0
 8009b40:	4290      	cmp	r0, r2
 8009b42:	d101      	bne.n	8009b48 <memcmp+0xe>
 8009b44:	2000      	movs	r0, #0
 8009b46:	e005      	b.n	8009b54 <memcmp+0x1a>
 8009b48:	7803      	ldrb	r3, [r0, #0]
 8009b4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009b4e:	42a3      	cmp	r3, r4
 8009b50:	d001      	beq.n	8009b56 <memcmp+0x1c>
 8009b52:	1b18      	subs	r0, r3, r4
 8009b54:	bd10      	pop	{r4, pc}
 8009b56:	3001      	adds	r0, #1
 8009b58:	e7f2      	b.n	8009b40 <memcmp+0x6>

08009b5a <memset>:
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	4402      	add	r2, r0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d100      	bne.n	8009b64 <memset+0xa>
 8009b62:	4770      	bx	lr
 8009b64:	f803 1b01 	strb.w	r1, [r3], #1
 8009b68:	e7f9      	b.n	8009b5e <memset+0x4>
	...

08009b6c <_close_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	2300      	movs	r3, #0
 8009b70:	4d05      	ldr	r5, [pc, #20]	; (8009b88 <_close_r+0x1c>)
 8009b72:	4604      	mov	r4, r0
 8009b74:	4608      	mov	r0, r1
 8009b76:	602b      	str	r3, [r5, #0]
 8009b78:	f7f7 fe57 	bl	800182a <_close>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d102      	bne.n	8009b86 <_close_r+0x1a>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	b103      	cbz	r3, 8009b86 <_close_r+0x1a>
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	bd38      	pop	{r3, r4, r5, pc}
 8009b88:	20007e74 	.word	0x20007e74

08009b8c <_lseek_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4604      	mov	r4, r0
 8009b90:	4608      	mov	r0, r1
 8009b92:	4611      	mov	r1, r2
 8009b94:	2200      	movs	r2, #0
 8009b96:	4d05      	ldr	r5, [pc, #20]	; (8009bac <_lseek_r+0x20>)
 8009b98:	602a      	str	r2, [r5, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f7f7 fe69 	bl	8001872 <_lseek>
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d102      	bne.n	8009baa <_lseek_r+0x1e>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	b103      	cbz	r3, 8009baa <_lseek_r+0x1e>
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	20007e74 	.word	0x20007e74

08009bb0 <_read_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4d05      	ldr	r5, [pc, #20]	; (8009bd0 <_read_r+0x20>)
 8009bbc:	602a      	str	r2, [r5, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f7f7 fdfa 	bl	80017b8 <_read>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d102      	bne.n	8009bce <_read_r+0x1e>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	b103      	cbz	r3, 8009bce <_read_r+0x1e>
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	20007e74 	.word	0x20007e74

08009bd4 <_write_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	4608      	mov	r0, r1
 8009bda:	4611      	mov	r1, r2
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4d05      	ldr	r5, [pc, #20]	; (8009bf4 <_write_r+0x20>)
 8009be0:	602a      	str	r2, [r5, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	f7f7 fe05 	bl	80017f2 <_write>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	d102      	bne.n	8009bf2 <_write_r+0x1e>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	b103      	cbz	r3, 8009bf2 <_write_r+0x1e>
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
 8009bf4:	20007e74 	.word	0x20007e74

08009bf8 <__libc_init_array>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	2600      	movs	r6, #0
 8009bfc:	4d0c      	ldr	r5, [pc, #48]	; (8009c30 <__libc_init_array+0x38>)
 8009bfe:	4c0d      	ldr	r4, [pc, #52]	; (8009c34 <__libc_init_array+0x3c>)
 8009c00:	1b64      	subs	r4, r4, r5
 8009c02:	10a4      	asrs	r4, r4, #2
 8009c04:	42a6      	cmp	r6, r4
 8009c06:	d109      	bne.n	8009c1c <__libc_init_array+0x24>
 8009c08:	f000 fdd8 	bl	800a7bc <_init>
 8009c0c:	2600      	movs	r6, #0
 8009c0e:	4d0a      	ldr	r5, [pc, #40]	; (8009c38 <__libc_init_array+0x40>)
 8009c10:	4c0a      	ldr	r4, [pc, #40]	; (8009c3c <__libc_init_array+0x44>)
 8009c12:	1b64      	subs	r4, r4, r5
 8009c14:	10a4      	asrs	r4, r4, #2
 8009c16:	42a6      	cmp	r6, r4
 8009c18:	d105      	bne.n	8009c26 <__libc_init_array+0x2e>
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}
 8009c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c20:	4798      	blx	r3
 8009c22:	3601      	adds	r6, #1
 8009c24:	e7ee      	b.n	8009c04 <__libc_init_array+0xc>
 8009c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c2a:	4798      	blx	r3
 8009c2c:	3601      	adds	r6, #1
 8009c2e:	e7f2      	b.n	8009c16 <__libc_init_array+0x1e>
 8009c30:	0800b9a8 	.word	0x0800b9a8
 8009c34:	0800b9a8 	.word	0x0800b9a8
 8009c38:	0800b9a8 	.word	0x0800b9a8
 8009c3c:	0800b9ac 	.word	0x0800b9ac

08009c40 <__retarget_lock_init_recursive>:
 8009c40:	4770      	bx	lr

08009c42 <__retarget_lock_acquire_recursive>:
 8009c42:	4770      	bx	lr

08009c44 <__retarget_lock_release_recursive>:
 8009c44:	4770      	bx	lr

08009c46 <memcpy>:
 8009c46:	440a      	add	r2, r1
 8009c48:	4291      	cmp	r1, r2
 8009c4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c4e:	d100      	bne.n	8009c52 <memcpy+0xc>
 8009c50:	4770      	bx	lr
 8009c52:	b510      	push	{r4, lr}
 8009c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c58:	4291      	cmp	r1, r2
 8009c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c5e:	d1f9      	bne.n	8009c54 <memcpy+0xe>
 8009c60:	bd10      	pop	{r4, pc}
	...

08009c64 <_free_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4605      	mov	r5, r0
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d040      	beq.n	8009cee <_free_r+0x8a>
 8009c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c70:	1f0c      	subs	r4, r1, #4
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	bfb8      	it	lt
 8009c76:	18e4      	addlt	r4, r4, r3
 8009c78:	f000 f8dc 	bl	8009e34 <__malloc_lock>
 8009c7c:	4a1c      	ldr	r2, [pc, #112]	; (8009cf0 <_free_r+0x8c>)
 8009c7e:	6813      	ldr	r3, [r2, #0]
 8009c80:	b933      	cbnz	r3, 8009c90 <_free_r+0x2c>
 8009c82:	6063      	str	r3, [r4, #4]
 8009c84:	6014      	str	r4, [r2, #0]
 8009c86:	4628      	mov	r0, r5
 8009c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c8c:	f000 b8d8 	b.w	8009e40 <__malloc_unlock>
 8009c90:	42a3      	cmp	r3, r4
 8009c92:	d908      	bls.n	8009ca6 <_free_r+0x42>
 8009c94:	6820      	ldr	r0, [r4, #0]
 8009c96:	1821      	adds	r1, r4, r0
 8009c98:	428b      	cmp	r3, r1
 8009c9a:	bf01      	itttt	eq
 8009c9c:	6819      	ldreq	r1, [r3, #0]
 8009c9e:	685b      	ldreq	r3, [r3, #4]
 8009ca0:	1809      	addeq	r1, r1, r0
 8009ca2:	6021      	streq	r1, [r4, #0]
 8009ca4:	e7ed      	b.n	8009c82 <_free_r+0x1e>
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	b10b      	cbz	r3, 8009cb0 <_free_r+0x4c>
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	d9fa      	bls.n	8009ca6 <_free_r+0x42>
 8009cb0:	6811      	ldr	r1, [r2, #0]
 8009cb2:	1850      	adds	r0, r2, r1
 8009cb4:	42a0      	cmp	r0, r4
 8009cb6:	d10b      	bne.n	8009cd0 <_free_r+0x6c>
 8009cb8:	6820      	ldr	r0, [r4, #0]
 8009cba:	4401      	add	r1, r0
 8009cbc:	1850      	adds	r0, r2, r1
 8009cbe:	4283      	cmp	r3, r0
 8009cc0:	6011      	str	r1, [r2, #0]
 8009cc2:	d1e0      	bne.n	8009c86 <_free_r+0x22>
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	4408      	add	r0, r1
 8009cca:	6010      	str	r0, [r2, #0]
 8009ccc:	6053      	str	r3, [r2, #4]
 8009cce:	e7da      	b.n	8009c86 <_free_r+0x22>
 8009cd0:	d902      	bls.n	8009cd8 <_free_r+0x74>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	602b      	str	r3, [r5, #0]
 8009cd6:	e7d6      	b.n	8009c86 <_free_r+0x22>
 8009cd8:	6820      	ldr	r0, [r4, #0]
 8009cda:	1821      	adds	r1, r4, r0
 8009cdc:	428b      	cmp	r3, r1
 8009cde:	bf01      	itttt	eq
 8009ce0:	6819      	ldreq	r1, [r3, #0]
 8009ce2:	685b      	ldreq	r3, [r3, #4]
 8009ce4:	1809      	addeq	r1, r1, r0
 8009ce6:	6021      	streq	r1, [r4, #0]
 8009ce8:	6063      	str	r3, [r4, #4]
 8009cea:	6054      	str	r4, [r2, #4]
 8009cec:	e7cb      	b.n	8009c86 <_free_r+0x22>
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20007e7c 	.word	0x20007e7c

08009cf4 <sbrk_aligned>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	4e0e      	ldr	r6, [pc, #56]	; (8009d30 <sbrk_aligned+0x3c>)
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	6831      	ldr	r1, [r6, #0]
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	b911      	cbnz	r1, 8009d06 <sbrk_aligned+0x12>
 8009d00:	f000 fcba 	bl	800a678 <_sbrk_r>
 8009d04:	6030      	str	r0, [r6, #0]
 8009d06:	4621      	mov	r1, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f000 fcb5 	bl	800a678 <_sbrk_r>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	d00a      	beq.n	8009d28 <sbrk_aligned+0x34>
 8009d12:	1cc4      	adds	r4, r0, #3
 8009d14:	f024 0403 	bic.w	r4, r4, #3
 8009d18:	42a0      	cmp	r0, r4
 8009d1a:	d007      	beq.n	8009d2c <sbrk_aligned+0x38>
 8009d1c:	1a21      	subs	r1, r4, r0
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 fcaa 	bl	800a678 <_sbrk_r>
 8009d24:	3001      	adds	r0, #1
 8009d26:	d101      	bne.n	8009d2c <sbrk_aligned+0x38>
 8009d28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	20007e80 	.word	0x20007e80

08009d34 <_malloc_r>:
 8009d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d38:	1ccd      	adds	r5, r1, #3
 8009d3a:	f025 0503 	bic.w	r5, r5, #3
 8009d3e:	3508      	adds	r5, #8
 8009d40:	2d0c      	cmp	r5, #12
 8009d42:	bf38      	it	cc
 8009d44:	250c      	movcc	r5, #12
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	4607      	mov	r7, r0
 8009d4a:	db01      	blt.n	8009d50 <_malloc_r+0x1c>
 8009d4c:	42a9      	cmp	r1, r5
 8009d4e:	d905      	bls.n	8009d5c <_malloc_r+0x28>
 8009d50:	230c      	movs	r3, #12
 8009d52:	2600      	movs	r6, #0
 8009d54:	603b      	str	r3, [r7, #0]
 8009d56:	4630      	mov	r0, r6
 8009d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e30 <_malloc_r+0xfc>
 8009d60:	f000 f868 	bl	8009e34 <__malloc_lock>
 8009d64:	f8d8 3000 	ldr.w	r3, [r8]
 8009d68:	461c      	mov	r4, r3
 8009d6a:	bb5c      	cbnz	r4, 8009dc4 <_malloc_r+0x90>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	4638      	mov	r0, r7
 8009d70:	f7ff ffc0 	bl	8009cf4 <sbrk_aligned>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	4604      	mov	r4, r0
 8009d78:	d155      	bne.n	8009e26 <_malloc_r+0xf2>
 8009d7a:	f8d8 4000 	ldr.w	r4, [r8]
 8009d7e:	4626      	mov	r6, r4
 8009d80:	2e00      	cmp	r6, #0
 8009d82:	d145      	bne.n	8009e10 <_malloc_r+0xdc>
 8009d84:	2c00      	cmp	r4, #0
 8009d86:	d048      	beq.n	8009e1a <_malloc_r+0xe6>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	eb04 0903 	add.w	r9, r4, r3
 8009d92:	f000 fc71 	bl	800a678 <_sbrk_r>
 8009d96:	4581      	cmp	r9, r0
 8009d98:	d13f      	bne.n	8009e1a <_malloc_r+0xe6>
 8009d9a:	6821      	ldr	r1, [r4, #0]
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	1a6d      	subs	r5, r5, r1
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7ff ffa7 	bl	8009cf4 <sbrk_aligned>
 8009da6:	3001      	adds	r0, #1
 8009da8:	d037      	beq.n	8009e1a <_malloc_r+0xe6>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	442b      	add	r3, r5
 8009dae:	6023      	str	r3, [r4, #0]
 8009db0:	f8d8 3000 	ldr.w	r3, [r8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d038      	beq.n	8009e2a <_malloc_r+0xf6>
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	42a2      	cmp	r2, r4
 8009dbc:	d12b      	bne.n	8009e16 <_malloc_r+0xe2>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	605a      	str	r2, [r3, #4]
 8009dc2:	e00f      	b.n	8009de4 <_malloc_r+0xb0>
 8009dc4:	6822      	ldr	r2, [r4, #0]
 8009dc6:	1b52      	subs	r2, r2, r5
 8009dc8:	d41f      	bmi.n	8009e0a <_malloc_r+0xd6>
 8009dca:	2a0b      	cmp	r2, #11
 8009dcc:	d917      	bls.n	8009dfe <_malloc_r+0xca>
 8009dce:	1961      	adds	r1, r4, r5
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	6025      	str	r5, [r4, #0]
 8009dd4:	bf18      	it	ne
 8009dd6:	6059      	strne	r1, [r3, #4]
 8009dd8:	6863      	ldr	r3, [r4, #4]
 8009dda:	bf08      	it	eq
 8009ddc:	f8c8 1000 	streq.w	r1, [r8]
 8009de0:	5162      	str	r2, [r4, r5]
 8009de2:	604b      	str	r3, [r1, #4]
 8009de4:	4638      	mov	r0, r7
 8009de6:	f104 060b 	add.w	r6, r4, #11
 8009dea:	f000 f829 	bl	8009e40 <__malloc_unlock>
 8009dee:	f026 0607 	bic.w	r6, r6, #7
 8009df2:	1d23      	adds	r3, r4, #4
 8009df4:	1af2      	subs	r2, r6, r3
 8009df6:	d0ae      	beq.n	8009d56 <_malloc_r+0x22>
 8009df8:	1b9b      	subs	r3, r3, r6
 8009dfa:	50a3      	str	r3, [r4, r2]
 8009dfc:	e7ab      	b.n	8009d56 <_malloc_r+0x22>
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	6862      	ldr	r2, [r4, #4]
 8009e02:	d1dd      	bne.n	8009dc0 <_malloc_r+0x8c>
 8009e04:	f8c8 2000 	str.w	r2, [r8]
 8009e08:	e7ec      	b.n	8009de4 <_malloc_r+0xb0>
 8009e0a:	4623      	mov	r3, r4
 8009e0c:	6864      	ldr	r4, [r4, #4]
 8009e0e:	e7ac      	b.n	8009d6a <_malloc_r+0x36>
 8009e10:	4634      	mov	r4, r6
 8009e12:	6876      	ldr	r6, [r6, #4]
 8009e14:	e7b4      	b.n	8009d80 <_malloc_r+0x4c>
 8009e16:	4613      	mov	r3, r2
 8009e18:	e7cc      	b.n	8009db4 <_malloc_r+0x80>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	f000 f80e 	bl	8009e40 <__malloc_unlock>
 8009e24:	e797      	b.n	8009d56 <_malloc_r+0x22>
 8009e26:	6025      	str	r5, [r4, #0]
 8009e28:	e7dc      	b.n	8009de4 <_malloc_r+0xb0>
 8009e2a:	605b      	str	r3, [r3, #4]
 8009e2c:	deff      	udf	#255	; 0xff
 8009e2e:	bf00      	nop
 8009e30:	20007e7c 	.word	0x20007e7c

08009e34 <__malloc_lock>:
 8009e34:	4801      	ldr	r0, [pc, #4]	; (8009e3c <__malloc_lock+0x8>)
 8009e36:	f7ff bf04 	b.w	8009c42 <__retarget_lock_acquire_recursive>
 8009e3a:	bf00      	nop
 8009e3c:	20007e78 	.word	0x20007e78

08009e40 <__malloc_unlock>:
 8009e40:	4801      	ldr	r0, [pc, #4]	; (8009e48 <__malloc_unlock+0x8>)
 8009e42:	f7ff beff 	b.w	8009c44 <__retarget_lock_release_recursive>
 8009e46:	bf00      	nop
 8009e48:	20007e78 	.word	0x20007e78

08009e4c <__sfputc_r>:
 8009e4c:	6893      	ldr	r3, [r2, #8]
 8009e4e:	b410      	push	{r4}
 8009e50:	3b01      	subs	r3, #1
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	6093      	str	r3, [r2, #8]
 8009e56:	da07      	bge.n	8009e68 <__sfputc_r+0x1c>
 8009e58:	6994      	ldr	r4, [r2, #24]
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	db01      	blt.n	8009e62 <__sfputc_r+0x16>
 8009e5e:	290a      	cmp	r1, #10
 8009e60:	d102      	bne.n	8009e68 <__sfputc_r+0x1c>
 8009e62:	bc10      	pop	{r4}
 8009e64:	f000 bb72 	b.w	800a54c <__swbuf_r>
 8009e68:	6813      	ldr	r3, [r2, #0]
 8009e6a:	1c58      	adds	r0, r3, #1
 8009e6c:	6010      	str	r0, [r2, #0]
 8009e6e:	7019      	strb	r1, [r3, #0]
 8009e70:	4608      	mov	r0, r1
 8009e72:	bc10      	pop	{r4}
 8009e74:	4770      	bx	lr

08009e76 <__sfputs_r>:
 8009e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e78:	4606      	mov	r6, r0
 8009e7a:	460f      	mov	r7, r1
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	18d5      	adds	r5, r2, r3
 8009e80:	42ac      	cmp	r4, r5
 8009e82:	d101      	bne.n	8009e88 <__sfputs_r+0x12>
 8009e84:	2000      	movs	r0, #0
 8009e86:	e007      	b.n	8009e98 <__sfputs_r+0x22>
 8009e88:	463a      	mov	r2, r7
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e90:	f7ff ffdc 	bl	8009e4c <__sfputc_r>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d1f3      	bne.n	8009e80 <__sfputs_r+0xa>
 8009e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e9c <_vfiprintf_r>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	460d      	mov	r5, r1
 8009ea2:	4614      	mov	r4, r2
 8009ea4:	4698      	mov	r8, r3
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	b09d      	sub	sp, #116	; 0x74
 8009eaa:	b118      	cbz	r0, 8009eb4 <_vfiprintf_r+0x18>
 8009eac:	6a03      	ldr	r3, [r0, #32]
 8009eae:	b90b      	cbnz	r3, 8009eb4 <_vfiprintf_r+0x18>
 8009eb0:	f7ff fdb8 	bl	8009a24 <__sinit>
 8009eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eb6:	07d9      	lsls	r1, r3, #31
 8009eb8:	d405      	bmi.n	8009ec6 <_vfiprintf_r+0x2a>
 8009eba:	89ab      	ldrh	r3, [r5, #12]
 8009ebc:	059a      	lsls	r2, r3, #22
 8009ebe:	d402      	bmi.n	8009ec6 <_vfiprintf_r+0x2a>
 8009ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ec2:	f7ff febe 	bl	8009c42 <__retarget_lock_acquire_recursive>
 8009ec6:	89ab      	ldrh	r3, [r5, #12]
 8009ec8:	071b      	lsls	r3, r3, #28
 8009eca:	d501      	bpl.n	8009ed0 <_vfiprintf_r+0x34>
 8009ecc:	692b      	ldr	r3, [r5, #16]
 8009ece:	b99b      	cbnz	r3, 8009ef8 <_vfiprintf_r+0x5c>
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f000 fb78 	bl	800a5c8 <__swsetup_r>
 8009ed8:	b170      	cbz	r0, 8009ef8 <_vfiprintf_r+0x5c>
 8009eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009edc:	07dc      	lsls	r4, r3, #31
 8009ede:	d504      	bpl.n	8009eea <_vfiprintf_r+0x4e>
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ee4:	b01d      	add	sp, #116	; 0x74
 8009ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	0598      	lsls	r0, r3, #22
 8009eee:	d4f7      	bmi.n	8009ee0 <_vfiprintf_r+0x44>
 8009ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ef2:	f7ff fea7 	bl	8009c44 <__retarget_lock_release_recursive>
 8009ef6:	e7f3      	b.n	8009ee0 <_vfiprintf_r+0x44>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	9309      	str	r3, [sp, #36]	; 0x24
 8009efc:	2320      	movs	r3, #32
 8009efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f02:	2330      	movs	r3, #48	; 0x30
 8009f04:	f04f 0901 	mov.w	r9, #1
 8009f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a0bc <_vfiprintf_r+0x220>
 8009f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f14:	4623      	mov	r3, r4
 8009f16:	469a      	mov	sl, r3
 8009f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f1c:	b10a      	cbz	r2, 8009f22 <_vfiprintf_r+0x86>
 8009f1e:	2a25      	cmp	r2, #37	; 0x25
 8009f20:	d1f9      	bne.n	8009f16 <_vfiprintf_r+0x7a>
 8009f22:	ebba 0b04 	subs.w	fp, sl, r4
 8009f26:	d00b      	beq.n	8009f40 <_vfiprintf_r+0xa4>
 8009f28:	465b      	mov	r3, fp
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f7ff ffa1 	bl	8009e76 <__sfputs_r>
 8009f34:	3001      	adds	r0, #1
 8009f36:	f000 80a9 	beq.w	800a08c <_vfiprintf_r+0x1f0>
 8009f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f3c:	445a      	add	r2, fp
 8009f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f40:	f89a 3000 	ldrb.w	r3, [sl]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 80a1 	beq.w	800a08c <_vfiprintf_r+0x1f0>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f54:	f10a 0a01 	add.w	sl, sl, #1
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	9307      	str	r3, [sp, #28]
 8009f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f60:	931a      	str	r3, [sp, #104]	; 0x68
 8009f62:	4654      	mov	r4, sl
 8009f64:	2205      	movs	r2, #5
 8009f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f6a:	4854      	ldr	r0, [pc, #336]	; (800a0bc <_vfiprintf_r+0x220>)
 8009f6c:	f000 fb94 	bl	800a698 <memchr>
 8009f70:	9a04      	ldr	r2, [sp, #16]
 8009f72:	b9d8      	cbnz	r0, 8009fac <_vfiprintf_r+0x110>
 8009f74:	06d1      	lsls	r1, r2, #27
 8009f76:	bf44      	itt	mi
 8009f78:	2320      	movmi	r3, #32
 8009f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f7e:	0713      	lsls	r3, r2, #28
 8009f80:	bf44      	itt	mi
 8009f82:	232b      	movmi	r3, #43	; 0x2b
 8009f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f88:	f89a 3000 	ldrb.w	r3, [sl]
 8009f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f8e:	d015      	beq.n	8009fbc <_vfiprintf_r+0x120>
 8009f90:	4654      	mov	r4, sl
 8009f92:	2000      	movs	r0, #0
 8009f94:	f04f 0c0a 	mov.w	ip, #10
 8009f98:	9a07      	ldr	r2, [sp, #28]
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa0:	3b30      	subs	r3, #48	; 0x30
 8009fa2:	2b09      	cmp	r3, #9
 8009fa4:	d94d      	bls.n	800a042 <_vfiprintf_r+0x1a6>
 8009fa6:	b1b0      	cbz	r0, 8009fd6 <_vfiprintf_r+0x13a>
 8009fa8:	9207      	str	r2, [sp, #28]
 8009faa:	e014      	b.n	8009fd6 <_vfiprintf_r+0x13a>
 8009fac:	eba0 0308 	sub.w	r3, r0, r8
 8009fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	46a2      	mov	sl, r4
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	e7d2      	b.n	8009f62 <_vfiprintf_r+0xc6>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	1d19      	adds	r1, r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	9103      	str	r1, [sp, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bfbb      	ittet	lt
 8009fc8:	425b      	neglt	r3, r3
 8009fca:	f042 0202 	orrlt.w	r2, r2, #2
 8009fce:	9307      	strge	r3, [sp, #28]
 8009fd0:	9307      	strlt	r3, [sp, #28]
 8009fd2:	bfb8      	it	lt
 8009fd4:	9204      	strlt	r2, [sp, #16]
 8009fd6:	7823      	ldrb	r3, [r4, #0]
 8009fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8009fda:	d10c      	bne.n	8009ff6 <_vfiprintf_r+0x15a>
 8009fdc:	7863      	ldrb	r3, [r4, #1]
 8009fde:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe0:	d134      	bne.n	800a04c <_vfiprintf_r+0x1b0>
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	3402      	adds	r4, #2
 8009fe6:	1d1a      	adds	r2, r3, #4
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	9203      	str	r2, [sp, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	bfb8      	it	lt
 8009ff0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ff4:	9305      	str	r3, [sp, #20]
 8009ff6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0c0 <_vfiprintf_r+0x224>
 8009ffa:	2203      	movs	r2, #3
 8009ffc:	4650      	mov	r0, sl
 8009ffe:	7821      	ldrb	r1, [r4, #0]
 800a000:	f000 fb4a 	bl	800a698 <memchr>
 800a004:	b138      	cbz	r0, 800a016 <_vfiprintf_r+0x17a>
 800a006:	2240      	movs	r2, #64	; 0x40
 800a008:	9b04      	ldr	r3, [sp, #16]
 800a00a:	eba0 000a 	sub.w	r0, r0, sl
 800a00e:	4082      	lsls	r2, r0
 800a010:	4313      	orrs	r3, r2
 800a012:	3401      	adds	r4, #1
 800a014:	9304      	str	r3, [sp, #16]
 800a016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01a:	2206      	movs	r2, #6
 800a01c:	4829      	ldr	r0, [pc, #164]	; (800a0c4 <_vfiprintf_r+0x228>)
 800a01e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a022:	f000 fb39 	bl	800a698 <memchr>
 800a026:	2800      	cmp	r0, #0
 800a028:	d03f      	beq.n	800a0aa <_vfiprintf_r+0x20e>
 800a02a:	4b27      	ldr	r3, [pc, #156]	; (800a0c8 <_vfiprintf_r+0x22c>)
 800a02c:	bb1b      	cbnz	r3, 800a076 <_vfiprintf_r+0x1da>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	3307      	adds	r3, #7
 800a032:	f023 0307 	bic.w	r3, r3, #7
 800a036:	3308      	adds	r3, #8
 800a038:	9303      	str	r3, [sp, #12]
 800a03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a03c:	443b      	add	r3, r7
 800a03e:	9309      	str	r3, [sp, #36]	; 0x24
 800a040:	e768      	b.n	8009f14 <_vfiprintf_r+0x78>
 800a042:	460c      	mov	r4, r1
 800a044:	2001      	movs	r0, #1
 800a046:	fb0c 3202 	mla	r2, ip, r2, r3
 800a04a:	e7a6      	b.n	8009f9a <_vfiprintf_r+0xfe>
 800a04c:	2300      	movs	r3, #0
 800a04e:	f04f 0c0a 	mov.w	ip, #10
 800a052:	4619      	mov	r1, r3
 800a054:	3401      	adds	r4, #1
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	4620      	mov	r0, r4
 800a05a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a05e:	3a30      	subs	r2, #48	; 0x30
 800a060:	2a09      	cmp	r2, #9
 800a062:	d903      	bls.n	800a06c <_vfiprintf_r+0x1d0>
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0c6      	beq.n	8009ff6 <_vfiprintf_r+0x15a>
 800a068:	9105      	str	r1, [sp, #20]
 800a06a:	e7c4      	b.n	8009ff6 <_vfiprintf_r+0x15a>
 800a06c:	4604      	mov	r4, r0
 800a06e:	2301      	movs	r3, #1
 800a070:	fb0c 2101 	mla	r1, ip, r1, r2
 800a074:	e7f0      	b.n	800a058 <_vfiprintf_r+0x1bc>
 800a076:	ab03      	add	r3, sp, #12
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	462a      	mov	r2, r5
 800a07c:	4630      	mov	r0, r6
 800a07e:	4b13      	ldr	r3, [pc, #76]	; (800a0cc <_vfiprintf_r+0x230>)
 800a080:	a904      	add	r1, sp, #16
 800a082:	f3af 8000 	nop.w
 800a086:	4607      	mov	r7, r0
 800a088:	1c78      	adds	r0, r7, #1
 800a08a:	d1d6      	bne.n	800a03a <_vfiprintf_r+0x19e>
 800a08c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a08e:	07d9      	lsls	r1, r3, #31
 800a090:	d405      	bmi.n	800a09e <_vfiprintf_r+0x202>
 800a092:	89ab      	ldrh	r3, [r5, #12]
 800a094:	059a      	lsls	r2, r3, #22
 800a096:	d402      	bmi.n	800a09e <_vfiprintf_r+0x202>
 800a098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a09a:	f7ff fdd3 	bl	8009c44 <__retarget_lock_release_recursive>
 800a09e:	89ab      	ldrh	r3, [r5, #12]
 800a0a0:	065b      	lsls	r3, r3, #25
 800a0a2:	f53f af1d 	bmi.w	8009ee0 <_vfiprintf_r+0x44>
 800a0a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0a8:	e71c      	b.n	8009ee4 <_vfiprintf_r+0x48>
 800a0aa:	ab03      	add	r3, sp, #12
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	462a      	mov	r2, r5
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <_vfiprintf_r+0x230>)
 800a0b4:	a904      	add	r1, sp, #16
 800a0b6:	f000 f87d 	bl	800a1b4 <_printf_i>
 800a0ba:	e7e4      	b.n	800a086 <_vfiprintf_r+0x1ea>
 800a0bc:	0800b96a 	.word	0x0800b96a
 800a0c0:	0800b970 	.word	0x0800b970
 800a0c4:	0800b974 	.word	0x0800b974
 800a0c8:	00000000 	.word	0x00000000
 800a0cc:	08009e77 	.word	0x08009e77

0800a0d0 <_printf_common>:
 800a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	4616      	mov	r6, r2
 800a0d6:	4699      	mov	r9, r3
 800a0d8:	688a      	ldr	r2, [r1, #8]
 800a0da:	690b      	ldr	r3, [r1, #16]
 800a0dc:	4607      	mov	r7, r0
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	bfb8      	it	lt
 800a0e2:	4613      	movlt	r3, r2
 800a0e4:	6033      	str	r3, [r6, #0]
 800a0e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0f0:	b10a      	cbz	r2, 800a0f6 <_printf_common+0x26>
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	6033      	str	r3, [r6, #0]
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	0699      	lsls	r1, r3, #26
 800a0fa:	bf42      	ittt	mi
 800a0fc:	6833      	ldrmi	r3, [r6, #0]
 800a0fe:	3302      	addmi	r3, #2
 800a100:	6033      	strmi	r3, [r6, #0]
 800a102:	6825      	ldr	r5, [r4, #0]
 800a104:	f015 0506 	ands.w	r5, r5, #6
 800a108:	d106      	bne.n	800a118 <_printf_common+0x48>
 800a10a:	f104 0a19 	add.w	sl, r4, #25
 800a10e:	68e3      	ldr	r3, [r4, #12]
 800a110:	6832      	ldr	r2, [r6, #0]
 800a112:	1a9b      	subs	r3, r3, r2
 800a114:	42ab      	cmp	r3, r5
 800a116:	dc2b      	bgt.n	800a170 <_printf_common+0xa0>
 800a118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a11c:	1e13      	subs	r3, r2, #0
 800a11e:	6822      	ldr	r2, [r4, #0]
 800a120:	bf18      	it	ne
 800a122:	2301      	movne	r3, #1
 800a124:	0692      	lsls	r2, r2, #26
 800a126:	d430      	bmi.n	800a18a <_printf_common+0xba>
 800a128:	4649      	mov	r1, r9
 800a12a:	4638      	mov	r0, r7
 800a12c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a130:	47c0      	blx	r8
 800a132:	3001      	adds	r0, #1
 800a134:	d023      	beq.n	800a17e <_printf_common+0xae>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	6922      	ldr	r2, [r4, #16]
 800a13a:	f003 0306 	and.w	r3, r3, #6
 800a13e:	2b04      	cmp	r3, #4
 800a140:	bf14      	ite	ne
 800a142:	2500      	movne	r5, #0
 800a144:	6833      	ldreq	r3, [r6, #0]
 800a146:	f04f 0600 	mov.w	r6, #0
 800a14a:	bf08      	it	eq
 800a14c:	68e5      	ldreq	r5, [r4, #12]
 800a14e:	f104 041a 	add.w	r4, r4, #26
 800a152:	bf08      	it	eq
 800a154:	1aed      	subeq	r5, r5, r3
 800a156:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a15a:	bf08      	it	eq
 800a15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a160:	4293      	cmp	r3, r2
 800a162:	bfc4      	itt	gt
 800a164:	1a9b      	subgt	r3, r3, r2
 800a166:	18ed      	addgt	r5, r5, r3
 800a168:	42b5      	cmp	r5, r6
 800a16a:	d11a      	bne.n	800a1a2 <_printf_common+0xd2>
 800a16c:	2000      	movs	r0, #0
 800a16e:	e008      	b.n	800a182 <_printf_common+0xb2>
 800a170:	2301      	movs	r3, #1
 800a172:	4652      	mov	r2, sl
 800a174:	4649      	mov	r1, r9
 800a176:	4638      	mov	r0, r7
 800a178:	47c0      	blx	r8
 800a17a:	3001      	adds	r0, #1
 800a17c:	d103      	bne.n	800a186 <_printf_common+0xb6>
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a186:	3501      	adds	r5, #1
 800a188:	e7c1      	b.n	800a10e <_printf_common+0x3e>
 800a18a:	2030      	movs	r0, #48	; 0x30
 800a18c:	18e1      	adds	r1, r4, r3
 800a18e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a198:	4422      	add	r2, r4
 800a19a:	3302      	adds	r3, #2
 800a19c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1a0:	e7c2      	b.n	800a128 <_printf_common+0x58>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	47c0      	blx	r8
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d0e6      	beq.n	800a17e <_printf_common+0xae>
 800a1b0:	3601      	adds	r6, #1
 800a1b2:	e7d9      	b.n	800a168 <_printf_common+0x98>

0800a1b4 <_printf_i>:
 800a1b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b8:	7e0f      	ldrb	r7, [r1, #24]
 800a1ba:	4691      	mov	r9, r2
 800a1bc:	2f78      	cmp	r7, #120	; 0x78
 800a1be:	4680      	mov	r8, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	469a      	mov	sl, r3
 800a1c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1ca:	d807      	bhi.n	800a1dc <_printf_i+0x28>
 800a1cc:	2f62      	cmp	r7, #98	; 0x62
 800a1ce:	d80a      	bhi.n	800a1e6 <_printf_i+0x32>
 800a1d0:	2f00      	cmp	r7, #0
 800a1d2:	f000 80d5 	beq.w	800a380 <_printf_i+0x1cc>
 800a1d6:	2f58      	cmp	r7, #88	; 0x58
 800a1d8:	f000 80c1 	beq.w	800a35e <_printf_i+0x1aa>
 800a1dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1e4:	e03a      	b.n	800a25c <_printf_i+0xa8>
 800a1e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1ea:	2b15      	cmp	r3, #21
 800a1ec:	d8f6      	bhi.n	800a1dc <_printf_i+0x28>
 800a1ee:	a101      	add	r1, pc, #4	; (adr r1, 800a1f4 <_printf_i+0x40>)
 800a1f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1f4:	0800a24d 	.word	0x0800a24d
 800a1f8:	0800a261 	.word	0x0800a261
 800a1fc:	0800a1dd 	.word	0x0800a1dd
 800a200:	0800a1dd 	.word	0x0800a1dd
 800a204:	0800a1dd 	.word	0x0800a1dd
 800a208:	0800a1dd 	.word	0x0800a1dd
 800a20c:	0800a261 	.word	0x0800a261
 800a210:	0800a1dd 	.word	0x0800a1dd
 800a214:	0800a1dd 	.word	0x0800a1dd
 800a218:	0800a1dd 	.word	0x0800a1dd
 800a21c:	0800a1dd 	.word	0x0800a1dd
 800a220:	0800a367 	.word	0x0800a367
 800a224:	0800a28d 	.word	0x0800a28d
 800a228:	0800a321 	.word	0x0800a321
 800a22c:	0800a1dd 	.word	0x0800a1dd
 800a230:	0800a1dd 	.word	0x0800a1dd
 800a234:	0800a389 	.word	0x0800a389
 800a238:	0800a1dd 	.word	0x0800a1dd
 800a23c:	0800a28d 	.word	0x0800a28d
 800a240:	0800a1dd 	.word	0x0800a1dd
 800a244:	0800a1dd 	.word	0x0800a1dd
 800a248:	0800a329 	.word	0x0800a329
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	1d1a      	adds	r2, r3, #4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	602a      	str	r2, [r5, #0]
 800a254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a25c:	2301      	movs	r3, #1
 800a25e:	e0a0      	b.n	800a3a2 <_printf_i+0x1ee>
 800a260:	6820      	ldr	r0, [r4, #0]
 800a262:	682b      	ldr	r3, [r5, #0]
 800a264:	0607      	lsls	r7, r0, #24
 800a266:	f103 0104 	add.w	r1, r3, #4
 800a26a:	6029      	str	r1, [r5, #0]
 800a26c:	d501      	bpl.n	800a272 <_printf_i+0xbe>
 800a26e:	681e      	ldr	r6, [r3, #0]
 800a270:	e003      	b.n	800a27a <_printf_i+0xc6>
 800a272:	0646      	lsls	r6, r0, #25
 800a274:	d5fb      	bpl.n	800a26e <_printf_i+0xba>
 800a276:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	da03      	bge.n	800a286 <_printf_i+0xd2>
 800a27e:	232d      	movs	r3, #45	; 0x2d
 800a280:	4276      	negs	r6, r6
 800a282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a286:	230a      	movs	r3, #10
 800a288:	4859      	ldr	r0, [pc, #356]	; (800a3f0 <_printf_i+0x23c>)
 800a28a:	e012      	b.n	800a2b2 <_printf_i+0xfe>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	6820      	ldr	r0, [r4, #0]
 800a290:	1d19      	adds	r1, r3, #4
 800a292:	6029      	str	r1, [r5, #0]
 800a294:	0605      	lsls	r5, r0, #24
 800a296:	d501      	bpl.n	800a29c <_printf_i+0xe8>
 800a298:	681e      	ldr	r6, [r3, #0]
 800a29a:	e002      	b.n	800a2a2 <_printf_i+0xee>
 800a29c:	0641      	lsls	r1, r0, #25
 800a29e:	d5fb      	bpl.n	800a298 <_printf_i+0xe4>
 800a2a0:	881e      	ldrh	r6, [r3, #0]
 800a2a2:	2f6f      	cmp	r7, #111	; 0x6f
 800a2a4:	bf0c      	ite	eq
 800a2a6:	2308      	moveq	r3, #8
 800a2a8:	230a      	movne	r3, #10
 800a2aa:	4851      	ldr	r0, [pc, #324]	; (800a3f0 <_printf_i+0x23c>)
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2b2:	6865      	ldr	r5, [r4, #4]
 800a2b4:	2d00      	cmp	r5, #0
 800a2b6:	bfa8      	it	ge
 800a2b8:	6821      	ldrge	r1, [r4, #0]
 800a2ba:	60a5      	str	r5, [r4, #8]
 800a2bc:	bfa4      	itt	ge
 800a2be:	f021 0104 	bicge.w	r1, r1, #4
 800a2c2:	6021      	strge	r1, [r4, #0]
 800a2c4:	b90e      	cbnz	r6, 800a2ca <_printf_i+0x116>
 800a2c6:	2d00      	cmp	r5, #0
 800a2c8:	d04b      	beq.n	800a362 <_printf_i+0x1ae>
 800a2ca:	4615      	mov	r5, r2
 800a2cc:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2d0:	fb03 6711 	mls	r7, r3, r1, r6
 800a2d4:	5dc7      	ldrb	r7, [r0, r7]
 800a2d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2da:	4637      	mov	r7, r6
 800a2dc:	42bb      	cmp	r3, r7
 800a2de:	460e      	mov	r6, r1
 800a2e0:	d9f4      	bls.n	800a2cc <_printf_i+0x118>
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d10b      	bne.n	800a2fe <_printf_i+0x14a>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	07de      	lsls	r6, r3, #31
 800a2ea:	d508      	bpl.n	800a2fe <_printf_i+0x14a>
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	6861      	ldr	r1, [r4, #4]
 800a2f0:	4299      	cmp	r1, r3
 800a2f2:	bfde      	ittt	le
 800a2f4:	2330      	movle	r3, #48	; 0x30
 800a2f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a2fe:	1b52      	subs	r2, r2, r5
 800a300:	6122      	str	r2, [r4, #16]
 800a302:	464b      	mov	r3, r9
 800a304:	4621      	mov	r1, r4
 800a306:	4640      	mov	r0, r8
 800a308:	f8cd a000 	str.w	sl, [sp]
 800a30c:	aa03      	add	r2, sp, #12
 800a30e:	f7ff fedf 	bl	800a0d0 <_printf_common>
 800a312:	3001      	adds	r0, #1
 800a314:	d14a      	bne.n	800a3ac <_printf_i+0x1f8>
 800a316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a31a:	b004      	add	sp, #16
 800a31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	f043 0320 	orr.w	r3, r3, #32
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	2778      	movs	r7, #120	; 0x78
 800a32a:	4832      	ldr	r0, [pc, #200]	; (800a3f4 <_printf_i+0x240>)
 800a32c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	6829      	ldr	r1, [r5, #0]
 800a334:	061f      	lsls	r7, r3, #24
 800a336:	f851 6b04 	ldr.w	r6, [r1], #4
 800a33a:	d402      	bmi.n	800a342 <_printf_i+0x18e>
 800a33c:	065f      	lsls	r7, r3, #25
 800a33e:	bf48      	it	mi
 800a340:	b2b6      	uxthmi	r6, r6
 800a342:	07df      	lsls	r7, r3, #31
 800a344:	bf48      	it	mi
 800a346:	f043 0320 	orrmi.w	r3, r3, #32
 800a34a:	6029      	str	r1, [r5, #0]
 800a34c:	bf48      	it	mi
 800a34e:	6023      	strmi	r3, [r4, #0]
 800a350:	b91e      	cbnz	r6, 800a35a <_printf_i+0x1a6>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	f023 0320 	bic.w	r3, r3, #32
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	2310      	movs	r3, #16
 800a35c:	e7a6      	b.n	800a2ac <_printf_i+0xf8>
 800a35e:	4824      	ldr	r0, [pc, #144]	; (800a3f0 <_printf_i+0x23c>)
 800a360:	e7e4      	b.n	800a32c <_printf_i+0x178>
 800a362:	4615      	mov	r5, r2
 800a364:	e7bd      	b.n	800a2e2 <_printf_i+0x12e>
 800a366:	682b      	ldr	r3, [r5, #0]
 800a368:	6826      	ldr	r6, [r4, #0]
 800a36a:	1d18      	adds	r0, r3, #4
 800a36c:	6961      	ldr	r1, [r4, #20]
 800a36e:	6028      	str	r0, [r5, #0]
 800a370:	0635      	lsls	r5, r6, #24
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	d501      	bpl.n	800a37a <_printf_i+0x1c6>
 800a376:	6019      	str	r1, [r3, #0]
 800a378:	e002      	b.n	800a380 <_printf_i+0x1cc>
 800a37a:	0670      	lsls	r0, r6, #25
 800a37c:	d5fb      	bpl.n	800a376 <_printf_i+0x1c2>
 800a37e:	8019      	strh	r1, [r3, #0]
 800a380:	2300      	movs	r3, #0
 800a382:	4615      	mov	r5, r2
 800a384:	6123      	str	r3, [r4, #16]
 800a386:	e7bc      	b.n	800a302 <_printf_i+0x14e>
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	2100      	movs	r1, #0
 800a38c:	1d1a      	adds	r2, r3, #4
 800a38e:	602a      	str	r2, [r5, #0]
 800a390:	681d      	ldr	r5, [r3, #0]
 800a392:	6862      	ldr	r2, [r4, #4]
 800a394:	4628      	mov	r0, r5
 800a396:	f000 f97f 	bl	800a698 <memchr>
 800a39a:	b108      	cbz	r0, 800a3a0 <_printf_i+0x1ec>
 800a39c:	1b40      	subs	r0, r0, r5
 800a39e:	6060      	str	r0, [r4, #4]
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	6123      	str	r3, [r4, #16]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3aa:	e7aa      	b.n	800a302 <_printf_i+0x14e>
 800a3ac:	462a      	mov	r2, r5
 800a3ae:	4649      	mov	r1, r9
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	47d0      	blx	sl
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d0ad      	beq.n	800a316 <_printf_i+0x162>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	079b      	lsls	r3, r3, #30
 800a3be:	d413      	bmi.n	800a3e8 <_printf_i+0x234>
 800a3c0:	68e0      	ldr	r0, [r4, #12]
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	4298      	cmp	r0, r3
 800a3c6:	bfb8      	it	lt
 800a3c8:	4618      	movlt	r0, r3
 800a3ca:	e7a6      	b.n	800a31a <_printf_i+0x166>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	47d0      	blx	sl
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d09d      	beq.n	800a316 <_printf_i+0x162>
 800a3da:	3501      	adds	r5, #1
 800a3dc:	68e3      	ldr	r3, [r4, #12]
 800a3de:	9903      	ldr	r1, [sp, #12]
 800a3e0:	1a5b      	subs	r3, r3, r1
 800a3e2:	42ab      	cmp	r3, r5
 800a3e4:	dcf2      	bgt.n	800a3cc <_printf_i+0x218>
 800a3e6:	e7eb      	b.n	800a3c0 <_printf_i+0x20c>
 800a3e8:	2500      	movs	r5, #0
 800a3ea:	f104 0619 	add.w	r6, r4, #25
 800a3ee:	e7f5      	b.n	800a3dc <_printf_i+0x228>
 800a3f0:	0800b97b 	.word	0x0800b97b
 800a3f4:	0800b98c 	.word	0x0800b98c

0800a3f8 <__sflush_r>:
 800a3f8:	898a      	ldrh	r2, [r1, #12]
 800a3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	0710      	lsls	r0, r2, #28
 800a400:	460c      	mov	r4, r1
 800a402:	d457      	bmi.n	800a4b4 <__sflush_r+0xbc>
 800a404:	684b      	ldr	r3, [r1, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dc04      	bgt.n	800a414 <__sflush_r+0x1c>
 800a40a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dc01      	bgt.n	800a414 <__sflush_r+0x1c>
 800a410:	2000      	movs	r0, #0
 800a412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a416:	2e00      	cmp	r6, #0
 800a418:	d0fa      	beq.n	800a410 <__sflush_r+0x18>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a420:	682f      	ldr	r7, [r5, #0]
 800a422:	6a21      	ldr	r1, [r4, #32]
 800a424:	602b      	str	r3, [r5, #0]
 800a426:	d032      	beq.n	800a48e <__sflush_r+0x96>
 800a428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	075a      	lsls	r2, r3, #29
 800a42e:	d505      	bpl.n	800a43c <__sflush_r+0x44>
 800a430:	6863      	ldr	r3, [r4, #4]
 800a432:	1ac0      	subs	r0, r0, r3
 800a434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a436:	b10b      	cbz	r3, 800a43c <__sflush_r+0x44>
 800a438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a43a:	1ac0      	subs	r0, r0, r3
 800a43c:	2300      	movs	r3, #0
 800a43e:	4602      	mov	r2, r0
 800a440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a442:	4628      	mov	r0, r5
 800a444:	6a21      	ldr	r1, [r4, #32]
 800a446:	47b0      	blx	r6
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	d106      	bne.n	800a45c <__sflush_r+0x64>
 800a44e:	6829      	ldr	r1, [r5, #0]
 800a450:	291d      	cmp	r1, #29
 800a452:	d82b      	bhi.n	800a4ac <__sflush_r+0xb4>
 800a454:	4a28      	ldr	r2, [pc, #160]	; (800a4f8 <__sflush_r+0x100>)
 800a456:	410a      	asrs	r2, r1
 800a458:	07d6      	lsls	r6, r2, #31
 800a45a:	d427      	bmi.n	800a4ac <__sflush_r+0xb4>
 800a45c:	2200      	movs	r2, #0
 800a45e:	6062      	str	r2, [r4, #4]
 800a460:	6922      	ldr	r2, [r4, #16]
 800a462:	04d9      	lsls	r1, r3, #19
 800a464:	6022      	str	r2, [r4, #0]
 800a466:	d504      	bpl.n	800a472 <__sflush_r+0x7a>
 800a468:	1c42      	adds	r2, r0, #1
 800a46a:	d101      	bne.n	800a470 <__sflush_r+0x78>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b903      	cbnz	r3, 800a472 <__sflush_r+0x7a>
 800a470:	6560      	str	r0, [r4, #84]	; 0x54
 800a472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a474:	602f      	str	r7, [r5, #0]
 800a476:	2900      	cmp	r1, #0
 800a478:	d0ca      	beq.n	800a410 <__sflush_r+0x18>
 800a47a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a47e:	4299      	cmp	r1, r3
 800a480:	d002      	beq.n	800a488 <__sflush_r+0x90>
 800a482:	4628      	mov	r0, r5
 800a484:	f7ff fbee 	bl	8009c64 <_free_r>
 800a488:	2000      	movs	r0, #0
 800a48a:	6360      	str	r0, [r4, #52]	; 0x34
 800a48c:	e7c1      	b.n	800a412 <__sflush_r+0x1a>
 800a48e:	2301      	movs	r3, #1
 800a490:	4628      	mov	r0, r5
 800a492:	47b0      	blx	r6
 800a494:	1c41      	adds	r1, r0, #1
 800a496:	d1c8      	bne.n	800a42a <__sflush_r+0x32>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0c5      	beq.n	800a42a <__sflush_r+0x32>
 800a49e:	2b1d      	cmp	r3, #29
 800a4a0:	d001      	beq.n	800a4a6 <__sflush_r+0xae>
 800a4a2:	2b16      	cmp	r3, #22
 800a4a4:	d101      	bne.n	800a4aa <__sflush_r+0xb2>
 800a4a6:	602f      	str	r7, [r5, #0]
 800a4a8:	e7b2      	b.n	800a410 <__sflush_r+0x18>
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	e7ae      	b.n	800a412 <__sflush_r+0x1a>
 800a4b4:	690f      	ldr	r7, [r1, #16]
 800a4b6:	2f00      	cmp	r7, #0
 800a4b8:	d0aa      	beq.n	800a410 <__sflush_r+0x18>
 800a4ba:	0793      	lsls	r3, r2, #30
 800a4bc:	bf18      	it	ne
 800a4be:	2300      	movne	r3, #0
 800a4c0:	680e      	ldr	r6, [r1, #0]
 800a4c2:	bf08      	it	eq
 800a4c4:	694b      	ldreq	r3, [r1, #20]
 800a4c6:	1bf6      	subs	r6, r6, r7
 800a4c8:	600f      	str	r7, [r1, #0]
 800a4ca:	608b      	str	r3, [r1, #8]
 800a4cc:	2e00      	cmp	r6, #0
 800a4ce:	dd9f      	ble.n	800a410 <__sflush_r+0x18>
 800a4d0:	4633      	mov	r3, r6
 800a4d2:	463a      	mov	r2, r7
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	6a21      	ldr	r1, [r4, #32]
 800a4d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a4dc:	47e0      	blx	ip
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	dc06      	bgt.n	800a4f0 <__sflush_r+0xf8>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	e790      	b.n	800a412 <__sflush_r+0x1a>
 800a4f0:	4407      	add	r7, r0
 800a4f2:	1a36      	subs	r6, r6, r0
 800a4f4:	e7ea      	b.n	800a4cc <__sflush_r+0xd4>
 800a4f6:	bf00      	nop
 800a4f8:	dfbffffe 	.word	0xdfbffffe

0800a4fc <_fflush_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	690b      	ldr	r3, [r1, #16]
 800a500:	4605      	mov	r5, r0
 800a502:	460c      	mov	r4, r1
 800a504:	b913      	cbnz	r3, 800a50c <_fflush_r+0x10>
 800a506:	2500      	movs	r5, #0
 800a508:	4628      	mov	r0, r5
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	b118      	cbz	r0, 800a516 <_fflush_r+0x1a>
 800a50e:	6a03      	ldr	r3, [r0, #32]
 800a510:	b90b      	cbnz	r3, 800a516 <_fflush_r+0x1a>
 800a512:	f7ff fa87 	bl	8009a24 <__sinit>
 800a516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0f3      	beq.n	800a506 <_fflush_r+0xa>
 800a51e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a520:	07d0      	lsls	r0, r2, #31
 800a522:	d404      	bmi.n	800a52e <_fflush_r+0x32>
 800a524:	0599      	lsls	r1, r3, #22
 800a526:	d402      	bmi.n	800a52e <_fflush_r+0x32>
 800a528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a52a:	f7ff fb8a 	bl	8009c42 <__retarget_lock_acquire_recursive>
 800a52e:	4628      	mov	r0, r5
 800a530:	4621      	mov	r1, r4
 800a532:	f7ff ff61 	bl	800a3f8 <__sflush_r>
 800a536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a538:	4605      	mov	r5, r0
 800a53a:	07da      	lsls	r2, r3, #31
 800a53c:	d4e4      	bmi.n	800a508 <_fflush_r+0xc>
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	059b      	lsls	r3, r3, #22
 800a542:	d4e1      	bmi.n	800a508 <_fflush_r+0xc>
 800a544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a546:	f7ff fb7d 	bl	8009c44 <__retarget_lock_release_recursive>
 800a54a:	e7dd      	b.n	800a508 <_fflush_r+0xc>

0800a54c <__swbuf_r>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	460e      	mov	r6, r1
 800a550:	4614      	mov	r4, r2
 800a552:	4605      	mov	r5, r0
 800a554:	b118      	cbz	r0, 800a55e <__swbuf_r+0x12>
 800a556:	6a03      	ldr	r3, [r0, #32]
 800a558:	b90b      	cbnz	r3, 800a55e <__swbuf_r+0x12>
 800a55a:	f7ff fa63 	bl	8009a24 <__sinit>
 800a55e:	69a3      	ldr	r3, [r4, #24]
 800a560:	60a3      	str	r3, [r4, #8]
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	071a      	lsls	r2, r3, #28
 800a566:	d525      	bpl.n	800a5b4 <__swbuf_r+0x68>
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	b31b      	cbz	r3, 800a5b4 <__swbuf_r+0x68>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	6922      	ldr	r2, [r4, #16]
 800a570:	b2f6      	uxtb	r6, r6
 800a572:	1a98      	subs	r0, r3, r2
 800a574:	6963      	ldr	r3, [r4, #20]
 800a576:	4637      	mov	r7, r6
 800a578:	4283      	cmp	r3, r0
 800a57a:	dc04      	bgt.n	800a586 <__swbuf_r+0x3a>
 800a57c:	4621      	mov	r1, r4
 800a57e:	4628      	mov	r0, r5
 800a580:	f7ff ffbc 	bl	800a4fc <_fflush_r>
 800a584:	b9e0      	cbnz	r0, 800a5c0 <__swbuf_r+0x74>
 800a586:	68a3      	ldr	r3, [r4, #8]
 800a588:	3b01      	subs	r3, #1
 800a58a:	60a3      	str	r3, [r4, #8]
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	6022      	str	r2, [r4, #0]
 800a592:	701e      	strb	r6, [r3, #0]
 800a594:	6962      	ldr	r2, [r4, #20]
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	429a      	cmp	r2, r3
 800a59a:	d004      	beq.n	800a5a6 <__swbuf_r+0x5a>
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	07db      	lsls	r3, r3, #31
 800a5a0:	d506      	bpl.n	800a5b0 <__swbuf_r+0x64>
 800a5a2:	2e0a      	cmp	r6, #10
 800a5a4:	d104      	bne.n	800a5b0 <__swbuf_r+0x64>
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	f7ff ffa7 	bl	800a4fc <_fflush_r>
 800a5ae:	b938      	cbnz	r0, 800a5c0 <__swbuf_r+0x74>
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 f806 	bl	800a5c8 <__swsetup_r>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d0d5      	beq.n	800a56c <__swbuf_r+0x20>
 800a5c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5c4:	e7f4      	b.n	800a5b0 <__swbuf_r+0x64>
	...

0800a5c8 <__swsetup_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4b2a      	ldr	r3, [pc, #168]	; (800a674 <__swsetup_r+0xac>)
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	b118      	cbz	r0, 800a5dc <__swsetup_r+0x14>
 800a5d4:	6a03      	ldr	r3, [r0, #32]
 800a5d6:	b90b      	cbnz	r3, 800a5dc <__swsetup_r+0x14>
 800a5d8:	f7ff fa24 	bl	8009a24 <__sinit>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5e2:	0718      	lsls	r0, r3, #28
 800a5e4:	d422      	bmi.n	800a62c <__swsetup_r+0x64>
 800a5e6:	06d9      	lsls	r1, r3, #27
 800a5e8:	d407      	bmi.n	800a5fa <__swsetup_r+0x32>
 800a5ea:	2309      	movs	r3, #9
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f6:	81a3      	strh	r3, [r4, #12]
 800a5f8:	e034      	b.n	800a664 <__swsetup_r+0x9c>
 800a5fa:	0758      	lsls	r0, r3, #29
 800a5fc:	d512      	bpl.n	800a624 <__swsetup_r+0x5c>
 800a5fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a600:	b141      	cbz	r1, 800a614 <__swsetup_r+0x4c>
 800a602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a606:	4299      	cmp	r1, r3
 800a608:	d002      	beq.n	800a610 <__swsetup_r+0x48>
 800a60a:	4628      	mov	r0, r5
 800a60c:	f7ff fb2a 	bl	8009c64 <_free_r>
 800a610:	2300      	movs	r3, #0
 800a612:	6363      	str	r3, [r4, #52]	; 0x34
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a61a:	81a3      	strh	r3, [r4, #12]
 800a61c:	2300      	movs	r3, #0
 800a61e:	6063      	str	r3, [r4, #4]
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	6023      	str	r3, [r4, #0]
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	f043 0308 	orr.w	r3, r3, #8
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	b94b      	cbnz	r3, 800a644 <__swsetup_r+0x7c>
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a63a:	d003      	beq.n	800a644 <__swsetup_r+0x7c>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4628      	mov	r0, r5
 800a640:	f000 f85d 	bl	800a6fe <__smakebuf_r>
 800a644:	89a0      	ldrh	r0, [r4, #12]
 800a646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a64a:	f010 0301 	ands.w	r3, r0, #1
 800a64e:	d00a      	beq.n	800a666 <__swsetup_r+0x9e>
 800a650:	2300      	movs	r3, #0
 800a652:	60a3      	str	r3, [r4, #8]
 800a654:	6963      	ldr	r3, [r4, #20]
 800a656:	425b      	negs	r3, r3
 800a658:	61a3      	str	r3, [r4, #24]
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	b943      	cbnz	r3, 800a670 <__swsetup_r+0xa8>
 800a65e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a662:	d1c4      	bne.n	800a5ee <__swsetup_r+0x26>
 800a664:	bd38      	pop	{r3, r4, r5, pc}
 800a666:	0781      	lsls	r1, r0, #30
 800a668:	bf58      	it	pl
 800a66a:	6963      	ldrpl	r3, [r4, #20]
 800a66c:	60a3      	str	r3, [r4, #8]
 800a66e:	e7f4      	b.n	800a65a <__swsetup_r+0x92>
 800a670:	2000      	movs	r0, #0
 800a672:	e7f7      	b.n	800a664 <__swsetup_r+0x9c>
 800a674:	20000064 	.word	0x20000064

0800a678 <_sbrk_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	2300      	movs	r3, #0
 800a67c:	4d05      	ldr	r5, [pc, #20]	; (800a694 <_sbrk_r+0x1c>)
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	602b      	str	r3, [r5, #0]
 800a684:	f7f7 f902 	bl	800188c <_sbrk>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_sbrk_r+0x1a>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_sbrk_r+0x1a>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	20007e74 	.word	0x20007e74

0800a698 <memchr>:
 800a698:	4603      	mov	r3, r0
 800a69a:	b510      	push	{r4, lr}
 800a69c:	b2c9      	uxtb	r1, r1
 800a69e:	4402      	add	r2, r0
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	d101      	bne.n	800a6aa <memchr+0x12>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	e003      	b.n	800a6b2 <memchr+0x1a>
 800a6aa:	7804      	ldrb	r4, [r0, #0]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	428c      	cmp	r4, r1
 800a6b0:	d1f6      	bne.n	800a6a0 <memchr+0x8>
 800a6b2:	bd10      	pop	{r4, pc}

0800a6b4 <__swhatbuf_r>:
 800a6b4:	b570      	push	{r4, r5, r6, lr}
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6bc:	4615      	mov	r5, r2
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	461e      	mov	r6, r3
 800a6c2:	b096      	sub	sp, #88	; 0x58
 800a6c4:	da0c      	bge.n	800a6e0 <__swhatbuf_r+0x2c>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a6ce:	bf0c      	ite	eq
 800a6d0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a6d4:	2340      	movne	r3, #64	; 0x40
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	6031      	str	r1, [r6, #0]
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	b016      	add	sp, #88	; 0x58
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	466a      	mov	r2, sp
 800a6e2:	f000 f849 	bl	800a778 <_fstat_r>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	dbed      	blt.n	800a6c6 <__swhatbuf_r+0x12>
 800a6ea:	9901      	ldr	r1, [sp, #4]
 800a6ec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a6f0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a6f4:	4259      	negs	r1, r3
 800a6f6:	4159      	adcs	r1, r3
 800a6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6fc:	e7eb      	b.n	800a6d6 <__swhatbuf_r+0x22>

0800a6fe <__smakebuf_r>:
 800a6fe:	898b      	ldrh	r3, [r1, #12]
 800a700:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a702:	079d      	lsls	r5, r3, #30
 800a704:	4606      	mov	r6, r0
 800a706:	460c      	mov	r4, r1
 800a708:	d507      	bpl.n	800a71a <__smakebuf_r+0x1c>
 800a70a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a70e:	6023      	str	r3, [r4, #0]
 800a710:	6123      	str	r3, [r4, #16]
 800a712:	2301      	movs	r3, #1
 800a714:	6163      	str	r3, [r4, #20]
 800a716:	b002      	add	sp, #8
 800a718:	bd70      	pop	{r4, r5, r6, pc}
 800a71a:	466a      	mov	r2, sp
 800a71c:	ab01      	add	r3, sp, #4
 800a71e:	f7ff ffc9 	bl	800a6b4 <__swhatbuf_r>
 800a722:	9900      	ldr	r1, [sp, #0]
 800a724:	4605      	mov	r5, r0
 800a726:	4630      	mov	r0, r6
 800a728:	f7ff fb04 	bl	8009d34 <_malloc_r>
 800a72c:	b948      	cbnz	r0, 800a742 <__smakebuf_r+0x44>
 800a72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a732:	059a      	lsls	r2, r3, #22
 800a734:	d4ef      	bmi.n	800a716 <__smakebuf_r+0x18>
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	f043 0302 	orr.w	r3, r3, #2
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	e7e3      	b.n	800a70a <__smakebuf_r+0xc>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	6020      	str	r0, [r4, #0]
 800a746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	9b00      	ldr	r3, [sp, #0]
 800a74e:	6120      	str	r0, [r4, #16]
 800a750:	6163      	str	r3, [r4, #20]
 800a752:	9b01      	ldr	r3, [sp, #4]
 800a754:	b15b      	cbz	r3, 800a76e <__smakebuf_r+0x70>
 800a756:	4630      	mov	r0, r6
 800a758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a75c:	f000 f81e 	bl	800a79c <_isatty_r>
 800a760:	b128      	cbz	r0, 800a76e <__smakebuf_r+0x70>
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f023 0303 	bic.w	r3, r3, #3
 800a768:	f043 0301 	orr.w	r3, r3, #1
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	431d      	orrs	r5, r3
 800a772:	81a5      	strh	r5, [r4, #12]
 800a774:	e7cf      	b.n	800a716 <__smakebuf_r+0x18>
	...

0800a778 <_fstat_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	2300      	movs	r3, #0
 800a77c:	4d06      	ldr	r5, [pc, #24]	; (800a798 <_fstat_r+0x20>)
 800a77e:	4604      	mov	r4, r0
 800a780:	4608      	mov	r0, r1
 800a782:	4611      	mov	r1, r2
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	f7f7 f85b 	bl	8001840 <_fstat>
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	d102      	bne.n	800a794 <_fstat_r+0x1c>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	b103      	cbz	r3, 800a794 <_fstat_r+0x1c>
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	bd38      	pop	{r3, r4, r5, pc}
 800a796:	bf00      	nop
 800a798:	20007e74 	.word	0x20007e74

0800a79c <_isatty_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4d05      	ldr	r5, [pc, #20]	; (800a7b8 <_isatty_r+0x1c>)
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	f7f7 f859 	bl	800185e <_isatty>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_isatty_r+0x1a>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_isatty_r+0x1a>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20007e74 	.word	0x20007e74

0800a7bc <_init>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr

0800a7c8 <_fini>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr
